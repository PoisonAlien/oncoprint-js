import { MafData, MetadataRow, ProcessedData, OncoprintConfig, ValidationResult, MetadataTrackConfig, CohortInfo } from '../types';
import { EventEmitter } from '../utils';
export declare class OncoprintVisualizer extends EventEmitter {
    private container;
    private renderer;
    private processedData;
    private rawMafData;
    private rawMetadataData;
    private cohortInfo?;
    private config;
    constructor(container: HTMLElement, config?: OncoprintConfig);
    loadMafFile(file: File): Promise<ValidationResult>;
    loadMafData(data: MafData[], cohortInfo?: CohortInfo): Promise<void>;
    loadMetadataFile(file: File): Promise<ValidationResult>;
    loadMetadataData(data: MetadataRow[]): Promise<void>;
    render(): void;
    update(config?: Partial<OncoprintConfig>): void;
    resize(width?: number, height?: number): void;
    exportSVG(): string;
    exportPNG(options?: {
        backgroundColor?: string;
        cropToContent?: boolean;
        padding?: number;
        scale?: number;
    }): Promise<Blob>;
    exportData(): ProcessedData;
    getSelectedGenes(): string[];
    getSelectedSamples(): string[];
    setGeneSelection(genes: string[]): void;
    setSampleSelection(samples: string[]): void;
    getAvailableGenes(): string[];
    getAllGenes(): string[];
    getAvailableSamples(): string[];
    getAllSamples(): string[];
    getPercentageCalculationBase(): number;
    getCohortInfo(): {
        totalSamples: number;
        hasCohortInfo: boolean;
        missingSamples?: string[];
    };
    getMetadataFields(): string[];
    getVariantTypes(): string[];
    getMutationStats(): {
        totalMutations: number;
        totalGenes: number;
        totalSamples: number;
        averageMutationsPerSample: number;
        averageMutationsPerGene: number;
    };
    setConfig(config: OncoprintConfig): void;
    getConfig(): OncoprintConfig;
    sortGenesByFrequency(descending?: boolean): void;
    sortSamplesByMutationLoad(descending?: boolean): void;
    sortSamplesByMetadata(field: string, ascending?: boolean): void;
    filterByMutationFrequency(minFrequency: number, maxFrequency?: number): void;
    filterByMutationCount(minCount: number, maxCount?: number): void;
    private setupRendererEvents;
    private applyDataFilters;
    private reprocessData;
    private reconstructMafData;
    addMetadataTrack(trackConfig: MetadataTrackConfig): void;
    removeMetadataTrack(fieldName: string): void;
    updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void;
    showMetadataTrack(fieldName: string): void;
    hideMetadataTrack(fieldName: string): void;
    reorderMetadataTracks(fieldOrder: string[]): void;
    getMetadataConfig(): MetadataTrackConfig[];
    setMetadataConfig(tracks: MetadataTrackConfig[]): void;
    getAvailableMetadataFields(): string[];
    destroy(): void;
}
