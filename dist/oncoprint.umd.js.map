{"version":3,"file":"oncoprint.umd.js","sources":["../src/parsers/MafParser.ts","../src/parsers/MetadataParser.ts","../src/core/DataProcessor.ts","../src/core/VariantColorManager.ts","../src/utils/EventEmitter.ts","../src/renderers/OncoprintRenderer.ts","../src/core/OncoprintVisualizer.ts"],"sourcesContent":["import { MafData, ValidationResult, ValidationError, ValidationWarning } from '../types';\n\nexport class MafParser {\n  private static readonly REQUIRED_COLUMNS = [\n    'Hugo_Symbol',\n    'Tumor_Sample_Barcode',\n    'Variant_Classification'\n  ];\n\n  private static readonly OPTIONAL_COLUMNS = [\n    'Protein_Change',\n    'Chromosome',\n    'Start_Position',\n    'End_Position'\n  ];\n\n  static async parseFromFile(file: File): Promise<MafData[]> {\n    const content = await this.readFileContent(file);\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static parseFromString(content: string, delimiter: string = '\\t'): MafData[] {\n    const lines = content.trim().split('\\n');\n    if (lines.length === 0) {\n      throw new Error('File is empty');\n    }\n\n    const headers = lines[0].split(delimiter).map(h => h.trim());\n    const data: MafData[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(delimiter);\n      if (values.length !== headers.length) {\n        console.warn(`Line ${i + 1} has ${values.length} columns but expected ${headers.length}`);\n        continue;\n      }\n\n      const row: any = {};\n      headers.forEach((header, index) => {\n        const value = values[index]?.trim();\n        if (value && value !== '') {\n          if (header === 'Start_Position' || header === 'End_Position') {\n            const numValue = parseInt(value, 10);\n            if (!isNaN(numValue)) {\n              row[header] = numValue;\n            }\n          } else {\n            row[header] = value;\n          }\n        }\n      });\n\n      if (row.Hugo_Symbol && row.Tumor_Sample_Barcode && row.Variant_Classification) {\n        data.push(row as MafData);\n      }\n    }\n\n    return data;\n  }\n\n  static async parseFromUrl(url: string): Promise<MafData[]> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch MAF file from ${url}: ${response.statusText}`);\n    }\n    const content = await response.text();\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static validateMafData(data: MafData[]): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    if (data.length === 0) {\n      errors.push({\n        type: 'empty_file',\n        message: 'No valid MAF data found'\n      });\n      return { isValid: false, errors, warnings };\n    }\n\n    // Check for required columns\n    const firstRow = data[0];\n    this.REQUIRED_COLUMNS.forEach(column => {\n      if (!(column in firstRow)) {\n        errors.push({\n          type: 'missing_column',\n          message: `Required column '${column}' is missing`,\n          column\n        });\n      }\n    });\n\n    // Check data quality\n    const variantTypes = new Set<string>();\n    const genes = new Set<string>();\n    const samples = new Set<string>();\n\n    data.forEach((row, index) => {\n      if (!row.Hugo_Symbol) {\n        warnings.push({\n          type: 'data_quality',\n          message: `Missing gene symbol at row ${index + 1}`,\n          line: index + 1\n        });\n      } else {\n        genes.add(row.Hugo_Symbol);\n      }\n\n      if (!row.Tumor_Sample_Barcode) {\n        warnings.push({\n          type: 'data_quality',\n          message: `Missing sample barcode at row ${index + 1}`,\n          line: index + 1\n        });\n      } else {\n        samples.add(row.Tumor_Sample_Barcode);\n      }\n\n      if (row.Variant_Classification) {\n        variantTypes.add(row.Variant_Classification);\n      }\n    });\n\n    // Warn about unknown variant types\n    const knownVariants = new Set([\n      'Missense_Mutation', 'Splice_Site', 'Frame_Shift_Del', 'Frame_Shift_Ins',\n      'In_Frame_Del', 'In_Frame_Ins', 'Nonsense_Mutation', 'Multi_Hit',\n      'Translation_Start_Site', 'Nonstop_Mutation'\n    ]);\n\n    variantTypes.forEach(variant => {\n      if (!knownVariants.has(variant)) {\n        warnings.push({\n          type: 'unknown_variant',\n          message: `Unknown variant classification: ${variant}`\n        });\n      }\n    });\n\n    console.log(`Parsed ${data.length} mutations across ${genes.size} genes and ${samples.size} samples`);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private static async readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  }\n\n  private static detectDelimiter(content: string): string {\n    const firstLine = content.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    \n    return tabCount > commaCount ? '\\t' : ',';\n  }\n}","import { MetadataRow, ValidationResult, ValidationError, ValidationWarning } from '../types';\n\nexport type FieldTypeMap = Record<string, 'categorical' | 'numerical'>;\n\nexport class MetadataParser {\n  static async parseFromFile(file: File): Promise<MetadataRow[]> {\n    const content = await this.readFileContent(file);\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static parseFromString(content: string, delimiter: string = '\\t'): MetadataRow[] {\n    const lines = content.trim().split('\\n');\n    if (lines.length === 0) {\n      throw new Error('File is empty');\n    }\n\n    const headers = lines[0].split(delimiter).map(h => h.trim());\n    const data: MetadataRow[] = [];\n\n    // Check if Tumor_Sample_Barcode column exists\n    if (!headers.includes('Tumor_Sample_Barcode')) {\n      throw new Error('Metadata file must contain \"Tumor_Sample_Barcode\" column');\n    }\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(delimiter);\n      if (values.length !== headers.length) {\n        console.warn(`Line ${i + 1} has ${values.length} columns but expected ${headers.length}`);\n        continue;\n      }\n\n      const row: any = {};\n      headers.forEach((header, index) => {\n        const value = values[index]?.trim();\n        if (value && value !== '') {\n          // Try to parse as number\n          const numValue = parseFloat(value);\n          if (!isNaN(numValue) && isFinite(numValue)) {\n            row[header] = numValue;\n          } else {\n            row[header] = value;\n          }\n        }\n      });\n\n      if (row.Tumor_Sample_Barcode) {\n        data.push(row as MetadataRow);\n      }\n    }\n\n    return data;\n  }\n\n  static async parseFromUrl(url: string): Promise<MetadataRow[]> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch metadata file from ${url}: ${response.statusText}`);\n    }\n    const content = await response.text();\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static detectFieldTypes(data: MetadataRow[]): FieldTypeMap {\n    if (data.length === 0) return {};\n\n    const fieldTypes: FieldTypeMap = {};\n    const fields = Object.keys(data[0]);\n\n    fields.forEach(field => {\n      if (field === 'Tumor_Sample_Barcode') {\n        fieldTypes[field] = 'categorical';\n        return;\n      }\n\n      const values = data.map(row => row[field]).filter(v => v !== undefined && v !== null);\n      const numericValues = values.filter(v => typeof v === 'number');\n      \n      // If more than 80% of values are numeric and we have enough unique values, treat as numerical\n      const isNumeric = numericValues.length / values.length > 0.8;\n      const uniqueValues = new Set(values);\n      \n      // Categorical if fewer than 20 unique values or if most values are strings\n      if (uniqueValues.size < 20 || !isNumeric) {\n        fieldTypes[field] = 'categorical';\n      } else {\n        fieldTypes[field] = 'numerical';\n      }\n    });\n\n    return fieldTypes;\n  }\n\n  static validateMetadata(data: MetadataRow[], mafSamples?: string[]): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    if (data.length === 0) {\n      errors.push({\n        type: 'empty_file',\n        message: 'No valid metadata found'\n      });\n      return { isValid: false, errors, warnings };\n    }\n\n    // Check for required sample barcode column\n    const firstRow = data[0];\n    if (!('Tumor_Sample_Barcode' in firstRow)) {\n      errors.push({\n        type: 'missing_column',\n        message: 'Required column \"Tumor_Sample_Barcode\" is missing',\n        column: 'Tumor_Sample_Barcode'\n      });\n    }\n\n    // If MAF samples are provided, check for overlap\n    if (mafSamples && mafSamples.length > 0) {\n      const metadataSamples = new Set(data.map(row => row.Tumor_Sample_Barcode));\n      const mafSampleSet = new Set(mafSamples);\n      \n      const overlap = mafSamples.filter(sample => metadataSamples.has(sample));\n      const overlapPercentage = overlap.length / mafSamples.length;\n\n      if (overlapPercentage < 0.5) {\n        warnings.push({\n          type: 'missing_metadata',\n          message: `Only ${Math.round(overlapPercentage * 100)}% of MAF samples have metadata`\n        });\n      }\n\n      const uniqueToMetadata = Array.from(metadataSamples).filter(sample => !mafSampleSet.has(sample));\n      if (uniqueToMetadata.length > 0) {\n        warnings.push({\n          type: 'missing_metadata',\n          message: `${uniqueToMetadata.length} samples in metadata not found in MAF data`\n        });\n      }\n    }\n\n    console.log(`Parsed metadata for ${data.length} samples`);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private static async readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  }\n\n  private static detectDelimiter(content: string): string {\n    const firstLine = content.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    \n    return tabCount > commaCount ? '\\t' : ',';\n  }\n}","import { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  ProcessedMutation, \n  ProcessedMetadata,\n  CohortInfo,\n  SampleGroup\n} from '../types';\nimport { MetadataParser } from '../parsers';\n\nexport class DataProcessor {\n  static processData(maf: MafData[], metadata?: MetadataRow[], cohortInfo?: CohortInfo): ProcessedData {\n    // Extract unique genes and samples\n    const genes = Array.from(new Set(maf.map(row => row.Hugo_Symbol))).sort();\n    const mafSamples = Array.from(new Set(maf.map(row => row.Tumor_Sample_Barcode))).sort();\n    \n    // Determine sample list and percentage calculation base\n    let samples: string[];\n    let percentageCalculationBase: number;\n    let processedCohortInfo: ProcessedData['cohortInfo'];\n    \n    if (cohortInfo) {\n      if (cohortInfo.samples) {\n        // Full cohort sample list provided\n        samples = cohortInfo.samples.slice().sort();\n        percentageCalculationBase = cohortInfo.samples.length;\n        const missingSamples = cohortInfo.samples.filter(s => !mafSamples.includes(s));\n        processedCohortInfo = {\n          totalSamples: cohortInfo.samples.length,\n          providedSamples: cohortInfo.samples,\n          missingSamples: missingSamples\n        };\n      } else if (cohortInfo.totalSamples) {\n        // Only total count provided - use MAF samples for visualization but cohort count for percentages\n        samples = mafSamples;\n        percentageCalculationBase = cohortInfo.totalSamples;\n        processedCohortInfo = {\n          totalSamples: cohortInfo.totalSamples,\n          providedSamples: undefined,\n          missingSamples: []\n        };\n      } else {\n        // Invalid cohort info - fall back to MAF-based\n        samples = mafSamples;\n        percentageCalculationBase = mafSamples.length;\n      }\n    } else {\n      // Default: MAF-based calculation\n      samples = mafSamples;\n      percentageCalculationBase = mafSamples.length;\n    }\n\n    // Process mutations\n    const mutations: ProcessedMutation[] = maf.map(row => ({\n      gene: row.Hugo_Symbol,\n      sample: row.Tumor_Sample_Barcode,\n      variantType: row.Variant_Classification,\n      proteinChange: row.Protein_Change,\n      chromosome: row.Chromosome,\n      startPosition: row.Start_Position,\n      endPosition: row.End_Position\n    }));\n\n    // Calculate gene mutation counts\n    const geneCounts: Record<string, number> = {};\n    genes.forEach(gene => {\n      geneCounts[gene] = mutations.filter(m => m.gene === gene).length;\n    });\n\n    // Calculate sample mutation counts\n    const sampleCounts: Record<string, number> = {};\n    samples.forEach(sample => {\n      sampleCounts[sample] = mutations.filter(m => m.sample === sample).length;\n    });\n\n    // Process metadata\n    let processedMetadata: ProcessedMetadata = {\n      fields: [],\n      data: {},\n      fieldTypes: {}\n    };\n\n    if (metadata && metadata.length > 0) {\n      const fieldTypes = MetadataParser.detectFieldTypes(metadata);\n      const fields = Object.keys(fieldTypes).filter(f => f !== 'Tumor_Sample_Barcode');\n      \n      const metadataData: Record<string, Record<string, string | number>> = {};\n      metadata.forEach(row => {\n        if (samples.includes(row.Tumor_Sample_Barcode)) {\n          metadataData[row.Tumor_Sample_Barcode] = { ...row };\n          delete metadataData[row.Tumor_Sample_Barcode].Tumor_Sample_Barcode;\n        }\n      });\n\n      processedMetadata = {\n        fields,\n        data: metadataData,\n        fieldTypes\n      };\n    }\n\n    return {\n      genes,\n      samples,\n      mutations,\n      geneCounts,\n      sampleCounts,\n      metadata: processedMetadata,\n      percentageCalculationBase,\n      cohortInfo: processedCohortInfo\n      // sampleGroups will be added by DataProcessor.applySplitBy() if needed\n    };\n  }\n\n  static filterByGenes(data: ProcessedData, genes: string[]): ProcessedData {\n    const filteredGenes = data.genes.filter(gene => genes.includes(gene));\n    const filteredMutations = data.mutations.filter(m => genes.includes(m.gene));\n    \n    const geneCounts: Record<string, number> = {};\n    filteredGenes.forEach(gene => {\n      geneCounts[gene] = filteredMutations.filter(m => m.gene === gene).length;\n    });\n\n    return {\n      ...data,\n      genes: filteredGenes,\n      mutations: filteredMutations,\n      geneCounts\n    };\n  }\n\n  static filterBySamples(data: ProcessedData, samples: string[]): ProcessedData {\n    const filteredSamples = data.samples.filter(sample => samples.includes(sample));\n    const filteredMutations = data.mutations.filter(m => samples.includes(m.sample));\n    \n    const sampleCounts: Record<string, number> = {};\n    filteredSamples.forEach(sample => {\n      sampleCounts[sample] = filteredMutations.filter(m => m.sample === sample).length;\n    });\n\n    // Filter metadata\n    const filteredMetadata = { ...data.metadata };\n    const newMetadataData: Record<string, Record<string, string | number>> = {};\n    filteredSamples.forEach(sample => {\n      if (data.metadata.data[sample]) {\n        newMetadataData[sample] = data.metadata.data[sample];\n      }\n    });\n    filteredMetadata.data = newMetadataData;\n\n    return {\n      ...data,\n      samples: filteredSamples,\n      mutations: filteredMutations,\n      sampleCounts,\n      metadata: filteredMetadata\n    };\n  }\n\n  static sortGenesByFrequency(data: ProcessedData, descending: boolean = true, maxGenes?: number): string[] {\n    // Calculate unique sample counts per gene (not total mutation counts)\n    const geneFrequencies: Record<string, number> = {};\n    data.genes.forEach(gene => {\n      const uniqueSamples = new Set(\n        data.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      );\n      geneFrequencies[gene] = uniqueSamples.size;\n    });\n\n    let sortedGenes = [...data.genes].sort((a, b) => {\n      const freqA = geneFrequencies[a] || 0;\n      const freqB = geneFrequencies[b] || 0;\n      return descending ? freqB - freqA : freqA - freqB;\n    });\n\n    // Limit to top N genes if specified\n    if (maxGenes && maxGenes > 0) {\n      sortedGenes = sortedGenes.slice(0, maxGenes);\n    }\n\n    return sortedGenes;\n  }\n\n  static sortSamplesByMutationLoad(data: ProcessedData, descending: boolean = true): string[] {\n    return [...data.samples].sort((a, b) => {\n      const countA = data.sampleCounts[a] || 0;\n      const countB = data.sampleCounts[b] || 0;\n      return descending ? countB - countA : countA - countB;\n    });\n  }\n\n  static sortSamplesForOncoprint(data: ProcessedData, sortedGenes: string[]): string[] {\n    // Iterative reordering algorithm for oncoprint clustering\n    let orderedSamples = [...data.samples];\n\n    // Create mutation lookup for efficiency\n    const geneMutationInfo: Record<string, Record<string, boolean>> = {};\n    sortedGenes.forEach(gene => {\n      geneMutationInfo[gene] = {};\n      data.mutations\n        .filter(m => m.gene === gene)\n        .forEach(m => {\n          geneMutationInfo[gene][m.sample] = true;\n        });\n    });\n\n    // For each gene (in sorted order), reorder samples\n    for (const gene of sortedGenes) {\n      const mutatedSamples: string[] = [];\n      const unmutatedSamples: string[] = [];\n\n      orderedSamples.forEach(sample => {\n        if (geneMutationInfo[gene][sample]) {\n          mutatedSamples.push(sample);\n        } else {\n          unmutatedSamples.push(sample);\n        }\n      });\n\n      // Reorder: mutated first, then unmutated\n      orderedSamples = [...mutatedSamples, ...unmutatedSamples];\n    }\n\n    return orderedSamples;\n  }\n\n  static sortSamplesByMetadata(\n    data: ProcessedData, \n    field: string, \n    ascending: boolean = true\n  ): string[] {\n    if (!data.metadata.fields.includes(field)) {\n      console.warn(`Metadata field '${field}' not found`);\n      return data.samples;\n    }\n\n    return [...data.samples].sort((a, b) => {\n      const valueA = data.metadata.data[a]?.[field];\n      const valueB = data.metadata.data[b]?.[field];\n\n      if (valueA === undefined && valueB === undefined) return 0;\n      if (valueA === undefined) return 1;\n      if (valueB === undefined) return -1;\n\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\n        return ascending ? valueA - valueB : valueB - valueA;\n      }\n\n      const strA = String(valueA).toLowerCase();\n      const strB = String(valueB).toLowerCase();\n      \n      if (ascending) {\n        return strA < strB ? -1 : strA > strB ? 1 : 0;\n      } else {\n        return strA > strB ? -1 : strA < strB ? 1 : 0;\n      }\n    });\n  }\n\n  static getMutationMatrix(data: ProcessedData): Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> {\n    const matrix: Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> = {};\n    \n    // Initialize empty matrix\n    data.genes.forEach(gene => {\n      matrix[gene] = {};\n      data.samples.forEach(sample => {\n        matrix[gene][sample] = null;\n      });\n    });\n\n    // Group mutations by gene-sample pair\n    const mutationGroups: Record<string, Record<string, ProcessedMutation[]>> = {};\n    data.mutations.forEach(mutation => {\n      if (!mutationGroups[mutation.gene]) {\n        mutationGroups[mutation.gene] = {};\n      }\n      if (!mutationGroups[mutation.gene][mutation.sample]) {\n        mutationGroups[mutation.gene][mutation.sample] = [];\n      }\n      mutationGroups[mutation.gene][mutation.sample].push(mutation);\n    });\n\n    // Fill matrix with single mutations or arrays for multiple mutations\n    Object.keys(mutationGroups).forEach(gene => {\n      Object.keys(mutationGroups[gene]).forEach(sample => {\n        const mutations = mutationGroups[gene][sample];\n        if (mutations.length === 1) {\n          matrix[gene][sample] = mutations[0];\n        } else if (mutations.length === 2) {\n          matrix[gene][sample] = mutations;\n        } else if (mutations.length > 2) {\n          // Create Multi_Hit mutation\n          matrix[gene][sample] = {\n            gene: mutations[0].gene,\n            sample: mutations[0].sample,\n            variantType: 'Multi_Hit',\n            proteinChange: `${mutations.length} mutations`\n          };\n        }\n      });\n    });\n\n    return matrix;\n  }\n\n  static calculateMutationFrequencies(data: ProcessedData): Record<string, number> {\n    const frequencies: Record<string, number> = {};\n    // Use the percentage calculation base (cohort-based or MAF-based)\n    const totalSamples = data.percentageCalculationBase;\n\n    data.genes.forEach(gene => {\n      const mutatedSamples = new Set(\n        data.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      );\n      frequencies[gene] = mutatedSamples.size / totalSamples;\n    });\n\n    return frequencies;\n  }\n\n  static getVariantTypes(data: ProcessedData): string[] {\n    return Array.from(new Set(data.mutations.map(m => m.variantType))).sort();\n  }\n\n  static applySplitBy(\n    data: ProcessedData, \n    splitField: string,\n    sortMethod: 'mutation_load' | 'alphabetical' | 'custom' | 'oncoprint' = 'oncoprint',\n    customSampleOrder?: string[],\n    geneOrder?: string[]\n  ): ProcessedData {\n    // Check if the split field exists in metadata\n    if (!data.metadata.fields.includes(splitField)) {\n      console.warn(`Split field '${splitField}' not found in metadata. Ignoring split.`);\n      return data;\n    }\n\n    // Group samples by the split field value\n    const groupMap = new Map<string, string[]>();\n    \n    data.samples.forEach(sample => {\n      const value = data.metadata.data[sample]?.[splitField];\n      const groupKey = value?.toString() || 'Unknown';\n      \n      if (!groupMap.has(groupKey)) {\n        groupMap.set(groupKey, []);\n      }\n      groupMap.get(groupKey)!.push(sample);\n    });\n\n    // Sort groups by their names for consistent ordering\n    const sortedGroups = Array.from(groupMap.entries()).sort(([a], [b]) => a.localeCompare(b));\n\n    // Create SampleGroup objects with position information\n    const sampleGroups: SampleGroup[] = [];\n    let currentIndex = 0;\n\n    sortedGroups.forEach(([value, groupSamples]) => {\n      // Sort samples within each group using the specified sorting method\n      const sortedGroupSamples = this.sortSamplesWithinGroup(\n        groupSamples, \n        data, \n        sortMethod, \n        customSampleOrder,\n        geneOrder\n      );\n      \n      sampleGroups.push({\n        value,\n        samples: sortedGroupSamples,\n        count: sortedGroupSamples.length,\n        startIndex: currentIndex,\n        endIndex: currentIndex + sortedGroupSamples.length - 1\n      });\n\n      currentIndex += sortedGroupSamples.length;\n    });\n\n    // Create new sample order by concatenating all groups\n    const newSampleOrder: string[] = [];\n    sampleGroups.forEach(group => {\n      newSampleOrder.push(...group.samples);\n    });\n\n    return {\n      ...data,\n      samples: newSampleOrder,\n      sampleGroups\n    };\n  }\n\n  private static sortSamplesWithinGroup(\n    samples: string[], \n    data: ProcessedData,\n    sortMethod: 'mutation_load' | 'alphabetical' | 'custom' | 'oncoprint' = 'oncoprint',\n    customSampleOrder?: string[],\n    geneOrder?: string[]\n  ): string[] {\n    // Create a subset of data containing only the samples in this group\n    const groupData: ProcessedData = {\n      ...data,\n      samples: samples,\n      mutations: data.mutations.filter(m => samples.includes(m.sample)),\n      sampleCounts: Object.fromEntries(\n        samples.map(sample => [sample, data.sampleCounts[sample] || 0])\n      ),\n      metadata: {\n        ...data.metadata,\n        data: Object.fromEntries(\n          samples.map(sample => [sample, data.metadata.data[sample] || {}])\n        )\n      }\n    };\n\n    // Apply the specified sorting method within this group\n    switch (sortMethod) {\n      case 'mutation_load':\n        return this.sortSamplesByMutationLoad(groupData, true);\n      case 'alphabetical':\n        return [...samples].sort();\n      case 'custom':\n        if (customSampleOrder) {\n          // Filter custom order to only include samples in this group, maintaining order\n          const customFiltered = customSampleOrder.filter(s => samples.includes(s));\n          // Add any remaining samples in this group that weren't in the custom order\n          const remaining = samples.filter(s => !customSampleOrder.includes(s));\n          return [...customFiltered, ...remaining];\n        }\n        return samples;\n      case 'oncoprint':\n      default: {\n        // Get the most frequently mutated genes for this group for clustering\n        const topGenes = geneOrder || this.sortGenesByFrequency(groupData, true, Math.min(25, data.genes.length));\n        // Apply oncoprint clustering within this group\n        return this.sortSamplesForOncoprint(groupData, topGenes);\n      }\n    }\n  }\n\n  static getCoOccurrenceMatrix(data: ProcessedData): Record<string, Record<string, number>> {\n    const matrix: Record<string, Record<string, number>> = {};\n    \n    // Initialize matrix\n    data.genes.forEach(gene1 => {\n      matrix[gene1] = {};\n      data.genes.forEach(gene2 => {\n        matrix[gene1][gene2] = 0;\n      });\n    });\n\n    // Calculate co-occurrences\n    data.samples.forEach(sample => {\n      const sampleMutations = data.mutations\n        .filter(m => m.sample === sample)\n        .map(m => m.gene);\n      \n      // Count co-occurrences for this sample\n      for (let i = 0; i < sampleMutations.length; i++) {\n        for (let j = i; j < sampleMutations.length; j++) {\n          const gene1 = sampleMutations[i];\n          const gene2 = sampleMutations[j];\n          matrix[gene1][gene2]++;\n          if (gene1 !== gene2) {\n            matrix[gene2][gene1]++;\n          }\n        }\n      }\n    });\n\n    return matrix;\n  }\n}","import * as d3 from 'd3';\n\nexport const DEFAULT_VARIANT_COLORS = {\n  Missense_Mutation: \"#16a085\",      // Teal\n  Splice_Site: \"#27ae60\",            // Green\n  Frame_Shift_Del: \"#2980b9\",        // Blue\n  Frame_Shift_Ins: \"#c0392b\",        // Red\n  In_Frame_Del: \"#f39c12\",           // Orange\n  In_Frame_Ins: \"#8e44ad\",           // Purple\n  Nonsense_Mutation: \"#34495e\",      // Dark Gray\n  Multi_Hit: \"#95a5a6\",              // Gray\n  Translation_Start_Site: \"#e74c3c\", // Light Red\n  Nonstop_Mutation: \"#d35400\",       // Dark Orange\n  Default: \"#95a5a6\",                // Gray\n  Empty: \"#ecf0f1\"                   // Light Gray\n};\n\nexport class VariantColorManager {\n  private predefinedColors: Record<string, string>;\n  private dynamicColors: Record<string, string> = {};\n  private colorPalette: readonly string[];\n  private usedColors: Set<string> = new Set();\n\n  constructor(predefinedColors: Record<string, string> = DEFAULT_VARIANT_COLORS) {\n    this.predefinedColors = { ...predefinedColors };\n    this.colorPalette = [\n      ...d3.schemeCategory10,\n      ...d3.schemeSet3\n    ];\n    \n    // Mark predefined colors as used\n    Object.values(this.predefinedColors).forEach(color => {\n      this.usedColors.add(color);\n    });\n  }\n\n  getColor(variant: string): string {\n    // Return predefined color if available\n    if (this.predefinedColors[variant]) {\n      return this.predefinedColors[variant];\n    }\n\n    // Generate dynamic color if not already assigned\n    if (!this.dynamicColors[variant]) {\n      this.dynamicColors[variant] = this.generateUniqueColor();\n    }\n\n    return this.dynamicColors[variant];\n  }\n\n  getAllColors(): Record<string, string> {\n    return { ...this.predefinedColors, ...this.dynamicColors };\n  }\n\n  getKnownVariants(): string[] {\n    return Object.keys(this.predefinedColors).filter(v => v !== 'Default' && v !== 'Empty');\n  }\n\n  getDynamicVariants(): string[] {\n    return Object.keys(this.dynamicColors);\n  }\n\n  updateColor(variant: string, color: string): void {\n    if (this.predefinedColors[variant]) {\n      this.predefinedColors[variant] = color;\n    } else {\n      this.dynamicColors[variant] = color;\n    }\n    this.usedColors.add(color);\n  }\n\n  resetDynamicColors(): void {\n    // Remove dynamic colors from used colors set\n    Object.values(this.dynamicColors).forEach(color => {\n      this.usedColors.delete(color);\n    });\n    this.dynamicColors = {};\n  }\n\n  getColorLegend(variants: string[]): Array<{ variant: string; color: string; isKnown: boolean }> {\n    const knownVariants = new Set(this.getKnownVariants());\n    \n    return variants\n      .filter(v => v !== 'Empty' && v !== 'Default')\n      .map(variant => ({\n        variant,\n        color: this.getColor(variant),\n        isKnown: knownVariants.has(variant)\n      }))\n      .sort((a, b) => {\n        // Sort known variants first, then alphabetically\n        if (a.isKnown && !b.isKnown) return -1;\n        if (!a.isKnown && b.isKnown) return 1;\n        return a.variant.localeCompare(b.variant);\n      });\n  }\n\n  private generateUniqueColor(): string {\n    // Try colors from the palette first\n    for (const color of this.colorPalette) {\n      if (!this.usedColors.has(color)) {\n        this.usedColors.add(color);\n        return color;\n      }\n    }\n\n    // If all palette colors are used, generate a random color\n    let attempts = 0;\n    let color: string;\n    \n    do {\n      color = this.generateRandomColor();\n      attempts++;\n    } while (this.usedColors.has(color) && attempts < 100);\n\n    this.usedColors.add(color);\n    return color;\n  }\n\n  private generateRandomColor(): string {\n    // Generate a color with good contrast and saturation\n    const hue = Math.floor(Math.random() * 360);\n    const saturation = 60 + Math.floor(Math.random() * 30); // 60-90%\n    const lightness = 40 + Math.floor(Math.random() * 20);  // 40-60%\n    \n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  }\n\n  getVariantsByFrequency(variants: string[], counts: Record<string, number>): string[] {\n    return [...variants].sort((a, b) => {\n      const countA = counts[a] || 0;\n      const countB = counts[b] || 0;\n      return countB - countA;\n    });\n  }\n\n  static fromVariants(variants: string[], customColors?: Record<string, string>): VariantColorManager {\n    const manager = new VariantColorManager(customColors);\n    \n    // Pre-generate colors for all variants\n    variants.forEach(variant => {\n      manager.getColor(variant);\n    });\n\n    return manager;\n  }\n\n  exportColorMap(): Record<string, string> {\n    return {\n      ...this.predefinedColors,\n      ...this.dynamicColors\n    };\n  }\n\n  importColorMap(colorMap: Record<string, string>): void {\n    Object.entries(colorMap).forEach(([variant, color]) => {\n      if (this.predefinedColors[variant]) {\n        this.predefinedColors[variant] = color;\n      } else {\n        this.dynamicColors[variant] = color;\n      }\n      this.usedColors.add(color);\n    });\n  }\n}","export type EventCallback = (...args: any[]) => void;\n\nexport class EventEmitter {\n  private events: Record<string, EventCallback[]> = {};\n\n  on(event: string, callback: EventCallback): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event: string, callback?: EventCallback): void {\n    if (!this.events[event]) return;\n\n    if (!callback) {\n      delete this.events[event];\n      return;\n    }\n\n    this.events[event] = this.events[event].filter(cb => cb !== callback);\n    if (this.events[event].length === 0) {\n      delete this.events[event];\n    }\n  }\n\n  emit(event: string, ...args: any[]): void {\n    if (!this.events[event]) return;\n    \n    this.events[event].forEach(callback => {\n      try {\n        callback(...args);\n      } catch (error) {\n        console.error(`Error in event handler for '${event}':`, error);\n      }\n    });\n  }\n\n  once(event: string, callback: EventCallback): void {\n    const onceCallback = (...args: any[]) => {\n      callback(...args);\n      this.off(event, onceCallback);\n    };\n    this.on(event, onceCallback);\n  }\n\n  listenerCount(event: string): number {\n    return this.events[event]?.length || 0;\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      delete this.events[event];\n    } else {\n      this.events = {};\n    }\n  }\n}","import * as d3 from 'd3';\nimport { ProcessedData, ProcessedMutation, OncoprintConfig, MetadataTrackConfig } from '../types';\nimport { VariantColorManager, DEFAULT_VARIANT_COLORS } from '../core/VariantColorManager';\nimport { DataProcessor } from '../core/DataProcessor';\nimport { EventEmitter } from '../utils';\n\nexport interface RendererDimensions {\n  width: number;\n  height: number;\n  cellWidth: number;\n  cellHeight: number;\n  geneLabelWidth: number;\n  sampleLabelHeight: number;\n  metadataTrackHeight: number;\n  legendWidth: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\nexport class OncoprintRenderer extends EventEmitter {\n  private container: HTMLElement;\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined> | null = null;\n  private data: ProcessedData | null = null;\n  private config: OncoprintConfig;\n  private colorManager: VariantColorManager;\n  private dimensions: RendererDimensions;\n  private geneOrder: string[] = [];\n  private sampleOrder: string[] = [];\n\n  constructor(container: HTMLElement, config: OncoprintConfig = {}) {\n    super();\n    this.container = container;\n    this.config = this.getDefaultConfig(config);\n    this.colorManager = new VariantColorManager(this.config.variantColors);\n    this.dimensions = this.calculateDimensions();\n  }\n\n  setData(data: ProcessedData): void {\n    this.data = data;\n    this.updateColorManager();\n    this.updateOrdering();\n    this.emit('dataLoaded', data);\n  }\n\n  updateConfig(config: Partial<OncoprintConfig>): void {\n    this.config = { ...this.config, ...config };\n    if (config.variantColors) {\n      this.colorManager = new VariantColorManager(config.variantColors);\n      if (this.data) {\n        this.updateColorManager();\n      }\n    }\n    \n    // Update ordering if sort configuration changed\n    if (this.data && (config.sortGenes || config.sortSamples || config.customGeneOrder || config.splitBy)) {\n      this.updateOrdering();\n    }\n    \n    this.dimensions = this.calculateDimensions();\n  }\n\n  render(): void {\n    if (!this.data) {\n      throw new Error('No data available for rendering');\n    }\n\n    this.createSVG();\n    this.renderMetadataTracks();\n    this.renderGroupHeaders();\n    this.renderMainMatrix();\n    this.renderGeneLabels();\n    this.renderSampleLabels();\n    this.renderLegend();\n    this.setupInteractions();\n  }\n\n  resize(width?: number, height?: number): void {\n    if (width) this.dimensions.width = width;\n    if (height) this.dimensions.height = height;\n    this.dimensions = this.calculateDimensions();\n    this.render();\n  }\n\n  exportSVG(): string {\n    if (!this.svg) {\n      throw new Error('No SVG available for export');\n    }\n    return new XMLSerializer().serializeToString(this.svg.node()!);\n  }\n\n  exportPNG(options?: { \n    backgroundColor?: string; \n    cropToContent?: boolean; \n    padding?: number;\n    scale?: number;\n  }): Promise<Blob> {\n    const defaults = {\n      backgroundColor: 'white',\n      cropToContent: true,\n      padding: 10,\n      scale: 1\n    };\n    const opts = { ...defaults, ...options };\n\n    return new Promise((resolve, reject) => {\n      if (!this.data) {\n        reject(new Error('No data available for export'));\n        return;\n      }\n\n      // Create a temporary full-size SVG for export\n      const exportSVG = this.createFullSizeExportSVG();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n      const img = new Image();\n\n      img.onload = () => {\n        console.log(`Export SVG dimensions: ${img.width} x ${img.height}`);\n        \n        // For export, use the full image dimensions\n        let sourceX = 0, sourceY = 0, sourceWidth = img.width, sourceHeight = img.height;\n        \n        if (opts.cropToContent && opts.padding) {\n          // Add padding around the content\n          sourceX = Math.max(0, sourceX - opts.padding);\n          sourceY = Math.max(0, sourceY - opts.padding);\n          sourceWidth = Math.min(img.width - sourceX, sourceWidth + (2 * opts.padding));\n          sourceHeight = Math.min(img.height - sourceY, sourceHeight + (2 * opts.padding));\n        }\n        \n        // Apply scaling\n        const finalWidth = Math.round(sourceWidth * opts.scale);\n        const finalHeight = Math.round(sourceHeight * opts.scale);\n        \n        console.log(`Final export dimensions: ${finalWidth} x ${finalHeight} (scale: ${opts.scale})`);\n        \n        // Set canvas to final size\n        canvas.width = finalWidth;\n        canvas.height = finalHeight;\n        \n        // Fill with background color\n        if (opts.backgroundColor && opts.backgroundColor !== 'transparent') {\n          ctx.fillStyle = opts.backgroundColor;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        \n        // Draw the full image\n        ctx.drawImage(\n          img,\n          sourceX, sourceY, sourceWidth, sourceHeight,\n          0, 0, finalWidth, finalHeight\n        );\n        \n        canvas.toBlob((blob) => {\n          if (blob) {\n            console.log(`PNG export successful: ${blob.size} bytes`);\n            resolve(blob);\n          } else {\n            reject(new Error('Failed to create blob'));\n          }\n        }, 'image/png');\n      };\n\n      img.onerror = (error) => {\n        console.error('Image loading failed:', error);\n        reject(new Error('Failed to load SVG as image'));\n      };\n      \n      console.log('Starting PNG export with full-size SVG');\n      img.src = 'data:image/svg+xml;base64,' + btoa(exportSVG);\n    });\n  }\n\n  private createFullSizeExportSVG(): string {\n    // Save current dimensions and temporarily switch to full-size\n    const originalDimensions = { ...this.dimensions };\n    \n    // Calculate full-size dimensions for export\n    const fullSizeCellWidth = this.config.cellWidth || 10;\n    const fullSizeCellHeight = this.config.cellHeight || 20;\n    \n    const geneLabelWidth = this.config.geneLabels ? 120 : 0;\n    const marginLeft = 20;\n    const marginRight = 80;\n    const marginTop = 20;\n    const marginBottom = 80 + (this.config.sampleLabels ? 100 : 0);\n    \n    const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n      this.getTotalWidthWithGaps(fullSizeCellWidth) : \n      this.sampleOrder.length * fullSizeCellWidth;\n    \n    const metadataTracksHeight = this.getMetadataTracksHeight();\n    const matrixHeight = this.geneOrder.length * fullSizeCellHeight;\n    \n    let legendHeight = 0;\n    if (this.config.legend) {\n      legendHeight += 60;\n      const metadataFields = this.getActiveMetadataTracks();\n      if (metadataFields.length > 0) {\n        legendHeight += metadataFields.length * 25;\n      }\n    }\n    \n    const fullWidth = marginLeft + geneLabelWidth + matrixWidth + marginRight;\n    const fullHeight = marginTop + metadataTracksHeight + matrixHeight + \n                      (this.config.legend ? 30 + legendHeight : 0) + marginBottom;\n    \n    // Temporarily set full-size dimensions\n    this.dimensions = {\n      ...originalDimensions,\n      width: fullWidth,\n      height: fullHeight,\n      cellWidth: fullSizeCellWidth,\n      cellHeight: fullSizeCellHeight\n    };\n    \n    // Create temporary SVG element in memory\n    const tempContainer = document.createElement('div');\n    const tempSVG = d3.select(tempContainer)\n      .append('svg')\n      .attr('width', fullWidth)\n      .attr('height', fullHeight)\n      .style('font-family', 'Arial, sans-serif')\n      .style('font-size', '12px');\n    \n    // Store original SVG and temporarily switch\n    const originalSVG = this.svg;\n    this.svg = tempSVG;\n    \n    // Render all components to the temporary SVG\n    this.renderMetadataTracks();\n    this.renderGroupHeaders();\n    this.renderMainMatrix();\n    this.renderGeneLabels();\n    this.renderSampleLabels();\n    this.renderLegend();\n    \n    // Get the SVG string\n    const svgString = new XMLSerializer().serializeToString(tempSVG.node()!);\n    \n    // Restore original SVG and dimensions\n    this.svg = originalSVG;\n    this.dimensions = originalDimensions;\n    \n    return svgString;\n  }\n\n  private getSampleXPosition(sampleIndex: number): number {\n    if (!this.data?.sampleGroups || !this.config.splitBy) {\n      // No splitting - use normal positioning\n      return sampleIndex * this.dimensions.cellWidth;\n    }\n\n    const gapSize = this.config.splitBy.gapSize || 20;\n    let x = 0;\n    let currentIndex = 0;\n\n    // Find which group this sample belongs to and calculate position\n    for (const group of this.data.sampleGroups) {\n      if (sampleIndex >= currentIndex && sampleIndex <= currentIndex + group.count - 1) {\n        // Sample is in this group\n        const indexInGroup = sampleIndex - currentIndex;\n        return x + (indexInGroup * this.dimensions.cellWidth);\n      }\n      // Move to next group\n      x += group.count * this.dimensions.cellWidth + gapSize;\n      currentIndex += group.count;\n    }\n\n    // Fallback (shouldn't happen)\n    return sampleIndex * this.dimensions.cellWidth;\n  }\n\n  private getTotalWidthWithGaps(cellWidth?: number): number {\n    const actualCellWidth = cellWidth || this.dimensions.cellWidth;\n    \n    if (!this.data?.sampleGroups || !this.config.splitBy) {\n      return this.sampleOrder.length * actualCellWidth;\n    }\n\n    const gapSize = this.config.splitBy.gapSize || 20;\n    let totalWidth = 0;\n    const sampleGroups = this.data.sampleGroups;\n\n    sampleGroups.forEach((group, index) => {\n      totalWidth += group.count * actualCellWidth;\n      if (index < sampleGroups.length - 1) {\n        totalWidth += gapSize; // Add gap except after last group\n      }\n    });\n\n    return totalWidth;\n  }\n\n  private getContentBounds(): { x: number; y: number; width: number; height: number } {\n    if (!this.data || this.sampleOrder.length === 0 || this.geneOrder.length === 0) {\n      // Fallback to current SVG size if no data\n      return { \n        x: 0, \n        y: 0, \n        width: this.dimensions.width || 200, \n        height: this.dimensions.height || 100 \n      };\n    }\n\n    const padding = 15;\n\n    // For PNG export, use full-size dimensions (not scaled to fit container)\n    const fullSizeDimensions = this.calculateFullSizeDimensions();\n    \n    const includeGeneLabels = this.config.geneLabels ? 120 : 0; // Use fixed size for export\n    const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n      this.getTotalWidthWithGaps(fullSizeDimensions.cellWidth) : \n      this.sampleOrder.length * fullSizeDimensions.cellWidth;\n    const includeFrequencies = this.config.showPercentages ? 80 : 0;\n    const contentWidth = 20 + includeGeneLabels + matrixWidth + includeFrequencies + 80;\n\n    const metadataTracksHeight = this.getMetadataTracksHeight();\n    const matrixHeight = this.geneOrder.length * fullSizeDimensions.cellHeight;\n    \n    let legendHeight = 0;\n    if (this.config.legend) {\n      legendHeight += 60;\n      const metadataFields = this.getActiveMetadataTracks();\n      if (metadataFields.length > 0) {\n        legendHeight += metadataFields.length * 30;\n      }\n    }\n    \n    const totalContentHeight = 20 + metadataTracksHeight + matrixHeight + \n                              (this.config.legend ? 30 + legendHeight : 0) + 80;\n\n    const finalWidth = Math.max(contentWidth + (2 * padding), 400);\n    const finalHeight = Math.max(totalContentHeight + (2 * padding), 300);\n\n    return {\n      x: 0,\n      y: 0,\n      width: finalWidth,\n      height: finalHeight\n    };\n  }\n\n  private calculateFullSizeDimensions(): { cellWidth: number; cellHeight: number } {\n    // Return the original configured cell dimensions (not scaled)\n    return {\n      cellWidth: this.config.cellWidth || 10,\n      cellHeight: this.config.cellHeight || 20\n    };\n  }\n\n  private createSVG(): void {\n    // Remove existing SVG\n    d3.select(this.container).selectAll('svg').remove();\n\n    // Create new SVG with exact dimensions needed\n    this.svg = d3.select(this.container)\n      .append('svg')\n      .attr('width', this.dimensions.width)\n      .attr('height', this.dimensions.height)\n      .style('font-family', 'Arial, sans-serif')\n      .style('font-size', '12px')\n      .style('display', 'block');\n      \n    console.log(`Created SVG with dimensions: ${this.dimensions.width} x ${this.dimensions.height}`);\n    console.log(`Cell dimensions: ${this.dimensions.cellWidth} x ${this.dimensions.cellHeight}`);\n    console.log(`Container size: ${this.container.getBoundingClientRect().width} x ${this.container.getBoundingClientRect().height}`);\n    \n    // Log matrix dimensions for debugging\n    if (this.data) {\n      const matrixWidth = this.sampleOrder.length * this.dimensions.cellWidth;\n      const matrixHeight = this.geneOrder.length * this.dimensions.cellHeight;\n      console.log(`Matrix dimensions: ${matrixWidth} x ${matrixHeight} (${this.sampleOrder.length} samples x ${this.geneOrder.length} genes)`);\n    }\n  }\n\n  private renderMainMatrix(): void {\n    if (!this.svg || !this.data) return;\n\n    const matrixGroup = this.svg.append('g')\n      .attr('class', 'oncoprint-matrix')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    // Create mutation matrix\n    const mutationMatrix = this.createMutationMatrix();\n\n    // Render cells\n    this.geneOrder.forEach((gene, geneIndex) => {\n      this.sampleOrder.forEach((sample, sampleIndex) => {\n        const mutation = mutationMatrix[gene][sample];\n        const x = this.getSampleXPosition(sampleIndex) + 1;\n        const y = (this.geneOrder.length - 1 - geneIndex) * this.dimensions.cellHeight + 1;\n\n        if (!mutation) {\n          // Empty cell\n          matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', this.dimensions.cellHeight - 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', this.colorManager.getColor('Empty'))\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .style('cursor', 'pointer');\n        } else if (Array.isArray(mutation)) {\n          // Two mutations - split the cell\n          const mutation1 = mutation[0];\n          const mutation2 = mutation[1];\n          const color1 = this.colorManager.getColor(mutation1.variantType);\n          const color2 = this.colorManager.getColor(mutation2.variantType);\n          \n          // Top half\n          const cell1 = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', (this.dimensions.cellHeight - 2) / 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color1)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation1.variantType)\n            .style('cursor', 'pointer');\n          \n          // Create tooltip for first mutation\n          let tooltip1 = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation1.variantType}`;\n          if (mutation1.proteinChange) {\n            tooltip1 += `\\nProtein Change: ${mutation1.proteinChange}`;\n          }\n          cell1.append('title').text(tooltip1);\n          \n          // Bottom half\n          const cell2 = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y + (this.dimensions.cellHeight - 2) / 2)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', (this.dimensions.cellHeight - 2) / 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color2)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation2.variantType)\n            .style('cursor', 'pointer');\n          \n          // Create tooltip for second mutation\n          let tooltip2 = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation2.variantType}`;\n          if (mutation2.proteinChange) {\n            tooltip2 += `\\nProtein Change: ${mutation2.proteinChange}`;\n          }\n          cell2.append('title').text(tooltip2);\n        } else {\n          // Single mutation\n          const color = this.colorManager.getColor(mutation.variantType);\n          const cell = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', this.dimensions.cellHeight - 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation.variantType)\n            .style('cursor', 'pointer');\n\n          // Create tooltip for single mutation\n          let tooltip = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation.variantType}`;\n          if (mutation.proteinChange) {\n            tooltip += `\\nProtein Change: ${mutation.proteinChange}`;\n          }\n          cell.append('title').text(tooltip);\n        }\n      });\n    });\n  }\n\n  private renderGeneLabels(): void {\n    if (!this.svg || !this.data || !this.config.geneLabels) return;\n\n    // Gene names on the left\n    const labelGroup = this.svg.append('g')\n      .attr('class', 'gene-labels')\n      .attr('transform', `translate(${this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    // Frequency labels on the right\n    const frequencyGroup = this.svg.append('g')\n      .attr('class', 'gene-frequencies')\n      .attr('transform', `translate(${this.dimensions.marginLeft + this.dimensions.geneLabelWidth + this.getTotalWidthWithGaps() + 10}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    this.geneOrder.forEach((gene, index) => {\n      const y = (this.geneOrder.length - 1 - index) * this.dimensions.cellHeight + this.dimensions.cellHeight / 2;\n      // Calculate frequency based on percentage calculation base (cohort or MAF-based)\n      const mutatedSampleCount = new Set(\n        this.data!.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      ).size;\n      const frequency = mutatedSampleCount / this.data!.percentageCalculationBase;\n      \n      // Gene name on the left\n      labelGroup.append('text')\n        .attr('x', this.dimensions.geneLabelWidth - 5)\n        .attr('y', y)\n        .attr('dy', '0.35em')\n        .attr('text-anchor', 'end')\n        .style('font-size', Math.min(12, this.dimensions.cellHeight * 0.8) + 'px')\n        .style('cursor', 'pointer')\n        .text(gene)\n        .on('click', () => {\n          this.emit('geneClick', { gene });\n        });\n\n      // Frequency on the right\n      if (this.config.showPercentages) {\n        frequencyGroup.append('text')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', '0.35em')\n          .attr('text-anchor', 'start')\n          .style('font-size', '10px')\n          .style('fill', '#666')\n          .text(`${Math.round(frequency * 100)}%`);\n      }\n    });\n  }\n\n  private renderSampleLabels(): void {\n    if (!this.svg || !this.data || !this.config.sampleLabels) return;\n\n    const labelGroup = this.svg.append('g')\n      .attr('class', 'sample-labels')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.height - this.dimensions.marginBottom})`);\n\n    this.sampleOrder.forEach((sample, index) => {\n      const x = index * this.dimensions.cellWidth + this.dimensions.cellWidth / 2;\n      \n      labelGroup.append('text')\n        .attr('x', x)\n        .attr('y', -5)\n        .attr('text-anchor', 'end')\n        .attr('transform', `rotate(-45, ${x}, -5)`)\n        .style('font-size', Math.min(10, this.dimensions.cellWidth * 0.8) + 'px')\n        .style('cursor', 'pointer')\n        .text(sample);\n    });\n  }\n\n  private renderMetadataTracks(): void {\n    if (!this.svg || !this.data) return;\n\n    // Get active tracks - support both legacy and new configuration\n    const activeTracks = this.getActiveMetadataTracks();\n    if (!activeTracks.length) return;\n\n    const tracksGroup = this.svg.append('g')\n      .attr('class', 'metadata-tracks')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop})`);\n\n    let currentY = 0;\n    activeTracks.forEach((trackConfig) => {\n      if (!this.data!.metadata.fields.includes(trackConfig.field)) return;\n\n      const trackHeight = trackConfig.height || this.dimensions.metadataTrackHeight;\n      const trackSpacing = this.config.metadata?.trackSpacing || 3;\n      \n      this.renderSingleMetadataTrack(tracksGroup, trackConfig, currentY);\n      \n      // Add track label if enabled\n      if (trackConfig.showLabels !== false && this.config.metadata?.showLabels !== false) {\n        const label = trackConfig.label || trackConfig.field;\n        this.svg!.append('text')\n          .attr('x', this.dimensions.marginLeft + this.dimensions.geneLabelWidth - 5)\n          .attr('y', this.dimensions.marginTop + currentY + trackHeight / 2)\n          .attr('dy', '0.35em')\n          .attr('text-anchor', 'end')\n          .style('font-size', '10px')\n          .text(label);\n      }\n\n      currentY += trackHeight + trackSpacing;\n    });\n  }\n\n  private getActiveMetadataTracks(): MetadataTrackConfig[] {\n    // Support legacy configuration\n    if (this.config.metadataFields?.length && !this.config.metadata?.tracks) {\n      return this.config.metadataFields.map(field => ({\n        field,\n        visible: true,\n        type: 'auto' as const,\n        height: this.config.metadataTrackHeight\n      }));\n    }\n\n    // Use new enhanced configuration\n    if (this.config.metadata?.tracks) {\n      return this.config.metadata.tracks\n        .filter(track => track.visible !== false)\n        .sort((a, b) => (a.order || 0) - (b.order || 0));\n    }\n\n    return [];\n  }\n\n  private renderGroupHeaders(): void {\n    if (!this.svg || !this.data?.sampleGroups || !this.config.splitBy) return;\n\n    const showGroupHeaders = this.config.splitBy.showGroupHeaders !== false;\n    const showGroupCounts = this.config.splitBy.showGroupCounts !== false;\n\n    if (!showGroupHeaders && !showGroupCounts) return;\n\n    const headerGroup = this.svg.append('g')\n      .attr('class', 'group-headers')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight() - 25})`);\n\n    const sampleGroups = this.data.sampleGroups;\n    \n    sampleGroups.forEach((group, groupIndex) => {\n      const groupStartX = this.getSampleXPosition(group.startIndex);\n      const groupWidth = group.count * this.dimensions.cellWidth;\n      const groupCenterX = groupStartX + groupWidth / 2;\n\n      // Add group header text\n      if (showGroupHeaders) {\n        headerGroup.append('text')\n          .attr('x', groupCenterX)\n          .attr('y', 0)\n          .attr('text-anchor', 'middle')\n          .attr('dy', '0.35em')\n          .style('font-size', '12px')\n          .style('font-weight', 'bold')\n          .style('fill', '#333')\n          .text(group.value);\n      }\n\n      // Add sample count\n      if (showGroupCounts) {\n        headerGroup.append('text')\n          .attr('x', groupCenterX)\n          .attr('y', showGroupHeaders ? 15 : 0)\n          .attr('text-anchor', 'middle')\n          .attr('dy', '0.35em')\n          .style('font-size', '10px')\n          .style('fill', '#666')\n          .text(`(n=${group.count})`);\n      }\n\n      // Add separator line between groups (except for the last group)\n      if (groupIndex < sampleGroups.length - 1) {\n        const gapSize = this.config.splitBy!.gapSize || 20;\n        const lineX = groupStartX + groupWidth + gapSize / 2;\n        \n        headerGroup.append('line')\n          .attr('x1', lineX)\n          .attr('y1', -10)\n          .attr('x2', lineX)\n          .attr('y2', 20)\n          .attr('stroke', '#ddd')\n          .attr('stroke-width', 1)\n          .attr('stroke-dasharray', '2,2');\n      }\n    });\n  }\n\n  private renderSingleMetadataTrack(container: any, trackConfig: MetadataTrackConfig, y: number): void {\n    const field = trackConfig.field;\n    const trackHeight = trackConfig.height || this.dimensions.metadataTrackHeight;\n    \n    // Determine field type\n    const detectedType = this.data!.metadata.fieldTypes[field];\n    const fieldType = trackConfig.type === 'auto' || !trackConfig.type ? detectedType : trackConfig.type;\n    \n    // Create color scale\n    const colorScale = this.createColorScale(field, fieldType, trackConfig);\n\n    this.sampleOrder.forEach((sample, sampleIndex) => {\n      const value = this.data!.metadata.data[sample]?.[field];\n      const x = this.getSampleXPosition(sampleIndex);\n\n      let color = '#f0f0f0'; // Default for missing values\n      let tooltip = '';\n\n      if (value !== undefined) {\n        if (trackConfig.customRenderer) {\n          const result = trackConfig.customRenderer(value, sample);\n          color = result.color;\n          tooltip = result.tooltip || String(value);\n        } else {\n          if (fieldType === 'numerical' && typeof value === 'number') {\n            color = colorScale(value);\n          } else {\n            color = colorScale(String(value));\n          }\n          tooltip = String(value);\n        }\n      }\n\n      const rect = container.append('rect')\n        .attr('x', x + 1)\n        .attr('y', y + 1)\n        .attr('width', this.dimensions.cellWidth - 2)\n        .attr('height', trackHeight - 2)\n        .attr('rx', 3)\n        .attr('ry', 3)\n        .attr('fill', color)\n        .attr('stroke', 'none')\n        .attr('data-field', field)\n        .attr('data-sample', sample)\n        .attr('data-value', value !== undefined ? String(value) : '');\n\n      // Add tooltip if enabled\n      if (trackConfig.tooltips !== false && this.config.tooltips !== false) {\n        rect.append('title').text(`${trackConfig.label || field}: ${tooltip}`);\n      }\n    });\n  }\n\n  private createColorScale(field: string, fieldType: string, trackConfig: MetadataTrackConfig): any {\n    if (fieldType === 'numerical') {\n      // Get all available numerical values for this field (not just displayed samples)\n      const allValues = Object.values(this.data!.metadata.data)\n        .map(sampleData => sampleData?.[field])\n        .filter(v => v !== undefined && typeof v === 'number') as number[];\n      \n      // Calculate domain from all data, not just displayed samples\n      let extent = trackConfig.domain;\n      if (!extent && allValues.length > 0) {\n        extent = d3.extent(allValues) as [number, number];\n        // Handle edge case where all values are the same\n        if (extent[0] === extent[1]) {\n          extent = [extent[0] - 1, extent[1] + 1];\n        }\n      }\n      \n      // Fallback if no valid domain can be calculated\n      if (!extent || extent[0] === undefined || extent[1] === undefined) {\n        extent = [0, 1];\n      }\n      \n      // Handle different color scales\n      let interpolator;\n      switch (trackConfig.colorScale) {\n        case 'viridis': interpolator = d3.interpolateViridis; break;\n        case 'plasma': interpolator = d3.interpolatePlasma; break;\n        case 'reds': interpolator = d3.interpolateReds; break;\n        case 'greens': interpolator = d3.interpolateGreens; break;\n        default: interpolator = d3.interpolateBlues; break;\n      }\n      \n      return d3.scaleSequential(interpolator).domain(extent);\n    } else {\n      // Get all unique categorical values for this field (not just displayed samples)\n      const allValues = Array.from(new Set(\n        Object.values(this.data!.metadata.data)\n          .map(sampleData => sampleData?.[field])\n          .filter(v => v !== undefined)\n          .map(v => String(v))\n      ));\n\n      if (trackConfig.colors) {\n        if (Array.isArray(trackConfig.colors)) {\n          return d3.scaleOrdinal(trackConfig.colors).domain(allValues);\n        } else if (typeof trackConfig.colors === 'string') {\n          // Handle string-based color scheme names (e.g., 'category10', 'category20')\n          let colorScheme;\n          switch (trackConfig.colors) {\n            case 'category10': colorScheme = d3.schemeCategory10; break;\n            case 'category20': colorScheme = d3.schemeCategory10.concat(d3.schemeCategory10); break;\n            case 'pastel1': colorScheme = d3.schemePastel1; break;\n            case 'set3': colorScheme = d3.schemeSet3; break;\n            default: colorScheme = d3.schemeCategory10; break;\n          }\n          return d3.scaleOrdinal(colorScheme).domain(allValues);\n        } else {\n          // Record-based color mapping\n          return (value: string) => (trackConfig.colors as Record<string, string>)[value] || '#bdc3c7';\n        }\n      }\n      \n      // Default categorical color scheme - use more colors for better distinction\n      const defaultScheme = allValues.length <= 10 ? d3.schemeCategory10 : \n                           allValues.length <= 20 ? d3.schemeCategory10.concat(d3.schemePastel1) :\n                           d3.schemeCategory10.concat(d3.schemePastel1).concat(d3.schemeSet3);\n      \n      return d3.scaleOrdinal(defaultScheme).domain(allValues);\n    }\n  }\n\n  private renderLegend(): void {\n    if (!this.svg || !this.data || !this.config.legend) return;\n\n    const variants = Array.from(new Set(this.data.mutations.map(m => m.variantType)));\n    const legend = this.colorManager.getColorLegend(variants);\n\n    // Calculate legend position at bottom\n    const matrixHeight = this.geneOrder.length * this.dimensions.cellHeight;\n    const legendY = this.dimensions.marginTop + this.getMetadataTracksHeight() + matrixHeight + 30;\n    \n    const legendGroup = this.svg.append('g')\n      .attr('class', 'legend')\n      .attr('transform', `translate(${this.dimensions.marginLeft + this.dimensions.geneLabelWidth}, ${legendY})`);\n\n    legendGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 15)\n      .style('font-weight', 'bold')\n      .style('font-size', '12px')\n      .text('Mutation Types');\n\n    // Render legend items horizontally\n    let currentX = 0;\n    legend.forEach((item) => {\n      const itemGroup = legendGroup.append('g')\n        .attr('transform', `translate(${currentX}, 25)`);\n\n      itemGroup.append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 12)\n        .attr('height', 12)\n        .attr('fill', item.color);\n\n      const text = itemGroup.append('text')\n        .attr('x', 18)\n        .attr('y', 6)\n        .attr('dy', '0.35em')\n        .style('font-size', '10px')\n        .text(item.variant);\n\n      if (!item.isKnown) {\n        text.append('tspan')\n          .style('font-size', '9px')\n          .style('fill', '#666')\n          .text(' (auto)');\n      }\n\n      // Calculate width for next item\n      const textWidth = text.node()?.getBBox().width || 0;\n      currentX += textWidth + 30 + 18; // rect + text + spacing\n    });\n\n    // Render metadata legends below mutation legend\n    this.renderMetadataLegends(legendGroup, 60);\n  }\n\n  private renderMetadataLegends(parentGroup: any, yOffset: number): void {\n    if (!this.data) return;\n\n    const activeTracks = this.getActiveMetadataTracks();\n    if (!activeTracks.length) return;\n\n    let currentX = 0;\n    const trackSpacing = 200; // Horizontal spacing between tracks\n\n    activeTracks.forEach((trackConfig) => {\n      const field = trackConfig.field;\n      if (!this.data!.metadata.fields.includes(field)) return;\n\n      const detectedType = this.data!.metadata.fieldTypes[field];\n      const fieldType = trackConfig.type === 'auto' || !trackConfig.type ? detectedType : trackConfig.type;\n      const label = trackConfig.label || field;\n\n      // Add track title\n      parentGroup.append('text')\n        .attr('x', currentX)\n        .attr('y', yOffset + 15)\n        .style('font-weight', 'bold')\n        .style('font-size', '11px')\n        .text(label);\n\n      if (fieldType === 'categorical') {\n        const width = this.renderCategoricalMetadataLegend(parentGroup, trackConfig, currentX, yOffset + 25);\n        currentX += Math.max(width, trackSpacing);\n      } else {\n        this.renderNumericalMetadataLegend(parentGroup, trackConfig, currentX, yOffset + 25);\n        currentX += trackSpacing;\n      }\n    });\n  }\n\n  private renderCategoricalMetadataLegend(parentGroup: any, trackConfig: MetadataTrackConfig, startX: number, y: number): number {\n    const field = trackConfig.field;\n    \n    // Only get values that are actually present in the displayed samples\n    const displayedSamples = this.sampleOrder;\n    const values = Array.from(new Set(\n      displayedSamples\n        .map(sample => this.data!.metadata.data[sample]?.[field])\n        .filter(v => v !== undefined)\n        .map(v => String(v))\n    ));\n\n    if (!values.length) return 0;\n\n    const colorScale = this.createColorScale(field, 'categorical', trackConfig);\n    \n    // Arrange in multiple columns for efficient space usage\n    const maxWidth = 180; // Maximum width per track\n    const itemSpacing = 5;\n    let currentX = 0;\n    let currentY = 0;\n    let maxUsedWidth = 0;\n\n    values.forEach((value) => {\n      const color = colorScale(value);\n      \n      const itemGroup = parentGroup.append('g')\n        .attr('transform', `translate(${startX + currentX}, ${y + currentY})`);\n\n      itemGroup.append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 8)\n        .attr('height', 8)\n        .attr('rx', 1)\n        .attr('ry', 1)\n        .attr('fill', color);\n\n      const text = itemGroup.append('text')\n        .attr('x', 12)\n        .attr('y', 4)\n        .attr('dy', '0.35em')\n        .style('font-size', '9px')\n        .text(value);\n\n      const textWidth = text.node()?.getBBox().width || 0;\n      const itemWidth = textWidth + 12 + itemSpacing;\n      \n      // Check if we need to wrap to next row\n      if (currentX + itemWidth > maxWidth && currentX > 0) {\n        currentY += 18;\n        currentX = 0;\n        // Re-position this item\n        itemGroup.attr('transform', `translate(${startX + currentX}, ${y + currentY})`);\n      }\n      \n      currentX += itemWidth;\n      maxUsedWidth = Math.max(maxUsedWidth, currentX);\n    });\n\n    return Math.min(maxUsedWidth, maxWidth);\n  }\n\n  private renderNumericalMetadataLegend(parentGroup: any, trackConfig: MetadataTrackConfig, startX: number, y: number): void {\n    const field = trackConfig.field;\n    \n    // Only get values that are actually present in the displayed samples\n    const displayedSamples = this.sampleOrder;\n    const values = displayedSamples\n      .map(sample => this.data!.metadata.data[sample]?.[field])\n      .filter(v => v !== undefined && typeof v === 'number') as number[];\n    \n    if (!values.length) return;\n\n    const extent = trackConfig.domain || (d3.extent(values) as [number, number]);\n    const colorScale = this.createColorScale(field, 'numerical', trackConfig);\n\n    // Create gradient\n    const gradientId = `gradient-${field}`;\n    const defs = parentGroup.select('defs').empty() ? \n      parentGroup.append('defs') : parentGroup.select('defs');\n    \n    const gradient = defs.append('linearGradient')\n      .attr('id', gradientId)\n      .attr('x1', '0%')\n      .attr('x2', '100%');\n\n    // Add gradient stops\n    for (let i = 0; i <= 10; i++) {\n      const value = extent[0] + (extent[1] - extent[0]) * (i / 10);\n      gradient.append('stop')\n        .attr('offset', `${i * 10}%`)\n        .attr('stop-color', colorScale(value));\n    }\n\n    // Render gradient bar\n    parentGroup.append('rect')\n      .attr('x', startX)\n      .attr('y', y)\n      .attr('width', 80)\n      .attr('height', 10)\n      .attr('rx', 2)\n      .attr('ry', 2)\n      .attr('fill', `url(#${gradientId})`);\n\n    // Add min/max labels\n    parentGroup.append('text')\n      .attr('x', startX)\n      .attr('y', y + 22)\n      .style('font-size', '8px')\n      .text(extent[0].toFixed(1));\n\n    parentGroup.append('text')\n      .attr('x', startX + 80)\n      .attr('y', y + 22)\n      .attr('text-anchor', 'end')\n      .style('font-size', '8px')\n      .text(extent[1].toFixed(1));\n  }\n\n  private setupInteractions(): void {\n    if (!this.svg || !this.data) return;\n\n    // Cell interactions\n    this.svg.selectAll('.oncoprint-matrix rect')\n      .on('click', (event) => {\n        const element = event.target as SVGRectElement;\n        const gene = element.getAttribute('data-gene')!;\n        const sample = element.getAttribute('data-sample')!;\n        const variant = element.getAttribute('data-variant');\n        \n        this.emit('cellClick', { gene, sample, variant });\n      })\n      .on('mouseenter', () => {\n        if (!this.config.tooltips) return;\n        // Tooltip implementation would go here\n      });\n\n    // Gene label interactions\n    this.svg.selectAll('.gene-labels text')\n      .on('click', (event) => {\n        const gene = (event.target as SVGTextElement).textContent!;\n        this.emit('geneClick', { gene });\n      });\n\n    // Sample label interactions\n    this.svg.selectAll('.sample-labels text')\n      .on('click', (event) => {\n        const sample = (event.target as SVGTextElement).textContent!;\n        this.emit('sampleClick', { sample });\n      });\n  }\n\n  private updateColorManager(): void {\n    if (!this.data) return;\n    \n    const variants = Array.from(new Set(this.data.mutations.map(m => m.variantType)));\n    variants.forEach(variant => {\n      this.colorManager.getColor(variant);\n    });\n  }\n\n  private updateOrdering(): void {\n    if (!this.data) return;\n\n    // Update gene order - default to top 25 most frequently mutated genes\n    switch (this.config.sortGenes) {\n      case 'frequency':\n        this.geneOrder = DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n        break;\n      case 'alphabetical': {\n        const limitedGenes = DataProcessor.sortGenesByFrequency(this.data, true, 25);\n        this.geneOrder = limitedGenes.sort();\n        break;\n      }\n      case 'custom':\n        this.geneOrder = this.config.customGeneOrder?.filter(g => this.data!.genes.includes(g)) || \n                        DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n        break;\n      default:\n        this.geneOrder = DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n    }\n\n    // Update sample order - apply split with current sort settings if enabled\n    if (this.config.splitBy?.field) {\n      // Re-apply split with current sort configuration to ensure proper ordering within groups\n      this.data = DataProcessor.applySplitBy(\n        this.data, \n        this.config.splitBy.field,\n        this.config.sortSamples,\n        this.config.customSampleOrder,\n        this.geneOrder\n      );\n      this.sampleOrder = [...this.data.samples];\n    } else {\n      // Normal sorting when no split is active\n      switch (this.config.sortSamples) {\n        case 'mutation_load':\n          this.sampleOrder = DataProcessor.sortSamplesByMutationLoad(this.data, true);\n          break;\n        case 'alphabetical':\n          this.sampleOrder = [...this.data.samples].sort();\n          break;\n        case 'custom':\n          this.sampleOrder = this.config.customSampleOrder?.filter(s => this.data!.samples.includes(s)) || this.data.samples;\n          break;\n        case 'oncoprint':\n          this.sampleOrder = DataProcessor.sortSamplesForOncoprint(this.data, this.geneOrder);\n          break;\n        default:\n          // Default to oncoprint clustering for best visual effect\n          this.sampleOrder = DataProcessor.sortSamplesForOncoprint(this.data, this.geneOrder).reverse();\n      }\n    }\n  }\n\n  private createMutationMatrix(): Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> {\n    return DataProcessor.getMutationMatrix(this.data!);\n  }\n\n  private calculateDimensions(): RendererDimensions {\n    const containerRect = this.container.getBoundingClientRect();\n    const availableWidth = containerRect.width || 1000;\n    const availableHeight = containerRect.height || 700;\n\n    // If we have data, calculate what dimensions we need and scale to fit if necessary\n    if (this.data && this.geneOrder.length > 0 && this.sampleOrder.length > 0) {\n      let cellWidth = this.config.cellWidth || 10;\n      let cellHeight = this.config.cellHeight || 20;\n      \n      const geneLabelWidth = this.config.geneLabels ? 120 : 0;\n      const marginLeft = 20;\n      const marginRight = 80; // Space for frequency labels on right\n      const marginTop = 20;\n      \n      // Calculate matrix width including gaps for split visualization\n      const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n        this.getTotalWidthWithGaps() : \n        this.sampleOrder.length * cellWidth;\n      \n      // Calculate metadata tracks height\n      const metadataTracksHeight = this.getMetadataTracksHeight();\n      \n      // Calculate matrix height\n      const matrixHeight = this.geneOrder.length * cellHeight;\n      \n      // Calculate legend height\n      let legendHeight = 0;\n      if (this.config.legend) {\n        legendHeight += 60; // Base legend height\n        const metadataFields = this.getActiveMetadataTracks();\n        if (metadataFields.length > 0) {\n          legendHeight += metadataFields.length * 25;\n        }\n      }\n      \n      // Calculate required dimensions\n      const marginBottom = 80 + (this.config.sampleLabels ? 100 : 0);\n      const requiredWidth = marginLeft + geneLabelWidth + matrixWidth + marginRight;\n      const requiredHeight = marginTop + metadataTracksHeight + matrixHeight + \n                            (this.config.legend ? 30 + legendHeight : 0) + marginBottom;\n      \n      // Calculate scaling factors to fit content in available space\n      const widthScale = availableWidth / requiredWidth;\n      const heightScale = availableHeight / requiredHeight;\n      const scale = Math.min(widthScale, heightScale, 1); // Don't scale up, only down\n      \n      // Apply scaling to cell dimensions if we need to scale down\n      if (scale < 1) {\n        cellWidth = Math.max(1, cellWidth * scale); // Minimum cell width of 1px\n        cellHeight = Math.max(1, cellHeight * scale); // Minimum cell height of 1px\n        \n        console.log(`Scaling visualization by ${scale.toFixed(2)} to fit container`);\n        console.log(`Container: ${availableWidth} x ${availableHeight}, Required: ${requiredWidth} x ${requiredHeight}`);\n        console.log(`Original cell size: ${this.config.cellWidth || 10} x ${this.config.cellHeight || 20}`);\n        console.log(`Scaled cell size: ${cellWidth} x ${cellHeight}`);\n        console.log(`Sample count: ${this.sampleOrder.length}, Gene count: ${this.geneOrder.length}`);\n      }\n      \n      // Recalculate with scaled cell dimensions\n      const scaledMatrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n        this.getTotalWidthWithGaps(cellWidth) : \n        this.sampleOrder.length * cellWidth;\n      const scaledMatrixHeight = this.geneOrder.length * cellHeight;\n      \n      const finalWidth = Math.min(availableWidth, marginLeft + geneLabelWidth + scaledMatrixWidth + marginRight);\n      const finalHeight = Math.min(availableHeight, marginTop + metadataTracksHeight + scaledMatrixHeight + \n                                  (this.config.legend ? 30 + legendHeight : 0) + marginBottom);\n      \n      return {\n        width: finalWidth,\n        height: finalHeight,\n        cellWidth,\n        cellHeight,\n        geneLabelWidth: this.config.geneLabels ? 120 : 0,\n        sampleLabelHeight: this.config.sampleLabels ? 100 : 0,\n        metadataTrackHeight: this.config.metadataTrackHeight || 15,\n        legendWidth: 0,\n        marginTop: 20,\n        marginRight: 80,\n        marginBottom: 80 + (this.config.sampleLabels ? 100 : 0),\n        marginLeft: 20\n      };\n    }\n\n    return {\n      width: availableWidth,\n      height: availableHeight,\n      cellWidth: this.config.cellWidth || 10,\n      cellHeight: this.config.cellHeight || 20,\n      geneLabelWidth: this.config.geneLabels ? 120 : 0,\n      sampleLabelHeight: this.config.sampleLabels ? 100 : 0,\n      metadataTrackHeight: this.config.metadataTrackHeight || 15,\n      legendWidth: 0,\n      marginTop: 20,\n      marginRight: 80,\n      marginBottom: 80 + (this.config.sampleLabels ? 100 : 0),\n      marginLeft: 20\n    };\n  }\n\n  private getMetadataTracksHeight(): number {\n    const activeTracks = this.getActiveMetadataTracks();\n    let totalHeight = 0;\n    const trackSpacing = this.config.metadata?.trackSpacing || 3;\n    \n    // Add height for metadata tracks\n    activeTracks.forEach((track, index) => {\n      const trackHeight = track.height || this.dimensions.metadataTrackHeight;\n      totalHeight += trackHeight;\n      if (index < activeTracks.length - 1) {\n        totalHeight += trackSpacing;\n      }\n    });\n    \n    // Add extra gap between metadata and main matrix\n    if (activeTracks.length > 0) {\n      totalHeight += 10;\n    }\n    \n    // Add height for group headers if split is enabled\n    if (this.data?.sampleGroups && this.config.splitBy) {\n      const showGroupHeaders = this.config.splitBy.showGroupHeaders !== false;\n      const showGroupCounts = this.config.splitBy.showGroupCounts !== false;\n      \n      if (showGroupHeaders || showGroupCounts) {\n        let headerHeight = 0;\n        if (showGroupHeaders) headerHeight += 15;\n        if (showGroupCounts) headerHeight += 15;\n        totalHeight += headerHeight + 10; // Add some padding\n      }\n    }\n    \n    return totalHeight;\n  }\n\n  private getDefaultConfig(config: OncoprintConfig): OncoprintConfig {\n    return {\n      geneList: config.geneList || [],\n      sampleList: config.sampleList || [],\n      cellWidth: config.cellWidth || 10,\n      cellHeight: config.cellHeight || 20,\n      geneLabels: config.geneLabels !== false,\n      sampleLabels: config.sampleLabels || false,\n      variantColors: config.variantColors || DEFAULT_VARIANT_COLORS,\n      metadataFields: config.metadataFields || [],\n      metadataTrackHeight: config.metadataTrackHeight || 15,\n      sortGenes: config.sortGenes || 'frequency',\n      sortSamples: config.sortSamples || 'oncoprint', // Default to oncoprint clustering\n      customGeneOrder: config.customGeneOrder || [],\n      customSampleOrder: config.customSampleOrder || [],\n      tooltips: config.tooltips !== false,\n      exportable: config.exportable !== false,\n      resizable: config.resizable !== false,\n      showPercentages: config.showPercentages !== false, // Show percentages by default\n      showTotals: config.showTotals || false,\n      legend: config.legend !== false,\n      metadata: config.metadata || { tracks: [] }\n    };\n  }\n\n  // Runtime API methods for metadata track management\n  public addMetadataTrack(trackConfig: MetadataTrackConfig): void {\n    if (!this.config.metadata) {\n      this.config.metadata = { tracks: [] };\n    }\n    if (!this.config.metadata.tracks) {\n      this.config.metadata.tracks = [];\n    }\n    \n    // Remove existing track with same field if any\n    this.config.metadata.tracks = this.config.metadata.tracks.filter(t => t.field !== trackConfig.field);\n    \n    // Add new track\n    this.config.metadata.tracks.push({ visible: true, ...trackConfig });\n    \n    this.render();\n  }\n\n  public removeMetadataTrack(fieldName: string): void {\n    if (this.config.metadata?.tracks) {\n      this.config.metadata.tracks = this.config.metadata.tracks.filter(t => t.field !== fieldName);\n      this.render();\n    }\n  }\n\n  public updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void {\n    if (this.config.metadata?.tracks) {\n      const trackIndex = this.config.metadata.tracks.findIndex(t => t.field === fieldName);\n      if (trackIndex >= 0) {\n        this.config.metadata.tracks[trackIndex] = { \n          ...this.config.metadata.tracks[trackIndex], \n          ...updates \n        };\n        this.render();\n      }\n    }\n  }\n\n  public showMetadataTrack(fieldName: string): void {\n    this.updateMetadataTrack(fieldName, { visible: true });\n  }\n\n  public hideMetadataTrack(fieldName: string): void {\n    this.updateMetadataTrack(fieldName, { visible: false });\n  }\n\n  public reorderMetadataTracks(fieldOrder: string[]): void {\n    if (this.config.metadata?.tracks) {\n      const orderedTracks: MetadataTrackConfig[] = [];\n      \n      fieldOrder.forEach((field, index) => {\n        const track = this.config.metadata!.tracks!.find(t => t.field === field);\n        if (track) {\n          orderedTracks.push({ ...track, order: index });\n        }\n      });\n      \n      // Add any tracks not in fieldOrder at the end\n      this.config.metadata.tracks.forEach(track => {\n        if (!fieldOrder.includes(track.field)) {\n          orderedTracks.push({ ...track, order: fieldOrder.length });\n        }\n      });\n      \n      this.config.metadata.tracks = orderedTracks;\n      this.render();\n    }\n  }\n\n  public getMetadataConfig(): MetadataTrackConfig[] {\n    return this.config.metadata?.tracks || [];\n  }\n\n  public setMetadataConfig(tracks: MetadataTrackConfig[]): void {\n    if (!this.config.metadata) {\n      this.config.metadata = {};\n    }\n    this.config.metadata.tracks = tracks;\n    this.render();\n  }\n\n  public getAvailableMetadataFields(): string[] {\n    return this.data?.metadata.fields || [];\n  }\n}","import { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  OncoprintConfig,\n  ValidationResult,\n  MetadataTrackConfig,\n  CohortInfo\n} from '../types';\nimport { MafParser, MetadataParser } from '../parsers';\nimport { DataProcessor } from './DataProcessor';\nimport { OncoprintRenderer } from '../renderers';\nimport { EventEmitter } from '../utils';\n\nexport class OncoprintVisualizer extends EventEmitter {\n  private container: HTMLElement;\n  private renderer: OncoprintRenderer;\n  private processedData: ProcessedData | null = null;\n  private rawMafData: MafData[] = [];\n  private rawMetadataData: MetadataRow[] = [];\n  private cohortInfo?: CohortInfo;\n  private config: OncoprintConfig;\n\n  constructor(container: HTMLElement, config: OncoprintConfig = {}) {\n    super();\n    this.container = container;\n    this.config = config;\n    this.renderer = new OncoprintRenderer(container, config);\n    this.setupRendererEvents();\n  }\n\n  // Data loading methods\n  async loadMafFile(file: File): Promise<ValidationResult> {\n    try {\n      const mafData = await MafParser.parseFromFile(file);\n      const validation = MafParser.validateMafData(mafData);\n      \n      if (validation.isValid) {\n        await this.loadMafData(mafData);\n      }\n      \n      return validation;\n    } catch (error) {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'invalid_format',\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }],\n        warnings: []\n      };\n      this.emit('error', error);\n      return validationResult;\n    }\n  }\n\n  async loadMafData(data: MafData[], cohortInfo?: CohortInfo): Promise<void> {\n    try {\n      this.rawMafData = [...data]; // Store original data\n      this.cohortInfo = cohortInfo; // Store cohort information\n      this.reprocessData();\n      this.emit('dataLoaded', this.processedData);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  async loadMetadataFile(file: File): Promise<ValidationResult> {\n    try {\n      const metadataData = await MetadataParser.parseFromFile(file);\n      const mafSamples = this.processedData?.samples;\n      const validation = MetadataParser.validateMetadata(metadataData, mafSamples);\n      \n      if (validation.isValid) {\n        await this.loadMetadataData(metadataData);\n      }\n      \n      return validation;\n    } catch (error) {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'invalid_format',\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }],\n        warnings: []\n      };\n      this.emit('error', error);\n      return validationResult;\n    }\n  }\n\n  async loadMetadataData(data: MetadataRow[]): Promise<void> {\n    try {\n      if (this.rawMafData.length === 0) {\n        throw new Error('MAF data must be loaded before metadata');\n      }\n\n      this.rawMetadataData = [...data]; // Store original metadata\n      this.reprocessData();\n      this.emit('dataLoaded', this.processedData);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // Rendering methods\n  render(): void {\n    if (!this.processedData) {\n      throw new Error('No data available for rendering. Load MAF data first.');\n    }\n    this.renderer.render();\n  }\n\n  update(config?: Partial<OncoprintConfig>): void {\n    if (config) {\n      const oldConfig = { ...this.config };\n      this.config = { ...this.config, ...config };\n      this.renderer.updateConfig(config);\n      \n      // Check if we need to reprocess data due to filtering or split changes\n      const splitChanged = 'splitBy' in config && (\n        JSON.stringify(config.splitBy) !== JSON.stringify(oldConfig.splitBy)\n      );\n      const needsReprocessing = this.rawMafData.length > 0 && (\n        config.geneList !== undefined ||\n        config.sampleList !== undefined ||\n        splitChanged\n      );\n      \n      if (needsReprocessing) {\n        this.reprocessData();\n      }\n    }\n    this.render();\n  }\n\n  resize(width?: number, height?: number): void {\n    this.renderer.resize(width, height);\n  }\n\n  // Export methods\n  exportSVG(): string {\n    return this.renderer.exportSVG();\n  }\n\n  async exportPNG(options?: { \n    backgroundColor?: string; \n    cropToContent?: boolean; \n    padding?: number;\n    scale?: number;\n  }): Promise<Blob> {\n    return this.renderer.exportPNG(options);\n  }\n\n  exportData(): ProcessedData {\n    if (!this.processedData) {\n      throw new Error('No data available for export');\n    }\n    return { ...this.processedData }; // Return a copy\n  }\n\n  // Selection methods\n  getSelectedGenes(): string[] {\n    return this.config.geneList || [];\n  }\n\n  getSelectedSamples(): string[] {\n    return this.config.sampleList || [];\n  }\n\n  setGeneSelection(genes: string[]): void {\n    this.update({ geneList: genes });\n  }\n\n  setSampleSelection(samples: string[]): void {\n    this.update({ sampleList: samples });\n  }\n\n  // Utility methods\n  getAvailableGenes(): string[] {\n    return this.processedData?.genes || [];\n  }\n\n  getAllGenes(): string[] {\n    // Return all genes from the original data, not just the filtered ones\n    if (this.rawMafData.length === 0) return [];\n    const allGenes = [...new Set(this.rawMafData.map(row => row.Hugo_Symbol))];\n    return allGenes.sort();\n  }\n\n  getAvailableSamples(): string[] {\n    return this.processedData?.samples || [];\n  }\n\n  getAllSamples(): string[] {\n    // Return all samples from the cohort if provided, otherwise from MAF data\n    if (this.cohortInfo?.samples) {\n      return this.cohortInfo.samples.slice();\n    }\n    // Fall back to MAF-based samples\n    if (this.rawMafData.length === 0) return [];\n    const allSamples = [...new Set(this.rawMafData.map(row => row.Tumor_Sample_Barcode))];\n    return allSamples.sort();\n  }\n\n  getPercentageCalculationBase(): number {\n    // Return the base used for percentage calculations\n    return this.processedData?.percentageCalculationBase || 0;\n  }\n\n  getCohortInfo(): { totalSamples: number; hasCohortInfo: boolean; missingSamples?: string[] } {\n    if (this.cohortInfo) {\n      return {\n        totalSamples: this.cohortInfo.totalSamples || this.cohortInfo.samples?.length || 0,\n        hasCohortInfo: true,\n        missingSamples: this.processedData?.cohortInfo?.missingSamples\n      };\n    }\n    return {\n      totalSamples: this.getAllSamples().length,\n      hasCohortInfo: false\n    };\n  }\n\n  getMetadataFields(): string[] {\n    return this.processedData?.metadata.fields || [];\n  }\n\n  getVariantTypes(): string[] {\n    if (!this.processedData) return [];\n    return Array.from(new Set(this.processedData.mutations.map(m => m.variantType))).sort();\n  }\n\n  getMutationStats(): {\n    totalMutations: number;\n    totalGenes: number;\n    totalSamples: number;\n    averageMutationsPerSample: number;\n    averageMutationsPerGene: number;\n  } {\n    if (!this.processedData) {\n      return {\n        totalMutations: 0,\n        totalGenes: 0,\n        totalSamples: 0,\n        averageMutationsPerSample: 0,\n        averageMutationsPerGene: 0\n      };\n    }\n\n    const { mutations, genes, samples } = this.processedData;\n    \n    return {\n      totalMutations: mutations.length,\n      totalGenes: genes.length,\n      totalSamples: samples.length,\n      averageMutationsPerSample: mutations.length / samples.length,\n      averageMutationsPerGene: mutations.length / genes.length\n    };\n  }\n\n  // Configuration methods\n  setConfig(config: OncoprintConfig): void {\n    this.config = config;\n    this.renderer.updateConfig(config);\n  }\n\n  getConfig(): OncoprintConfig {\n    return { ...this.config };\n  }\n\n  // Sorting methods\n  sortGenesByFrequency(descending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedGenes = DataProcessor.sortGenesByFrequency(this.processedData, descending);\n    this.update({ \n      sortGenes: 'custom',\n      customGeneOrder: sortedGenes \n    });\n  }\n\n  sortSamplesByMutationLoad(descending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedSamples = DataProcessor.sortSamplesByMutationLoad(this.processedData, descending);\n    this.update({ \n      sortSamples: 'custom',\n      customSampleOrder: sortedSamples \n    });\n  }\n\n  sortSamplesByMetadata(field: string, ascending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedSamples = DataProcessor.sortSamplesByMetadata(this.processedData, field, ascending);\n    this.update({ \n      sortSamples: 'custom',\n      customSampleOrder: sortedSamples \n    });\n  }\n\n  // Filter methods\n  filterByMutationFrequency(minFrequency: number, maxFrequency: number = 1): void {\n    if (!this.processedData) return;\n    \n    const frequencies = DataProcessor.calculateMutationFrequencies(this.processedData);\n    const filteredGenes = this.processedData.genes.filter(gene => {\n      const freq = frequencies[gene];\n      return freq >= minFrequency && freq <= maxFrequency;\n    });\n    \n    this.update({ geneList: filteredGenes });\n  }\n\n  filterByMutationCount(minCount: number, maxCount?: number): void {\n    if (!this.processedData) return;\n    \n    const filteredGenes = this.processedData.genes.filter(gene => {\n      const count = this.processedData!.geneCounts[gene];\n      return count >= minCount && (maxCount === undefined || count <= maxCount);\n    });\n    \n    this.update({ geneList: filteredGenes });\n  }\n\n  // Private methods\n  private setupRendererEvents(): void {\n    this.renderer.on('cellClick', (data) => this.emit('cellClick', data));\n    this.renderer.on('geneClick', (data) => this.emit('geneClick', data));\n    this.renderer.on('sampleClick', (data) => this.emit('sampleClick', data));\n    this.renderer.on('dataLoaded', (data) => this.emit('dataLoaded', data));\n    this.renderer.on('error', (error) => this.emit('error', error));\n  }\n\n  private applyDataFilters(data: MafData[]): MafData[] {\n    let filteredData = [...data];\n\n    // Filter by genes if specified\n    if (this.config.geneList && this.config.geneList.length > 0) {\n      filteredData = filteredData.filter(row => \n        this.config.geneList!.includes(row.Hugo_Symbol)\n      );\n    }\n\n    // Filter by samples if specified\n    if (this.config.sampleList && this.config.sampleList.length > 0) {\n      filteredData = filteredData.filter(row => \n        this.config.sampleList!.includes(row.Tumor_Sample_Barcode)\n      );\n    }\n\n    return filteredData;\n  }\n\n  private reprocessData(): void {\n    if (this.rawMafData.length === 0) {\n      throw new Error('No MAF data available for reprocessing');\n    }\n\n    const filteredData = this.applyDataFilters(this.rawMafData);\n    const metadataToUse = this.rawMetadataData.length > 0 ? this.rawMetadataData : undefined;\n    // Pass cohort information for percentage calculation and missing sample handling\n    this.processedData = DataProcessor.processData(filteredData, metadataToUse, this.cohortInfo);\n    \n    // Apply split grouping if configured\n    if (this.config.splitBy?.field) {\n      this.processedData = DataProcessor.applySplitBy(\n        this.processedData, \n        this.config.splitBy.field,\n        this.config.sortSamples,\n        this.config.customSampleOrder,\n        undefined // geneOrder will be determined later in updateOrdering\n      );\n    }\n    \n    this.renderer.setData(this.processedData);\n  }\n\n  private reconstructMafData(): MafData[] {\n    if (!this.processedData) return [];\n    \n    return this.processedData.mutations.map(mutation => ({\n      Hugo_Symbol: mutation.gene,\n      Tumor_Sample_Barcode: mutation.sample,\n      Variant_Classification: mutation.variantType,\n      Protein_Change: mutation.proteinChange,\n      Chromosome: mutation.chromosome,\n      Start_Position: mutation.startPosition,\n      End_Position: mutation.endPosition\n    }));\n  }\n\n  // Metadata track management methods\n  public addMetadataTrack(trackConfig: MetadataTrackConfig): void {\n    this.renderer.addMetadataTrack(trackConfig);\n  }\n\n  public removeMetadataTrack(fieldName: string): void {\n    this.renderer.removeMetadataTrack(fieldName);\n  }\n\n  public updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void {\n    this.renderer.updateMetadataTrack(fieldName, updates);\n  }\n\n  public showMetadataTrack(fieldName: string): void {\n    this.renderer.showMetadataTrack(fieldName);\n  }\n\n  public hideMetadataTrack(fieldName: string): void {\n    this.renderer.hideMetadataTrack(fieldName);\n  }\n\n  public reorderMetadataTracks(fieldOrder: string[]): void {\n    this.renderer.reorderMetadataTracks(fieldOrder);\n  }\n\n  public getMetadataConfig(): MetadataTrackConfig[] {\n    return this.renderer.getMetadataConfig();\n  }\n\n  public setMetadataConfig(tracks: MetadataTrackConfig[]): void {\n    this.renderer.setMetadataConfig(tracks);\n  }\n\n  public getAvailableMetadataFields(): string[] {\n    return this.renderer.getAvailableMetadataFields();\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.removeAllListeners();\n    this.renderer.removeAllListeners();\n    \n    // Clear container\n    while (this.container.firstChild) {\n      this.container.removeChild(this.container.firstChild);\n    }\n  }\n}"],"names":["d3"],"mappings":"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"}