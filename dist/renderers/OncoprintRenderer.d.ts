import { ProcessedData, OncoprintConfig, MetadataTrackConfig } from '../types';
import { EventEmitter } from '../utils';
export interface RendererDimensions {
    width: number;
    height: number;
    cellWidth: number;
    cellHeight: number;
    geneLabelWidth: number;
    sampleLabelHeight: number;
    metadataTrackHeight: number;
    legendWidth: number;
    marginTop: number;
    marginRight: number;
    marginBottom: number;
    marginLeft: number;
}
export declare class OncoprintRenderer extends EventEmitter {
    private container;
    private svg;
    private data;
    private config;
    private colorManager;
    private dimensions;
    private geneOrder;
    private sampleOrder;
    constructor(container: HTMLElement, config?: OncoprintConfig);
    setData(data: ProcessedData): void;
    updateConfig(config: Partial<OncoprintConfig>): void;
    render(): void;
    resize(width?: number, height?: number): void;
    exportSVG(): string;
    exportPNG(options?: {
        backgroundColor?: string;
        cropToContent?: boolean;
        padding?: number;
        scale?: number;
    }): Promise<Blob>;
    private createFullSizeExportSVG;
    private getSampleXPosition;
    private getTotalWidthWithGaps;
    private getContentBounds;
    private calculateFullSizeDimensions;
    private createSVG;
    private renderMainMatrix;
    private renderGeneLabels;
    private renderSampleLabels;
    private renderMetadataTracks;
    private getActiveMetadataTracks;
    private renderGroupHeaders;
    private renderSingleMetadataTrack;
    private createColorScale;
    private renderLegend;
    private renderMetadataLegends;
    private renderCategoricalMetadataLegend;
    private renderNumericalMetadataLegend;
    private setupInteractions;
    private updateColorManager;
    private updateOrdering;
    private createMutationMatrix;
    private calculateDimensions;
    private getMetadataTracksHeight;
    private getDefaultConfig;
    addMetadataTrack(trackConfig: MetadataTrackConfig): void;
    removeMetadataTrack(fieldName: string): void;
    updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void;
    showMetadataTrack(fieldName: string): void;
    hideMetadataTrack(fieldName: string): void;
    reorderMetadataTracks(fieldOrder: string[]): void;
    getMetadataConfig(): MetadataTrackConfig[];
    setMetadataConfig(tracks: MetadataTrackConfig[]): void;
    getAvailableMetadataFields(): string[];
}
