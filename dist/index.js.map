{"version":3,"file":"index.js","sources":["../src/parsers/MafParser.ts","../src/parsers/MetadataParser.ts","../src/core/DataProcessor.ts","../src/core/VariantColorManager.ts","../src/utils/EventEmitter.ts","../src/renderers/OncoprintRenderer.ts","../src/core/OncoprintVisualizer.ts","../src/components/Oncoprint.tsx","../src/components/hooks/useOncoprint.ts"],"sourcesContent":["import { MafData, ValidationResult, ValidationError, ValidationWarning } from '../types';\n\nexport class MafParser {\n  private static readonly REQUIRED_COLUMNS = [\n    'Hugo_Symbol',\n    'Tumor_Sample_Barcode',\n    'Variant_Classification'\n  ];\n\n  private static readonly OPTIONAL_COLUMNS = [\n    'Protein_Change',\n    'Chromosome',\n    'Start_Position',\n    'End_Position'\n  ];\n\n  static async parseFromFile(file: File): Promise<MafData[]> {\n    const content = await this.readFileContent(file);\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static parseFromString(content: string, delimiter: string = '\\t'): MafData[] {\n    const lines = content.trim().split('\\n');\n    if (lines.length === 0) {\n      throw new Error('File is empty');\n    }\n\n    const headers = lines[0].split(delimiter).map(h => h.trim());\n    const data: MafData[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(delimiter);\n      if (values.length !== headers.length) {\n        console.warn(`Line ${i + 1} has ${values.length} columns but expected ${headers.length}`);\n        continue;\n      }\n\n      const row: any = {};\n      headers.forEach((header, index) => {\n        const value = values[index]?.trim();\n        if (value && value !== '') {\n          if (header === 'Start_Position' || header === 'End_Position') {\n            const numValue = parseInt(value, 10);\n            if (!isNaN(numValue)) {\n              row[header] = numValue;\n            }\n          } else {\n            row[header] = value;\n          }\n        }\n      });\n\n      if (row.Hugo_Symbol && row.Tumor_Sample_Barcode && row.Variant_Classification) {\n        data.push(row as MafData);\n      }\n    }\n\n    return data;\n  }\n\n  static async parseFromUrl(url: string): Promise<MafData[]> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch MAF file from ${url}: ${response.statusText}`);\n    }\n    const content = await response.text();\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static validateMafData(data: MafData[]): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    if (data.length === 0) {\n      errors.push({\n        type: 'empty_file',\n        message: 'No valid MAF data found'\n      });\n      return { isValid: false, errors, warnings };\n    }\n\n    // Check for required columns\n    const firstRow = data[0];\n    this.REQUIRED_COLUMNS.forEach(column => {\n      if (!(column in firstRow)) {\n        errors.push({\n          type: 'missing_column',\n          message: `Required column '${column}' is missing`,\n          column\n        });\n      }\n    });\n\n    // Check data quality\n    const variantTypes = new Set<string>();\n    const genes = new Set<string>();\n    const samples = new Set<string>();\n\n    data.forEach((row, index) => {\n      if (!row.Hugo_Symbol) {\n        warnings.push({\n          type: 'data_quality',\n          message: `Missing gene symbol at row ${index + 1}`,\n          line: index + 1\n        });\n      } else {\n        genes.add(row.Hugo_Symbol);\n      }\n\n      if (!row.Tumor_Sample_Barcode) {\n        warnings.push({\n          type: 'data_quality',\n          message: `Missing sample barcode at row ${index + 1}`,\n          line: index + 1\n        });\n      } else {\n        samples.add(row.Tumor_Sample_Barcode);\n      }\n\n      if (row.Variant_Classification) {\n        variantTypes.add(row.Variant_Classification);\n      }\n    });\n\n    // Warn about unknown variant types\n    const knownVariants = new Set([\n      'Missense_Mutation', 'Splice_Site', 'Frame_Shift_Del', 'Frame_Shift_Ins',\n      'In_Frame_Del', 'In_Frame_Ins', 'Nonsense_Mutation', 'Multi_Hit',\n      'Translation_Start_Site', 'Nonstop_Mutation'\n    ]);\n\n    variantTypes.forEach(variant => {\n      if (!knownVariants.has(variant)) {\n        warnings.push({\n          type: 'unknown_variant',\n          message: `Unknown variant classification: ${variant}`\n        });\n      }\n    });\n\n    console.log(`Parsed ${data.length} mutations across ${genes.size} genes and ${samples.size} samples`);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private static async readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  }\n\n  private static detectDelimiter(content: string): string {\n    const firstLine = content.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    \n    return tabCount > commaCount ? '\\t' : ',';\n  }\n}","import { MetadataRow, ValidationResult, ValidationError, ValidationWarning } from '../types';\n\nexport type FieldTypeMap = Record<string, 'categorical' | 'numerical'>;\n\nexport class MetadataParser {\n  static async parseFromFile(file: File): Promise<MetadataRow[]> {\n    const content = await this.readFileContent(file);\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static parseFromString(content: string, delimiter: string = '\\t'): MetadataRow[] {\n    const lines = content.trim().split('\\n');\n    if (lines.length === 0) {\n      throw new Error('File is empty');\n    }\n\n    const headers = lines[0].split(delimiter).map(h => h.trim());\n    const data: MetadataRow[] = [];\n\n    // Check if Tumor_Sample_Barcode column exists\n    if (!headers.includes('Tumor_Sample_Barcode')) {\n      throw new Error('Metadata file must contain \"Tumor_Sample_Barcode\" column');\n    }\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(delimiter);\n      if (values.length !== headers.length) {\n        console.warn(`Line ${i + 1} has ${values.length} columns but expected ${headers.length}`);\n        continue;\n      }\n\n      const row: any = {};\n      headers.forEach((header, index) => {\n        const value = values[index]?.trim();\n        if (value && value !== '') {\n          // Try to parse as number\n          const numValue = parseFloat(value);\n          if (!isNaN(numValue) && isFinite(numValue)) {\n            row[header] = numValue;\n          } else {\n            row[header] = value;\n          }\n        }\n      });\n\n      if (row.Tumor_Sample_Barcode) {\n        data.push(row as MetadataRow);\n      }\n    }\n\n    return data;\n  }\n\n  static async parseFromUrl(url: string): Promise<MetadataRow[]> {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch metadata file from ${url}: ${response.statusText}`);\n    }\n    const content = await response.text();\n    return this.parseFromString(content, this.detectDelimiter(content));\n  }\n\n  static detectFieldTypes(data: MetadataRow[]): FieldTypeMap {\n    if (data.length === 0) return {};\n\n    const fieldTypes: FieldTypeMap = {};\n    const fields = Object.keys(data[0]);\n\n    fields.forEach(field => {\n      if (field === 'Tumor_Sample_Barcode') {\n        fieldTypes[field] = 'categorical';\n        return;\n      }\n\n      const values = data.map(row => row[field]).filter(v => v !== undefined && v !== null);\n      const numericValues = values.filter(v => typeof v === 'number');\n      \n      // If more than 80% of values are numeric and we have enough unique values, treat as numerical\n      const isNumeric = numericValues.length / values.length > 0.8;\n      const uniqueValues = new Set(values);\n      \n      // Categorical if fewer than 20 unique values or if most values are strings\n      if (uniqueValues.size < 20 || !isNumeric) {\n        fieldTypes[field] = 'categorical';\n      } else {\n        fieldTypes[field] = 'numerical';\n      }\n    });\n\n    return fieldTypes;\n  }\n\n  static validateMetadata(data: MetadataRow[], mafSamples?: string[]): ValidationResult {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationWarning[] = [];\n\n    if (data.length === 0) {\n      errors.push({\n        type: 'empty_file',\n        message: 'No valid metadata found'\n      });\n      return { isValid: false, errors, warnings };\n    }\n\n    // Check for required sample barcode column\n    const firstRow = data[0];\n    if (!('Tumor_Sample_Barcode' in firstRow)) {\n      errors.push({\n        type: 'missing_column',\n        message: 'Required column \"Tumor_Sample_Barcode\" is missing',\n        column: 'Tumor_Sample_Barcode'\n      });\n    }\n\n    // If MAF samples are provided, check for overlap\n    if (mafSamples && mafSamples.length > 0) {\n      const metadataSamples = new Set(data.map(row => row.Tumor_Sample_Barcode));\n      const mafSampleSet = new Set(mafSamples);\n      \n      const overlap = mafSamples.filter(sample => metadataSamples.has(sample));\n      const overlapPercentage = overlap.length / mafSamples.length;\n\n      if (overlapPercentage < 0.5) {\n        warnings.push({\n          type: 'missing_metadata',\n          message: `Only ${Math.round(overlapPercentage * 100)}% of MAF samples have metadata`\n        });\n      }\n\n      const uniqueToMetadata = Array.from(metadataSamples).filter(sample => !mafSampleSet.has(sample));\n      if (uniqueToMetadata.length > 0) {\n        warnings.push({\n          type: 'missing_metadata',\n          message: `${uniqueToMetadata.length} samples in metadata not found in MAF data`\n        });\n      }\n    }\n\n    console.log(`Parsed metadata for ${data.length} samples`);\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  private static async readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  }\n\n  private static detectDelimiter(content: string): string {\n    const firstLine = content.split('\\n')[0];\n    const tabCount = (firstLine.match(/\\t/g) || []).length;\n    const commaCount = (firstLine.match(/,/g) || []).length;\n    \n    return tabCount > commaCount ? '\\t' : ',';\n  }\n}","import { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  ProcessedMutation, \n  ProcessedMetadata,\n  CohortInfo,\n  SampleGroup\n} from '../types';\nimport { MetadataParser, FieldTypeMap } from '../parsers';\n\nexport class DataProcessor {\n  static processData(maf: MafData[], metadata?: MetadataRow[], cohortInfo?: CohortInfo): ProcessedData {\n    // Extract unique genes and samples\n    const genes = Array.from(new Set(maf.map(row => row.Hugo_Symbol))).sort();\n    const mafSamples = Array.from(new Set(maf.map(row => row.Tumor_Sample_Barcode))).sort();\n    \n    // Determine sample list and percentage calculation base\n    let samples: string[];\n    let percentageCalculationBase: number;\n    let processedCohortInfo: ProcessedData['cohortInfo'];\n    \n    if (cohortInfo) {\n      if (cohortInfo.samples) {\n        // Full cohort sample list provided\n        samples = cohortInfo.samples.slice().sort();\n        percentageCalculationBase = cohortInfo.samples.length;\n        const missingSamples = cohortInfo.samples.filter(s => !mafSamples.includes(s));\n        processedCohortInfo = {\n          totalSamples: cohortInfo.samples.length,\n          providedSamples: cohortInfo.samples,\n          missingSamples: missingSamples\n        };\n      } else if (cohortInfo.totalSamples) {\n        // Only total count provided - use MAF samples for visualization but cohort count for percentages\n        samples = mafSamples;\n        percentageCalculationBase = cohortInfo.totalSamples;\n        processedCohortInfo = {\n          totalSamples: cohortInfo.totalSamples,\n          providedSamples: undefined,\n          missingSamples: []\n        };\n      } else {\n        // Invalid cohort info - fall back to MAF-based\n        samples = mafSamples;\n        percentageCalculationBase = mafSamples.length;\n      }\n    } else {\n      // Default: MAF-based calculation\n      samples = mafSamples;\n      percentageCalculationBase = mafSamples.length;\n    }\n\n    // Process mutations\n    const mutations: ProcessedMutation[] = maf.map(row => ({\n      gene: row.Hugo_Symbol,\n      sample: row.Tumor_Sample_Barcode,\n      variantType: row.Variant_Classification,\n      proteinChange: row.Protein_Change,\n      chromosome: row.Chromosome,\n      startPosition: row.Start_Position,\n      endPosition: row.End_Position\n    }));\n\n    // Calculate gene mutation counts\n    const geneCounts: Record<string, number> = {};\n    genes.forEach(gene => {\n      geneCounts[gene] = mutations.filter(m => m.gene === gene).length;\n    });\n\n    // Calculate sample mutation counts\n    const sampleCounts: Record<string, number> = {};\n    samples.forEach(sample => {\n      sampleCounts[sample] = mutations.filter(m => m.sample === sample).length;\n    });\n\n    // Process metadata\n    let processedMetadata: ProcessedMetadata = {\n      fields: [],\n      data: {},\n      fieldTypes: {}\n    };\n\n    if (metadata && metadata.length > 0) {\n      const fieldTypes = MetadataParser.detectFieldTypes(metadata);\n      const fields = Object.keys(fieldTypes).filter(f => f !== 'Tumor_Sample_Barcode');\n      \n      const metadataData: Record<string, Record<string, string | number>> = {};\n      metadata.forEach(row => {\n        if (samples.includes(row.Tumor_Sample_Barcode)) {\n          metadataData[row.Tumor_Sample_Barcode] = { ...row };\n          delete metadataData[row.Tumor_Sample_Barcode].Tumor_Sample_Barcode;\n        }\n      });\n\n      processedMetadata = {\n        fields,\n        data: metadataData,\n        fieldTypes\n      };\n    }\n\n    return {\n      genes,\n      samples,\n      mutations,\n      geneCounts,\n      sampleCounts,\n      metadata: processedMetadata,\n      percentageCalculationBase,\n      cohortInfo: processedCohortInfo\n      // sampleGroups will be added by DataProcessor.applySplitBy() if needed\n    };\n  }\n\n  static filterByGenes(data: ProcessedData, genes: string[]): ProcessedData {\n    const filteredGenes = data.genes.filter(gene => genes.includes(gene));\n    const filteredMutations = data.mutations.filter(m => genes.includes(m.gene));\n    \n    const geneCounts: Record<string, number> = {};\n    filteredGenes.forEach(gene => {\n      geneCounts[gene] = filteredMutations.filter(m => m.gene === gene).length;\n    });\n\n    return {\n      ...data,\n      genes: filteredGenes,\n      mutations: filteredMutations,\n      geneCounts\n    };\n  }\n\n  static filterBySamples(data: ProcessedData, samples: string[]): ProcessedData {\n    const filteredSamples = data.samples.filter(sample => samples.includes(sample));\n    const filteredMutations = data.mutations.filter(m => samples.includes(m.sample));\n    \n    const sampleCounts: Record<string, number> = {};\n    filteredSamples.forEach(sample => {\n      sampleCounts[sample] = filteredMutations.filter(m => m.sample === sample).length;\n    });\n\n    // Filter metadata\n    const filteredMetadata = { ...data.metadata };\n    const newMetadataData: Record<string, Record<string, string | number>> = {};\n    filteredSamples.forEach(sample => {\n      if (data.metadata.data[sample]) {\n        newMetadataData[sample] = data.metadata.data[sample];\n      }\n    });\n    filteredMetadata.data = newMetadataData;\n\n    return {\n      ...data,\n      samples: filteredSamples,\n      mutations: filteredMutations,\n      sampleCounts,\n      metadata: filteredMetadata\n    };\n  }\n\n  static sortGenesByFrequency(data: ProcessedData, descending: boolean = true, maxGenes?: number): string[] {\n    // Calculate unique sample counts per gene (not total mutation counts)\n    const geneFrequencies: Record<string, number> = {};\n    data.genes.forEach(gene => {\n      const uniqueSamples = new Set(\n        data.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      );\n      geneFrequencies[gene] = uniqueSamples.size;\n    });\n\n    let sortedGenes = [...data.genes].sort((a, b) => {\n      const freqA = geneFrequencies[a] || 0;\n      const freqB = geneFrequencies[b] || 0;\n      return descending ? freqB - freqA : freqA - freqB;\n    });\n\n    // Limit to top N genes if specified\n    if (maxGenes && maxGenes > 0) {\n      sortedGenes = sortedGenes.slice(0, maxGenes);\n    }\n\n    return sortedGenes;\n  }\n\n  static sortSamplesByMutationLoad(data: ProcessedData, descending: boolean = true): string[] {\n    return [...data.samples].sort((a, b) => {\n      const countA = data.sampleCounts[a] || 0;\n      const countB = data.sampleCounts[b] || 0;\n      return descending ? countB - countA : countA - countB;\n    });\n  }\n\n  static sortSamplesForOncoprint(data: ProcessedData, sortedGenes: string[]): string[] {\n    // Iterative reordering algorithm for oncoprint clustering\n    let orderedSamples = [...data.samples];\n\n    // Create mutation lookup for efficiency\n    const geneMutationInfo: Record<string, Record<string, boolean>> = {};\n    sortedGenes.forEach(gene => {\n      geneMutationInfo[gene] = {};\n      data.mutations\n        .filter(m => m.gene === gene)\n        .forEach(m => {\n          geneMutationInfo[gene][m.sample] = true;\n        });\n    });\n\n    // For each gene (in sorted order), reorder samples\n    for (const gene of sortedGenes) {\n      const mutatedSamples: string[] = [];\n      const unmutatedSamples: string[] = [];\n\n      orderedSamples.forEach(sample => {\n        if (geneMutationInfo[gene][sample]) {\n          mutatedSamples.push(sample);\n        } else {\n          unmutatedSamples.push(sample);\n        }\n      });\n\n      // Reorder: mutated first, then unmutated\n      orderedSamples = [...mutatedSamples, ...unmutatedSamples];\n    }\n\n    return orderedSamples;\n  }\n\n  static sortSamplesByMetadata(\n    data: ProcessedData, \n    field: string, \n    ascending: boolean = true\n  ): string[] {\n    if (!data.metadata.fields.includes(field)) {\n      console.warn(`Metadata field '${field}' not found`);\n      return data.samples;\n    }\n\n    return [...data.samples].sort((a, b) => {\n      const valueA = data.metadata.data[a]?.[field];\n      const valueB = data.metadata.data[b]?.[field];\n\n      if (valueA === undefined && valueB === undefined) return 0;\n      if (valueA === undefined) return 1;\n      if (valueB === undefined) return -1;\n\n      if (typeof valueA === 'number' && typeof valueB === 'number') {\n        return ascending ? valueA - valueB : valueB - valueA;\n      }\n\n      const strA = String(valueA).toLowerCase();\n      const strB = String(valueB).toLowerCase();\n      \n      if (ascending) {\n        return strA < strB ? -1 : strA > strB ? 1 : 0;\n      } else {\n        return strA > strB ? -1 : strA < strB ? 1 : 0;\n      }\n    });\n  }\n\n  static getMutationMatrix(data: ProcessedData): Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> {\n    const matrix: Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> = {};\n    \n    // Initialize empty matrix\n    data.genes.forEach(gene => {\n      matrix[gene] = {};\n      data.samples.forEach(sample => {\n        matrix[gene][sample] = null;\n      });\n    });\n\n    // Group mutations by gene-sample pair\n    const mutationGroups: Record<string, Record<string, ProcessedMutation[]>> = {};\n    data.mutations.forEach(mutation => {\n      if (!mutationGroups[mutation.gene]) {\n        mutationGroups[mutation.gene] = {};\n      }\n      if (!mutationGroups[mutation.gene][mutation.sample]) {\n        mutationGroups[mutation.gene][mutation.sample] = [];\n      }\n      mutationGroups[mutation.gene][mutation.sample].push(mutation);\n    });\n\n    // Fill matrix with single mutations or arrays for multiple mutations\n    Object.keys(mutationGroups).forEach(gene => {\n      Object.keys(mutationGroups[gene]).forEach(sample => {\n        const mutations = mutationGroups[gene][sample];\n        if (mutations.length === 1) {\n          matrix[gene][sample] = mutations[0];\n        } else if (mutations.length === 2) {\n          matrix[gene][sample] = mutations;\n        } else if (mutations.length > 2) {\n          // Create Multi_Hit mutation\n          matrix[gene][sample] = {\n            gene: mutations[0].gene,\n            sample: mutations[0].sample,\n            variantType: 'Multi_Hit',\n            proteinChange: `${mutations.length} mutations`\n          };\n        }\n      });\n    });\n\n    return matrix;\n  }\n\n  static calculateMutationFrequencies(data: ProcessedData): Record<string, number> {\n    const frequencies: Record<string, number> = {};\n    // Use the percentage calculation base (cohort-based or MAF-based)\n    const totalSamples = data.percentageCalculationBase;\n\n    data.genes.forEach(gene => {\n      const mutatedSamples = new Set(\n        data.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      );\n      frequencies[gene] = mutatedSamples.size / totalSamples;\n    });\n\n    return frequencies;\n  }\n\n  static getVariantTypes(data: ProcessedData): string[] {\n    return Array.from(new Set(data.mutations.map(m => m.variantType))).sort();\n  }\n\n  static applySplitBy(\n    data: ProcessedData, \n    splitField: string,\n    sortMethod: 'mutation_load' | 'alphabetical' | 'custom' | 'oncoprint' = 'oncoprint',\n    customSampleOrder?: string[],\n    geneOrder?: string[]\n  ): ProcessedData {\n    // Check if the split field exists in metadata\n    if (!data.metadata.fields.includes(splitField)) {\n      console.warn(`Split field '${splitField}' not found in metadata. Ignoring split.`);\n      return data;\n    }\n\n    // Group samples by the split field value\n    const groupMap = new Map<string, string[]>();\n    \n    data.samples.forEach(sample => {\n      const value = data.metadata.data[sample]?.[splitField];\n      const groupKey = value?.toString() || 'Unknown';\n      \n      if (!groupMap.has(groupKey)) {\n        groupMap.set(groupKey, []);\n      }\n      groupMap.get(groupKey)!.push(sample);\n    });\n\n    // Sort groups by their names for consistent ordering\n    const sortedGroups = Array.from(groupMap.entries()).sort(([a], [b]) => a.localeCompare(b));\n\n    // Create SampleGroup objects with position information\n    const sampleGroups: SampleGroup[] = [];\n    let currentIndex = 0;\n\n    sortedGroups.forEach(([value, groupSamples]) => {\n      // Sort samples within each group using the specified sorting method\n      const sortedGroupSamples = this.sortSamplesWithinGroup(\n        groupSamples, \n        data, \n        sortMethod, \n        customSampleOrder,\n        geneOrder\n      );\n      \n      sampleGroups.push({\n        value,\n        samples: sortedGroupSamples,\n        count: sortedGroupSamples.length,\n        startIndex: currentIndex,\n        endIndex: currentIndex + sortedGroupSamples.length - 1\n      });\n\n      currentIndex += sortedGroupSamples.length;\n    });\n\n    // Create new sample order by concatenating all groups\n    const newSampleOrder: string[] = [];\n    sampleGroups.forEach(group => {\n      newSampleOrder.push(...group.samples);\n    });\n\n    return {\n      ...data,\n      samples: newSampleOrder,\n      sampleGroups\n    };\n  }\n\n  private static sortSamplesWithinGroup(\n    samples: string[], \n    data: ProcessedData,\n    sortMethod: 'mutation_load' | 'alphabetical' | 'custom' | 'oncoprint' = 'oncoprint',\n    customSampleOrder?: string[],\n    geneOrder?: string[]\n  ): string[] {\n    // Create a subset of data containing only the samples in this group\n    const groupData: ProcessedData = {\n      ...data,\n      samples: samples,\n      mutations: data.mutations.filter(m => samples.includes(m.sample)),\n      sampleCounts: Object.fromEntries(\n        samples.map(sample => [sample, data.sampleCounts[sample] || 0])\n      ),\n      metadata: {\n        ...data.metadata,\n        data: Object.fromEntries(\n          samples.map(sample => [sample, data.metadata.data[sample] || {}])\n        )\n      }\n    };\n\n    // Apply the specified sorting method within this group\n    switch (sortMethod) {\n      case 'mutation_load':\n        return this.sortSamplesByMutationLoad(groupData, true);\n      case 'alphabetical':\n        return [...samples].sort();\n      case 'custom':\n        if (customSampleOrder) {\n          // Filter custom order to only include samples in this group, maintaining order\n          const customFiltered = customSampleOrder.filter(s => samples.includes(s));\n          // Add any remaining samples in this group that weren't in the custom order\n          const remaining = samples.filter(s => !customSampleOrder.includes(s));\n          return [...customFiltered, ...remaining];\n        }\n        return samples;\n      case 'oncoprint':\n      default:\n        // Get the most frequently mutated genes for this group for clustering\n        const topGenes = geneOrder || this.sortGenesByFrequency(groupData, true, Math.min(25, data.genes.length));\n        // Apply oncoprint clustering within this group\n        return this.sortSamplesForOncoprint(groupData, topGenes);\n    }\n  }\n\n  static getCoOccurrenceMatrix(data: ProcessedData): Record<string, Record<string, number>> {\n    const matrix: Record<string, Record<string, number>> = {};\n    \n    // Initialize matrix\n    data.genes.forEach(gene1 => {\n      matrix[gene1] = {};\n      data.genes.forEach(gene2 => {\n        matrix[gene1][gene2] = 0;\n      });\n    });\n\n    // Calculate co-occurrences\n    data.samples.forEach(sample => {\n      const sampleMutations = data.mutations\n        .filter(m => m.sample === sample)\n        .map(m => m.gene);\n      \n      // Count co-occurrences for this sample\n      for (let i = 0; i < sampleMutations.length; i++) {\n        for (let j = i; j < sampleMutations.length; j++) {\n          const gene1 = sampleMutations[i];\n          const gene2 = sampleMutations[j];\n          matrix[gene1][gene2]++;\n          if (gene1 !== gene2) {\n            matrix[gene2][gene1]++;\n          }\n        }\n      }\n    });\n\n    return matrix;\n  }\n}","import * as d3 from 'd3';\n\nexport const DEFAULT_VARIANT_COLORS = {\n  Missense_Mutation: \"#16a085\",      // Teal\n  Splice_Site: \"#27ae60\",            // Green\n  Frame_Shift_Del: \"#2980b9\",        // Blue\n  Frame_Shift_Ins: \"#c0392b\",        // Red\n  In_Frame_Del: \"#f39c12\",           // Orange\n  In_Frame_Ins: \"#8e44ad\",           // Purple\n  Nonsense_Mutation: \"#34495e\",      // Dark Gray\n  Multi_Hit: \"#95a5a6\",              // Gray\n  Translation_Start_Site: \"#e74c3c\", // Light Red\n  Nonstop_Mutation: \"#d35400\",       // Dark Orange\n  Default: \"#95a5a6\",                // Gray\n  Empty: \"#ecf0f1\"                   // Light Gray\n};\n\nexport class VariantColorManager {\n  private predefinedColors: Record<string, string>;\n  private dynamicColors: Record<string, string> = {};\n  private colorPalette: readonly string[];\n  private usedColors: Set<string> = new Set();\n\n  constructor(predefinedColors: Record<string, string> = DEFAULT_VARIANT_COLORS) {\n    this.predefinedColors = { ...predefinedColors };\n    this.colorPalette = [\n      ...d3.schemeCategory10,\n      ...d3.schemeSet3\n    ];\n    \n    // Mark predefined colors as used\n    Object.values(this.predefinedColors).forEach(color => {\n      this.usedColors.add(color);\n    });\n  }\n\n  getColor(variant: string): string {\n    // Return predefined color if available\n    if (this.predefinedColors[variant]) {\n      return this.predefinedColors[variant];\n    }\n\n    // Generate dynamic color if not already assigned\n    if (!this.dynamicColors[variant]) {\n      this.dynamicColors[variant] = this.generateUniqueColor();\n    }\n\n    return this.dynamicColors[variant];\n  }\n\n  getAllColors(): Record<string, string> {\n    return { ...this.predefinedColors, ...this.dynamicColors };\n  }\n\n  getKnownVariants(): string[] {\n    return Object.keys(this.predefinedColors).filter(v => v !== 'Default' && v !== 'Empty');\n  }\n\n  getDynamicVariants(): string[] {\n    return Object.keys(this.dynamicColors);\n  }\n\n  updateColor(variant: string, color: string): void {\n    if (this.predefinedColors[variant]) {\n      this.predefinedColors[variant] = color;\n    } else {\n      this.dynamicColors[variant] = color;\n    }\n    this.usedColors.add(color);\n  }\n\n  resetDynamicColors(): void {\n    // Remove dynamic colors from used colors set\n    Object.values(this.dynamicColors).forEach(color => {\n      this.usedColors.delete(color);\n    });\n    this.dynamicColors = {};\n  }\n\n  getColorLegend(variants: string[]): Array<{ variant: string; color: string; isKnown: boolean }> {\n    const knownVariants = new Set(this.getKnownVariants());\n    \n    return variants\n      .filter(v => v !== 'Empty' && v !== 'Default')\n      .map(variant => ({\n        variant,\n        color: this.getColor(variant),\n        isKnown: knownVariants.has(variant)\n      }))\n      .sort((a, b) => {\n        // Sort known variants first, then alphabetically\n        if (a.isKnown && !b.isKnown) return -1;\n        if (!a.isKnown && b.isKnown) return 1;\n        return a.variant.localeCompare(b.variant);\n      });\n  }\n\n  private generateUniqueColor(): string {\n    // Try colors from the palette first\n    for (const color of this.colorPalette) {\n      if (!this.usedColors.has(color)) {\n        this.usedColors.add(color);\n        return color;\n      }\n    }\n\n    // If all palette colors are used, generate a random color\n    let attempts = 0;\n    let color: string;\n    \n    do {\n      color = this.generateRandomColor();\n      attempts++;\n    } while (this.usedColors.has(color) && attempts < 100);\n\n    this.usedColors.add(color);\n    return color;\n  }\n\n  private generateRandomColor(): string {\n    // Generate a color with good contrast and saturation\n    const hue = Math.floor(Math.random() * 360);\n    const saturation = 60 + Math.floor(Math.random() * 30); // 60-90%\n    const lightness = 40 + Math.floor(Math.random() * 20);  // 40-60%\n    \n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  }\n\n  getVariantsByFrequency(variants: string[], counts: Record<string, number>): string[] {\n    return [...variants].sort((a, b) => {\n      const countA = counts[a] || 0;\n      const countB = counts[b] || 0;\n      return countB - countA;\n    });\n  }\n\n  static fromVariants(variants: string[], customColors?: Record<string, string>): VariantColorManager {\n    const manager = new VariantColorManager(customColors);\n    \n    // Pre-generate colors for all variants\n    variants.forEach(variant => {\n      manager.getColor(variant);\n    });\n\n    return manager;\n  }\n\n  exportColorMap(): Record<string, string> {\n    return {\n      ...this.predefinedColors,\n      ...this.dynamicColors\n    };\n  }\n\n  importColorMap(colorMap: Record<string, string>): void {\n    Object.entries(colorMap).forEach(([variant, color]) => {\n      if (this.predefinedColors[variant]) {\n        this.predefinedColors[variant] = color;\n      } else {\n        this.dynamicColors[variant] = color;\n      }\n      this.usedColors.add(color);\n    });\n  }\n}","export type EventCallback = (...args: any[]) => void;\n\nexport class EventEmitter {\n  private events: Record<string, EventCallback[]> = {};\n\n  on(event: string, callback: EventCallback): void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(callback);\n  }\n\n  off(event: string, callback?: EventCallback): void {\n    if (!this.events[event]) return;\n\n    if (!callback) {\n      delete this.events[event];\n      return;\n    }\n\n    this.events[event] = this.events[event].filter(cb => cb !== callback);\n    if (this.events[event].length === 0) {\n      delete this.events[event];\n    }\n  }\n\n  emit(event: string, ...args: any[]): void {\n    if (!this.events[event]) return;\n    \n    this.events[event].forEach(callback => {\n      try {\n        callback(...args);\n      } catch (error) {\n        console.error(`Error in event handler for '${event}':`, error);\n      }\n    });\n  }\n\n  once(event: string, callback: EventCallback): void {\n    const onceCallback = (...args: any[]) => {\n      callback(...args);\n      this.off(event, onceCallback);\n    };\n    this.on(event, onceCallback);\n  }\n\n  listenerCount(event: string): number {\n    return this.events[event]?.length || 0;\n  }\n\n  removeAllListeners(event?: string): void {\n    if (event) {\n      delete this.events[event];\n    } else {\n      this.events = {};\n    }\n  }\n}","import * as d3 from 'd3';\nimport { ProcessedData, ProcessedMutation, OncoprintConfig, MetadataTrackConfig } from '../types';\nimport { VariantColorManager, DEFAULT_VARIANT_COLORS } from '../core/VariantColorManager';\nimport { DataProcessor } from '../core/DataProcessor';\nimport { EventEmitter } from '../utils';\n\nexport interface RendererDimensions {\n  width: number;\n  height: number;\n  cellWidth: number;\n  cellHeight: number;\n  geneLabelWidth: number;\n  sampleLabelHeight: number;\n  metadataTrackHeight: number;\n  legendWidth: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\nexport class OncoprintRenderer extends EventEmitter {\n  private container: HTMLElement;\n  private svg: d3.Selection<SVGSVGElement, unknown, null, undefined> | null = null;\n  private data: ProcessedData | null = null;\n  private config: OncoprintConfig;\n  private colorManager: VariantColorManager;\n  private dimensions: RendererDimensions;\n  private geneOrder: string[] = [];\n  private sampleOrder: string[] = [];\n\n  constructor(container: HTMLElement, config: OncoprintConfig = {}) {\n    super();\n    this.container = container;\n    this.config = this.getDefaultConfig(config);\n    this.colorManager = new VariantColorManager(this.config.variantColors);\n    this.dimensions = this.calculateDimensions();\n  }\n\n  setData(data: ProcessedData): void {\n    this.data = data;\n    this.updateColorManager();\n    this.updateOrdering();\n    this.emit('dataLoaded', data);\n  }\n\n  updateConfig(config: Partial<OncoprintConfig>): void {\n    this.config = { ...this.config, ...config };\n    if (config.variantColors) {\n      this.colorManager = new VariantColorManager(config.variantColors);\n      if (this.data) {\n        this.updateColorManager();\n      }\n    }\n    \n    // Update ordering if sort configuration changed\n    if (this.data && (config.sortGenes || config.sortSamples || config.customGeneOrder || config.splitBy)) {\n      this.updateOrdering();\n    }\n    \n    this.dimensions = this.calculateDimensions();\n  }\n\n  render(): void {\n    if (!this.data) {\n      throw new Error('No data available for rendering');\n    }\n\n    this.createSVG();\n    this.renderMetadataTracks();\n    this.renderGroupHeaders();\n    this.renderMainMatrix();\n    this.renderGeneLabels();\n    this.renderSampleLabels();\n    this.renderLegend();\n    this.setupInteractions();\n  }\n\n  resize(width?: number, height?: number): void {\n    if (width) this.dimensions.width = width;\n    if (height) this.dimensions.height = height;\n    this.dimensions = this.calculateDimensions();\n    this.render();\n  }\n\n  exportSVG(): string {\n    if (!this.svg) {\n      throw new Error('No SVG available for export');\n    }\n    return new XMLSerializer().serializeToString(this.svg.node()!);\n  }\n\n  exportPNG(options?: { \n    backgroundColor?: string; \n    cropToContent?: boolean; \n    padding?: number;\n    scale?: number;\n  }): Promise<Blob> {\n    const defaults = {\n      backgroundColor: 'white',\n      cropToContent: true,\n      padding: 10,\n      scale: 1\n    };\n    const opts = { ...defaults, ...options };\n\n    return new Promise((resolve, reject) => {\n      if (!this.data) {\n        reject(new Error('No data available for export'));\n        return;\n      }\n\n      // Create a temporary full-size SVG for export\n      const exportSVG = this.createFullSizeExportSVG();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d')!;\n      const img = new Image();\n\n      img.onload = () => {\n        console.log(`Export SVG dimensions: ${img.width} x ${img.height}`);\n        \n        // For export, use the full image dimensions\n        let sourceX = 0, sourceY = 0, sourceWidth = img.width, sourceHeight = img.height;\n        \n        if (opts.cropToContent && opts.padding) {\n          // Add padding around the content\n          sourceX = Math.max(0, sourceX - opts.padding);\n          sourceY = Math.max(0, sourceY - opts.padding);\n          sourceWidth = Math.min(img.width - sourceX, sourceWidth + (2 * opts.padding));\n          sourceHeight = Math.min(img.height - sourceY, sourceHeight + (2 * opts.padding));\n        }\n        \n        // Apply scaling\n        const finalWidth = Math.round(sourceWidth * opts.scale);\n        const finalHeight = Math.round(sourceHeight * opts.scale);\n        \n        console.log(`Final export dimensions: ${finalWidth} x ${finalHeight} (scale: ${opts.scale})`);\n        \n        // Set canvas to final size\n        canvas.width = finalWidth;\n        canvas.height = finalHeight;\n        \n        // Fill with background color\n        if (opts.backgroundColor && opts.backgroundColor !== 'transparent') {\n          ctx.fillStyle = opts.backgroundColor;\n          ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        \n        // Draw the full image\n        ctx.drawImage(\n          img,\n          sourceX, sourceY, sourceWidth, sourceHeight,\n          0, 0, finalWidth, finalHeight\n        );\n        \n        canvas.toBlob((blob) => {\n          if (blob) {\n            console.log(`PNG export successful: ${blob.size} bytes`);\n            resolve(blob);\n          } else {\n            reject(new Error('Failed to create blob'));\n          }\n        }, 'image/png');\n      };\n\n      img.onerror = (error) => {\n        console.error('Image loading failed:', error);\n        reject(new Error('Failed to load SVG as image'));\n      };\n      \n      console.log('Starting PNG export with full-size SVG');\n      img.src = 'data:image/svg+xml;base64,' + btoa(exportSVG);\n    });\n  }\n\n  private createFullSizeExportSVG(): string {\n    // Save current dimensions and temporarily switch to full-size\n    const originalDimensions = { ...this.dimensions };\n    \n    // Calculate full-size dimensions for export\n    const fullSizeCellWidth = this.config.cellWidth || 10;\n    const fullSizeCellHeight = this.config.cellHeight || 20;\n    \n    const geneLabelWidth = this.config.geneLabels ? 120 : 0;\n    const marginLeft = 20;\n    const marginRight = 80;\n    const marginTop = 20;\n    const marginBottom = 80 + (this.config.sampleLabels ? 100 : 0);\n    \n    const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n      this.getTotalWidthWithGaps(fullSizeCellWidth) : \n      this.sampleOrder.length * fullSizeCellWidth;\n    \n    const metadataTracksHeight = this.getMetadataTracksHeight();\n    const matrixHeight = this.geneOrder.length * fullSizeCellHeight;\n    \n    let legendHeight = 0;\n    if (this.config.legend) {\n      legendHeight += 60;\n      const metadataFields = this.getActiveMetadataTracks();\n      if (metadataFields.length > 0) {\n        legendHeight += metadataFields.length * 25;\n      }\n    }\n    \n    const fullWidth = marginLeft + geneLabelWidth + matrixWidth + marginRight;\n    const fullHeight = marginTop + metadataTracksHeight + matrixHeight + \n                      (this.config.legend ? 30 + legendHeight : 0) + marginBottom;\n    \n    // Temporarily set full-size dimensions\n    this.dimensions = {\n      ...originalDimensions,\n      width: fullWidth,\n      height: fullHeight,\n      cellWidth: fullSizeCellWidth,\n      cellHeight: fullSizeCellHeight\n    };\n    \n    // Create temporary SVG element in memory\n    const tempContainer = document.createElement('div');\n    const tempSVG = d3.select(tempContainer)\n      .append('svg')\n      .attr('width', fullWidth)\n      .attr('height', fullHeight)\n      .style('font-family', 'Arial, sans-serif')\n      .style('font-size', '12px');\n    \n    // Store original SVG and temporarily switch\n    const originalSVG = this.svg;\n    this.svg = tempSVG;\n    \n    // Render all components to the temporary SVG\n    this.renderMetadataTracks();\n    this.renderGroupHeaders();\n    this.renderMainMatrix();\n    this.renderGeneLabels();\n    this.renderSampleLabels();\n    this.renderLegend();\n    \n    // Get the SVG string\n    const svgString = new XMLSerializer().serializeToString(tempSVG.node()!);\n    \n    // Restore original SVG and dimensions\n    this.svg = originalSVG;\n    this.dimensions = originalDimensions;\n    \n    return svgString;\n  }\n\n  private getSampleXPosition(sampleIndex: number): number {\n    if (!this.data?.sampleGroups || !this.config.splitBy) {\n      // No splitting - use normal positioning\n      return sampleIndex * this.dimensions.cellWidth;\n    }\n\n    const gapSize = this.config.splitBy.gapSize || 20;\n    let x = 0;\n    let currentIndex = 0;\n\n    // Find which group this sample belongs to and calculate position\n    for (const group of this.data.sampleGroups) {\n      if (sampleIndex >= currentIndex && sampleIndex <= currentIndex + group.count - 1) {\n        // Sample is in this group\n        const indexInGroup = sampleIndex - currentIndex;\n        return x + (indexInGroup * this.dimensions.cellWidth);\n      }\n      // Move to next group\n      x += group.count * this.dimensions.cellWidth + gapSize;\n      currentIndex += group.count;\n    }\n\n    // Fallback (shouldn't happen)\n    return sampleIndex * this.dimensions.cellWidth;\n  }\n\n  private getTotalWidthWithGaps(cellWidth?: number): number {\n    const actualCellWidth = cellWidth || this.dimensions.cellWidth;\n    \n    if (!this.data?.sampleGroups || !this.config.splitBy) {\n      return this.sampleOrder.length * actualCellWidth;\n    }\n\n    const gapSize = this.config.splitBy.gapSize || 20;\n    let totalWidth = 0;\n    const sampleGroups = this.data.sampleGroups;\n\n    sampleGroups.forEach((group, index) => {\n      totalWidth += group.count * actualCellWidth;\n      if (index < sampleGroups.length - 1) {\n        totalWidth += gapSize; // Add gap except after last group\n      }\n    });\n\n    return totalWidth;\n  }\n\n  private getContentBounds(): { x: number; y: number; width: number; height: number } {\n    if (!this.data || this.sampleOrder.length === 0 || this.geneOrder.length === 0) {\n      // Fallback to current SVG size if no data\n      return { \n        x: 0, \n        y: 0, \n        width: this.dimensions.width || 200, \n        height: this.dimensions.height || 100 \n      };\n    }\n\n    const padding = 15;\n\n    // For PNG export, use full-size dimensions (not scaled to fit container)\n    const fullSizeDimensions = this.calculateFullSizeDimensions();\n    \n    const includeGeneLabels = this.config.geneLabels ? 120 : 0; // Use fixed size for export\n    const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n      this.getTotalWidthWithGaps(fullSizeDimensions.cellWidth) : \n      this.sampleOrder.length * fullSizeDimensions.cellWidth;\n    const includeFrequencies = this.config.showPercentages ? 80 : 0;\n    const contentWidth = 20 + includeGeneLabels + matrixWidth + includeFrequencies + 80;\n\n    const metadataTracksHeight = this.getMetadataTracksHeight();\n    const matrixHeight = this.geneOrder.length * fullSizeDimensions.cellHeight;\n    \n    let legendHeight = 0;\n    if (this.config.legend) {\n      legendHeight += 60;\n      const metadataFields = this.getActiveMetadataTracks();\n      if (metadataFields.length > 0) {\n        legendHeight += metadataFields.length * 30;\n      }\n    }\n    \n    const totalContentHeight = 20 + metadataTracksHeight + matrixHeight + \n                              (this.config.legend ? 30 + legendHeight : 0) + 80;\n\n    const finalWidth = Math.max(contentWidth + (2 * padding), 400);\n    const finalHeight = Math.max(totalContentHeight + (2 * padding), 300);\n\n    return {\n      x: 0,\n      y: 0,\n      width: finalWidth,\n      height: finalHeight\n    };\n  }\n\n  private calculateFullSizeDimensions(): { cellWidth: number; cellHeight: number } {\n    // Return the original configured cell dimensions (not scaled)\n    return {\n      cellWidth: this.config.cellWidth || 10,\n      cellHeight: this.config.cellHeight || 20\n    };\n  }\n\n  private createSVG(): void {\n    // Remove existing SVG\n    d3.select(this.container).selectAll('svg').remove();\n\n    // Create new SVG with exact dimensions needed\n    this.svg = d3.select(this.container)\n      .append('svg')\n      .attr('width', this.dimensions.width)\n      .attr('height', this.dimensions.height)\n      .style('font-family', 'Arial, sans-serif')\n      .style('font-size', '12px')\n      .style('display', 'block');\n      \n    console.log(`Created SVG with dimensions: ${this.dimensions.width} x ${this.dimensions.height}`);\n    console.log(`Cell dimensions: ${this.dimensions.cellWidth} x ${this.dimensions.cellHeight}`);\n    console.log(`Container size: ${this.container.getBoundingClientRect().width} x ${this.container.getBoundingClientRect().height}`);\n    \n    // Log matrix dimensions for debugging\n    if (this.data) {\n      const matrixWidth = this.sampleOrder.length * this.dimensions.cellWidth;\n      const matrixHeight = this.geneOrder.length * this.dimensions.cellHeight;\n      console.log(`Matrix dimensions: ${matrixWidth} x ${matrixHeight} (${this.sampleOrder.length} samples x ${this.geneOrder.length} genes)`);\n    }\n  }\n\n  private renderMainMatrix(): void {\n    if (!this.svg || !this.data) return;\n\n    const matrixGroup = this.svg.append('g')\n      .attr('class', 'oncoprint-matrix')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    // Create mutation matrix\n    const mutationMatrix = this.createMutationMatrix();\n\n    // Render cells\n    this.geneOrder.forEach((gene, geneIndex) => {\n      this.sampleOrder.forEach((sample, sampleIndex) => {\n        const mutation = mutationMatrix[gene][sample];\n        const x = this.getSampleXPosition(sampleIndex) + 1;\n        const y = (this.geneOrder.length - 1 - geneIndex) * this.dimensions.cellHeight + 1;\n\n        if (!mutation) {\n          // Empty cell\n          matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', this.dimensions.cellHeight - 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', this.colorManager.getColor('Empty'))\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .style('cursor', 'pointer');\n        } else if (Array.isArray(mutation)) {\n          // Two mutations - split the cell\n          const mutation1 = mutation[0];\n          const mutation2 = mutation[1];\n          const color1 = this.colorManager.getColor(mutation1.variantType);\n          const color2 = this.colorManager.getColor(mutation2.variantType);\n          \n          // Top half\n          const cell1 = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', (this.dimensions.cellHeight - 2) / 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color1)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation1.variantType)\n            .style('cursor', 'pointer');\n          \n          // Create tooltip for first mutation\n          let tooltip1 = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation1.variantType}`;\n          if (mutation1.proteinChange) {\n            tooltip1 += `\\nProtein Change: ${mutation1.proteinChange}`;\n          }\n          cell1.append('title').text(tooltip1);\n          \n          // Bottom half\n          const cell2 = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y + (this.dimensions.cellHeight - 2) / 2)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', (this.dimensions.cellHeight - 2) / 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color2)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation2.variantType)\n            .style('cursor', 'pointer');\n          \n          // Create tooltip for second mutation\n          let tooltip2 = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation2.variantType}`;\n          if (mutation2.proteinChange) {\n            tooltip2 += `\\nProtein Change: ${mutation2.proteinChange}`;\n          }\n          cell2.append('title').text(tooltip2);\n        } else {\n          // Single mutation\n          const color = this.colorManager.getColor(mutation.variantType);\n          const cell = matrixGroup.append('rect')\n            .attr('x', x)\n            .attr('y', y)\n            .attr('width', this.dimensions.cellWidth - 2)\n            .attr('height', this.dimensions.cellHeight - 2)\n            .attr('rx', 3)\n            .attr('ry', 3)\n            .attr('fill', color)\n            .attr('stroke', 'none')\n            .attr('data-gene', gene)\n            .attr('data-sample', sample)\n            .attr('data-variant', mutation.variantType)\n            .style('cursor', 'pointer');\n\n          // Create tooltip for single mutation\n          let tooltip = `Gene: ${gene}\\nSample: ${sample}\\nVariant: ${mutation.variantType}`;\n          if (mutation.proteinChange) {\n            tooltip += `\\nProtein Change: ${mutation.proteinChange}`;\n          }\n          cell.append('title').text(tooltip);\n        }\n      });\n    });\n  }\n\n  private renderGeneLabels(): void {\n    if (!this.svg || !this.data || !this.config.geneLabels) return;\n\n    // Gene names on the left\n    const labelGroup = this.svg.append('g')\n      .attr('class', 'gene-labels')\n      .attr('transform', `translate(${this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    // Frequency labels on the right\n    const frequencyGroup = this.svg.append('g')\n      .attr('class', 'gene-frequencies')\n      .attr('transform', `translate(${this.dimensions.marginLeft + this.dimensions.geneLabelWidth + this.getTotalWidthWithGaps() + 10}, ${this.dimensions.marginTop + this.getMetadataTracksHeight()})`);\n\n    this.geneOrder.forEach((gene, index) => {\n      const y = (this.geneOrder.length - 1 - index) * this.dimensions.cellHeight + this.dimensions.cellHeight / 2;\n      // Calculate frequency based on percentage calculation base (cohort or MAF-based)\n      const mutatedSampleCount = new Set(\n        this.data!.mutations\n          .filter(m => m.gene === gene)\n          .map(m => m.sample)\n      ).size;\n      const frequency = mutatedSampleCount / this.data!.percentageCalculationBase;\n      \n      // Gene name on the left\n      labelGroup.append('text')\n        .attr('x', this.dimensions.geneLabelWidth - 5)\n        .attr('y', y)\n        .attr('dy', '0.35em')\n        .attr('text-anchor', 'end')\n        .style('font-size', Math.min(12, this.dimensions.cellHeight * 0.8) + 'px')\n        .style('cursor', 'pointer')\n        .text(gene)\n        .on('click', () => {\n          this.emit('geneClick', { gene });\n        });\n\n      // Frequency on the right\n      if (this.config.showPercentages) {\n        frequencyGroup.append('text')\n          .attr('x', 0)\n          .attr('y', y)\n          .attr('dy', '0.35em')\n          .attr('text-anchor', 'start')\n          .style('font-size', '10px')\n          .style('fill', '#666')\n          .text(`${Math.round(frequency * 100)}%`);\n      }\n    });\n  }\n\n  private renderSampleLabels(): void {\n    if (!this.svg || !this.data || !this.config.sampleLabels) return;\n\n    const labelGroup = this.svg.append('g')\n      .attr('class', 'sample-labels')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.height - this.dimensions.marginBottom})`);\n\n    this.sampleOrder.forEach((sample, index) => {\n      const x = index * this.dimensions.cellWidth + this.dimensions.cellWidth / 2;\n      \n      labelGroup.append('text')\n        .attr('x', x)\n        .attr('y', -5)\n        .attr('text-anchor', 'end')\n        .attr('transform', `rotate(-45, ${x}, -5)`)\n        .style('font-size', Math.min(10, this.dimensions.cellWidth * 0.8) + 'px')\n        .style('cursor', 'pointer')\n        .text(sample);\n    });\n  }\n\n  private renderMetadataTracks(): void {\n    if (!this.svg || !this.data) return;\n\n    // Get active tracks - support both legacy and new configuration\n    const activeTracks = this.getActiveMetadataTracks();\n    if (!activeTracks.length) return;\n\n    const tracksGroup = this.svg.append('g')\n      .attr('class', 'metadata-tracks')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop})`);\n\n    let currentY = 0;\n    activeTracks.forEach((trackConfig, trackIndex) => {\n      if (!this.data!.metadata.fields.includes(trackConfig.field)) return;\n\n      const trackHeight = trackConfig.height || this.dimensions.metadataTrackHeight;\n      const trackSpacing = this.config.metadata?.trackSpacing || 3;\n      \n      this.renderSingleMetadataTrack(tracksGroup, trackConfig, currentY);\n      \n      // Add track label if enabled\n      if (trackConfig.showLabels !== false && this.config.metadata?.showLabels !== false) {\n        const label = trackConfig.label || trackConfig.field;\n        this.svg!.append('text')\n          .attr('x', this.dimensions.marginLeft + this.dimensions.geneLabelWidth - 5)\n          .attr('y', this.dimensions.marginTop + currentY + trackHeight / 2)\n          .attr('dy', '0.35em')\n          .attr('text-anchor', 'end')\n          .style('font-size', '10px')\n          .text(label);\n      }\n\n      currentY += trackHeight + trackSpacing;\n    });\n  }\n\n  private getActiveMetadataTracks(): MetadataTrackConfig[] {\n    // Support legacy configuration\n    if (this.config.metadataFields?.length && !this.config.metadata?.tracks) {\n      return this.config.metadataFields.map(field => ({\n        field,\n        visible: true,\n        type: 'auto' as const,\n        height: this.config.metadataTrackHeight\n      }));\n    }\n\n    // Use new enhanced configuration\n    if (this.config.metadata?.tracks) {\n      return this.config.metadata.tracks\n        .filter(track => track.visible !== false)\n        .sort((a, b) => (a.order || 0) - (b.order || 0));\n    }\n\n    return [];\n  }\n\n  private renderGroupHeaders(): void {\n    if (!this.svg || !this.data?.sampleGroups || !this.config.splitBy) return;\n\n    const showGroupHeaders = this.config.splitBy.showGroupHeaders !== false;\n    const showGroupCounts = this.config.splitBy.showGroupCounts !== false;\n\n    if (!showGroupHeaders && !showGroupCounts) return;\n\n    const headerGroup = this.svg.append('g')\n      .attr('class', 'group-headers')\n      .attr('transform', `translate(${this.dimensions.geneLabelWidth + this.dimensions.marginLeft}, ${this.dimensions.marginTop + this.getMetadataTracksHeight() - 25})`);\n\n    const sampleGroups = this.data.sampleGroups;\n    \n    sampleGroups.forEach((group, groupIndex) => {\n      const groupStartX = this.getSampleXPosition(group.startIndex);\n      const groupWidth = group.count * this.dimensions.cellWidth;\n      const groupCenterX = groupStartX + groupWidth / 2;\n\n      // Add group header text\n      if (showGroupHeaders) {\n        headerGroup.append('text')\n          .attr('x', groupCenterX)\n          .attr('y', 0)\n          .attr('text-anchor', 'middle')\n          .attr('dy', '0.35em')\n          .style('font-size', '12px')\n          .style('font-weight', 'bold')\n          .style('fill', '#333')\n          .text(group.value);\n      }\n\n      // Add sample count\n      if (showGroupCounts) {\n        headerGroup.append('text')\n          .attr('x', groupCenterX)\n          .attr('y', showGroupHeaders ? 15 : 0)\n          .attr('text-anchor', 'middle')\n          .attr('dy', '0.35em')\n          .style('font-size', '10px')\n          .style('fill', '#666')\n          .text(`(n=${group.count})`);\n      }\n\n      // Add separator line between groups (except for the last group)\n      if (groupIndex < sampleGroups.length - 1) {\n        const gapSize = this.config.splitBy!.gapSize || 20;\n        const lineX = groupStartX + groupWidth + gapSize / 2;\n        \n        headerGroup.append('line')\n          .attr('x1', lineX)\n          .attr('y1', -10)\n          .attr('x2', lineX)\n          .attr('y2', 20)\n          .attr('stroke', '#ddd')\n          .attr('stroke-width', 1)\n          .attr('stroke-dasharray', '2,2');\n      }\n    });\n  }\n\n  private renderSingleMetadataTrack(container: any, trackConfig: MetadataTrackConfig, y: number): void {\n    const field = trackConfig.field;\n    const trackHeight = trackConfig.height || this.dimensions.metadataTrackHeight;\n    \n    // Determine field type\n    const detectedType = this.data!.metadata.fieldTypes[field];\n    const fieldType = trackConfig.type === 'auto' || !trackConfig.type ? detectedType : trackConfig.type;\n    \n    // Create color scale\n    const colorScale = this.createColorScale(field, fieldType, trackConfig);\n\n    this.sampleOrder.forEach((sample, sampleIndex) => {\n      const value = this.data!.metadata.data[sample]?.[field];\n      const x = this.getSampleXPosition(sampleIndex);\n\n      let color = '#f0f0f0'; // Default for missing values\n      let tooltip = '';\n\n      if (value !== undefined) {\n        if (trackConfig.customRenderer) {\n          const result = trackConfig.customRenderer(value, sample);\n          color = result.color;\n          tooltip = result.tooltip || String(value);\n        } else {\n          if (fieldType === 'numerical' && typeof value === 'number') {\n            color = colorScale(value);\n          } else {\n            color = colorScale(String(value));\n          }\n          tooltip = String(value);\n        }\n      }\n\n      const rect = container.append('rect')\n        .attr('x', x + 1)\n        .attr('y', y + 1)\n        .attr('width', this.dimensions.cellWidth - 2)\n        .attr('height', trackHeight - 2)\n        .attr('rx', 3)\n        .attr('ry', 3)\n        .attr('fill', color)\n        .attr('stroke', 'none')\n        .attr('data-field', field)\n        .attr('data-sample', sample)\n        .attr('data-value', value !== undefined ? String(value) : '');\n\n      // Add tooltip if enabled\n      if (trackConfig.tooltips !== false && this.config.tooltips !== false) {\n        rect.append('title').text(`${trackConfig.label || field}: ${tooltip}`);\n      }\n    });\n  }\n\n  private createColorScale(field: string, fieldType: string, trackConfig: MetadataTrackConfig): any {\n    if (fieldType === 'numerical') {\n      // Get all available numerical values for this field (not just displayed samples)\n      const allValues = Object.values(this.data!.metadata.data)\n        .map(sampleData => sampleData?.[field])\n        .filter(v => v !== undefined && typeof v === 'number') as number[];\n      \n      // Calculate domain from all data, not just displayed samples\n      let extent = trackConfig.domain;\n      if (!extent && allValues.length > 0) {\n        extent = d3.extent(allValues) as [number, number];\n        // Handle edge case where all values are the same\n        if (extent[0] === extent[1]) {\n          extent = [extent[0] - 1, extent[1] + 1];\n        }\n      }\n      \n      // Fallback if no valid domain can be calculated\n      if (!extent || extent[0] === undefined || extent[1] === undefined) {\n        extent = [0, 1];\n      }\n      \n      // Handle different color scales\n      let interpolator;\n      switch (trackConfig.colorScale) {\n        case 'viridis': interpolator = d3.interpolateViridis; break;\n        case 'plasma': interpolator = d3.interpolatePlasma; break;\n        case 'reds': interpolator = d3.interpolateReds; break;\n        case 'greens': interpolator = d3.interpolateGreens; break;\n        default: interpolator = d3.interpolateBlues; break;\n      }\n      \n      return d3.scaleSequential(interpolator).domain(extent);\n    } else {\n      // Get all unique categorical values for this field (not just displayed samples)\n      const allValues = Array.from(new Set(\n        Object.values(this.data!.metadata.data)\n          .map(sampleData => sampleData?.[field])\n          .filter(v => v !== undefined)\n          .map(v => String(v))\n      ));\n\n      if (trackConfig.colors) {\n        if (Array.isArray(trackConfig.colors)) {\n          return d3.scaleOrdinal(trackConfig.colors).domain(allValues);\n        } else if (typeof trackConfig.colors === 'string') {\n          // Handle string-based color scheme names (e.g., 'category10', 'category20')\n          let colorScheme;\n          switch (trackConfig.colors) {\n            case 'category10': colorScheme = d3.schemeCategory10; break;\n            case 'category20': colorScheme = d3.schemeCategory10.concat(d3.schemeCategory10); break;\n            case 'pastel1': colorScheme = d3.schemePastel1; break;\n            case 'set3': colorScheme = d3.schemeSet3; break;\n            default: colorScheme = d3.schemeCategory10; break;\n          }\n          return d3.scaleOrdinal(colorScheme).domain(allValues);\n        } else {\n          // Record-based color mapping\n          return (value: string) => (trackConfig.colors as Record<string, string>)[value] || '#bdc3c7';\n        }\n      }\n      \n      // Default categorical color scheme - use more colors for better distinction\n      const defaultScheme = allValues.length <= 10 ? d3.schemeCategory10 : \n                           allValues.length <= 20 ? d3.schemeCategory10.concat(d3.schemePastel1) :\n                           d3.schemeCategory10.concat(d3.schemePastel1).concat(d3.schemeSet3);\n      \n      return d3.scaleOrdinal(defaultScheme).domain(allValues);\n    }\n  }\n\n  private renderLegend(): void {\n    if (!this.svg || !this.data || !this.config.legend) return;\n\n    const variants = Array.from(new Set(this.data.mutations.map(m => m.variantType)));\n    const legend = this.colorManager.getColorLegend(variants);\n\n    // Calculate legend position at bottom\n    const matrixHeight = this.geneOrder.length * this.dimensions.cellHeight;\n    const legendY = this.dimensions.marginTop + this.getMetadataTracksHeight() + matrixHeight + 30;\n    \n    const legendGroup = this.svg.append('g')\n      .attr('class', 'legend')\n      .attr('transform', `translate(${this.dimensions.marginLeft + this.dimensions.geneLabelWidth}, ${legendY})`);\n\n    legendGroup.append('text')\n      .attr('x', 0)\n      .attr('y', 15)\n      .style('font-weight', 'bold')\n      .style('font-size', '12px')\n      .text('Mutation Types');\n\n    // Render legend items horizontally\n    let currentX = 0;\n    legend.forEach((item, index) => {\n      const itemGroup = legendGroup.append('g')\n        .attr('transform', `translate(${currentX}, 25)`);\n\n      itemGroup.append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 12)\n        .attr('height', 12)\n        .attr('fill', item.color);\n\n      const text = itemGroup.append('text')\n        .attr('x', 18)\n        .attr('y', 6)\n        .attr('dy', '0.35em')\n        .style('font-size', '10px')\n        .text(item.variant);\n\n      if (!item.isKnown) {\n        text.append('tspan')\n          .style('font-size', '9px')\n          .style('fill', '#666')\n          .text(' (auto)');\n      }\n\n      // Calculate width for next item\n      const textWidth = text.node()?.getBBox().width || 0;\n      currentX += textWidth + 30 + 18; // rect + text + spacing\n    });\n\n    // Render metadata legends below mutation legend\n    this.renderMetadataLegends(legendGroup, 60);\n  }\n\n  private renderMetadataLegends(parentGroup: any, yOffset: number): void {\n    if (!this.data) return;\n\n    const activeTracks = this.getActiveMetadataTracks();\n    if (!activeTracks.length) return;\n\n    let currentX = 0;\n    const trackSpacing = 200; // Horizontal spacing between tracks\n\n    activeTracks.forEach((trackConfig, trackIndex) => {\n      const field = trackConfig.field;\n      if (!this.data!.metadata.fields.includes(field)) return;\n\n      const detectedType = this.data!.metadata.fieldTypes[field];\n      const fieldType = trackConfig.type === 'auto' || !trackConfig.type ? detectedType : trackConfig.type;\n      const label = trackConfig.label || field;\n\n      // Add track title\n      parentGroup.append('text')\n        .attr('x', currentX)\n        .attr('y', yOffset + 15)\n        .style('font-weight', 'bold')\n        .style('font-size', '11px')\n        .text(label);\n\n      if (fieldType === 'categorical') {\n        const width = this.renderCategoricalMetadataLegend(parentGroup, trackConfig, currentX, yOffset + 25);\n        currentX += Math.max(width, trackSpacing);\n      } else {\n        this.renderNumericalMetadataLegend(parentGroup, trackConfig, currentX, yOffset + 25);\n        currentX += trackSpacing;\n      }\n    });\n  }\n\n  private renderCategoricalMetadataLegend(parentGroup: any, trackConfig: MetadataTrackConfig, startX: number, y: number): number {\n    const field = trackConfig.field;\n    \n    // Only get values that are actually present in the displayed samples\n    const displayedSamples = this.sampleOrder;\n    const values = Array.from(new Set(\n      displayedSamples\n        .map(sample => this.data!.metadata.data[sample]?.[field])\n        .filter(v => v !== undefined)\n        .map(v => String(v))\n    ));\n\n    if (!values.length) return 0;\n\n    const colorScale = this.createColorScale(field, 'categorical', trackConfig);\n    \n    // Arrange in multiple columns for efficient space usage\n    const maxWidth = 180; // Maximum width per track\n    const itemSpacing = 5;\n    let currentX = 0;\n    let currentY = 0;\n    let maxUsedWidth = 0;\n\n    values.forEach((value, index) => {\n      const color = colorScale(value);\n      \n      const itemGroup = parentGroup.append('g')\n        .attr('transform', `translate(${startX + currentX}, ${y + currentY})`);\n\n      itemGroup.append('rect')\n        .attr('x', 0)\n        .attr('y', 0)\n        .attr('width', 8)\n        .attr('height', 8)\n        .attr('rx', 1)\n        .attr('ry', 1)\n        .attr('fill', color);\n\n      const text = itemGroup.append('text')\n        .attr('x', 12)\n        .attr('y', 4)\n        .attr('dy', '0.35em')\n        .style('font-size', '9px')\n        .text(value);\n\n      const textWidth = text.node()?.getBBox().width || 0;\n      const itemWidth = textWidth + 12 + itemSpacing;\n      \n      // Check if we need to wrap to next row\n      if (currentX + itemWidth > maxWidth && currentX > 0) {\n        currentY += 18;\n        currentX = 0;\n        // Re-position this item\n        itemGroup.attr('transform', `translate(${startX + currentX}, ${y + currentY})`);\n      }\n      \n      currentX += itemWidth;\n      maxUsedWidth = Math.max(maxUsedWidth, currentX);\n    });\n\n    return Math.min(maxUsedWidth, maxWidth);\n  }\n\n  private renderNumericalMetadataLegend(parentGroup: any, trackConfig: MetadataTrackConfig, startX: number, y: number): void {\n    const field = trackConfig.field;\n    \n    // Only get values that are actually present in the displayed samples\n    const displayedSamples = this.sampleOrder;\n    const values = displayedSamples\n      .map(sample => this.data!.metadata.data[sample]?.[field])\n      .filter(v => v !== undefined && typeof v === 'number') as number[];\n    \n    if (!values.length) return;\n\n    const extent = trackConfig.domain || (d3.extent(values) as [number, number]);\n    const colorScale = this.createColorScale(field, 'numerical', trackConfig);\n\n    // Create gradient\n    const gradientId = `gradient-${field}`;\n    const defs = parentGroup.select('defs').empty() ? \n      parentGroup.append('defs') : parentGroup.select('defs');\n    \n    const gradient = defs.append('linearGradient')\n      .attr('id', gradientId)\n      .attr('x1', '0%')\n      .attr('x2', '100%');\n\n    // Add gradient stops\n    for (let i = 0; i <= 10; i++) {\n      const value = extent[0] + (extent[1] - extent[0]) * (i / 10);\n      gradient.append('stop')\n        .attr('offset', `${i * 10}%`)\n        .attr('stop-color', colorScale(value));\n    }\n\n    // Render gradient bar\n    parentGroup.append('rect')\n      .attr('x', startX)\n      .attr('y', y)\n      .attr('width', 80)\n      .attr('height', 10)\n      .attr('rx', 2)\n      .attr('ry', 2)\n      .attr('fill', `url(#${gradientId})`);\n\n    // Add min/max labels\n    parentGroup.append('text')\n      .attr('x', startX)\n      .attr('y', y + 22)\n      .style('font-size', '8px')\n      .text(extent[0].toFixed(1));\n\n    parentGroup.append('text')\n      .attr('x', startX + 80)\n      .attr('y', y + 22)\n      .attr('text-anchor', 'end')\n      .style('font-size', '8px')\n      .text(extent[1].toFixed(1));\n  }\n\n  private setupInteractions(): void {\n    if (!this.svg || !this.data) return;\n\n    // Cell interactions\n    this.svg.selectAll('.oncoprint-matrix rect')\n      .on('click', (event, d) => {\n        const element = event.target as SVGRectElement;\n        const gene = element.getAttribute('data-gene')!;\n        const sample = element.getAttribute('data-sample')!;\n        const variant = element.getAttribute('data-variant');\n        \n        this.emit('cellClick', { gene, sample, variant });\n      })\n      .on('mouseenter', (event, d) => {\n        if (!this.config.tooltips) return;\n        // Tooltip implementation would go here\n      });\n\n    // Gene label interactions\n    this.svg.selectAll('.gene-labels text')\n      .on('click', (event, d) => {\n        const gene = (event.target as SVGTextElement).textContent!;\n        this.emit('geneClick', { gene });\n      });\n\n    // Sample label interactions\n    this.svg.selectAll('.sample-labels text')\n      .on('click', (event, d) => {\n        const sample = (event.target as SVGTextElement).textContent!;\n        this.emit('sampleClick', { sample });\n      });\n  }\n\n  private updateColorManager(): void {\n    if (!this.data) return;\n    \n    const variants = Array.from(new Set(this.data.mutations.map(m => m.variantType)));\n    variants.forEach(variant => {\n      this.colorManager.getColor(variant);\n    });\n  }\n\n  private updateOrdering(): void {\n    if (!this.data) return;\n\n    // Update gene order - default to top 25 most frequently mutated genes\n    switch (this.config.sortGenes) {\n      case 'frequency':\n        this.geneOrder = DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n        break;\n      case 'alphabetical':\n        const limitedGenes = DataProcessor.sortGenesByFrequency(this.data, true, 25);\n        this.geneOrder = limitedGenes.sort();\n        break;\n      case 'custom':\n        this.geneOrder = this.config.customGeneOrder?.filter(g => this.data!.genes.includes(g)) || \n                        DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n        break;\n      default:\n        this.geneOrder = DataProcessor.sortGenesByFrequency(this.data, true, 25).reverse();\n    }\n\n    // Update sample order - apply split with current sort settings if enabled\n    if (this.config.splitBy?.field) {\n      // Re-apply split with current sort configuration to ensure proper ordering within groups\n      this.data = DataProcessor.applySplitBy(\n        this.data, \n        this.config.splitBy.field,\n        this.config.sortSamples,\n        this.config.customSampleOrder,\n        this.geneOrder\n      );\n      this.sampleOrder = [...this.data.samples];\n    } else {\n      // Normal sorting when no split is active\n      switch (this.config.sortSamples) {\n        case 'mutation_load':\n          this.sampleOrder = DataProcessor.sortSamplesByMutationLoad(this.data, true);\n          break;\n        case 'alphabetical':\n          this.sampleOrder = [...this.data.samples].sort();\n          break;\n        case 'custom':\n          this.sampleOrder = this.config.customSampleOrder?.filter(s => this.data!.samples.includes(s)) || this.data.samples;\n          break;\n        case 'oncoprint':\n          this.sampleOrder = DataProcessor.sortSamplesForOncoprint(this.data, this.geneOrder);\n          break;\n        default:\n          // Default to oncoprint clustering for best visual effect\n          this.sampleOrder = DataProcessor.sortSamplesForOncoprint(this.data, this.geneOrder).reverse();\n      }\n    }\n  }\n\n  private createMutationMatrix(): Record<string, Record<string, ProcessedMutation | ProcessedMutation[] | null>> {\n    return DataProcessor.getMutationMatrix(this.data!);\n  }\n\n  private calculateDimensions(): RendererDimensions {\n    const containerRect = this.container.getBoundingClientRect();\n    let availableWidth = containerRect.width || 1000;\n    let availableHeight = containerRect.height || 700;\n\n    // If we have data, calculate what dimensions we need and scale to fit if necessary\n    if (this.data && this.geneOrder.length > 0 && this.sampleOrder.length > 0) {\n      let cellWidth = this.config.cellWidth || 10;\n      let cellHeight = this.config.cellHeight || 20;\n      \n      const geneLabelWidth = this.config.geneLabels ? 120 : 0;\n      const marginLeft = 20;\n      const marginRight = 80; // Space for frequency labels on right\n      const marginTop = 20;\n      \n      // Calculate matrix width including gaps for split visualization\n      const matrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n        this.getTotalWidthWithGaps() : \n        this.sampleOrder.length * cellWidth;\n      \n      // Calculate metadata tracks height\n      const metadataTracksHeight = this.getMetadataTracksHeight();\n      \n      // Calculate matrix height\n      const matrixHeight = this.geneOrder.length * cellHeight;\n      \n      // Calculate legend height\n      let legendHeight = 0;\n      if (this.config.legend) {\n        legendHeight += 60; // Base legend height\n        const metadataFields = this.getActiveMetadataTracks();\n        if (metadataFields.length > 0) {\n          legendHeight += metadataFields.length * 25;\n        }\n      }\n      \n      // Calculate required dimensions\n      const marginBottom = 80 + (this.config.sampleLabels ? 100 : 0);\n      const requiredWidth = marginLeft + geneLabelWidth + matrixWidth + marginRight;\n      const requiredHeight = marginTop + metadataTracksHeight + matrixHeight + \n                            (this.config.legend ? 30 + legendHeight : 0) + marginBottom;\n      \n      // Calculate scaling factors to fit content in available space\n      const widthScale = availableWidth / requiredWidth;\n      const heightScale = availableHeight / requiredHeight;\n      const scale = Math.min(widthScale, heightScale, 1); // Don't scale up, only down\n      \n      // Apply scaling to cell dimensions if we need to scale down\n      if (scale < 1) {\n        cellWidth = Math.max(1, cellWidth * scale); // Minimum cell width of 1px\n        cellHeight = Math.max(1, cellHeight * scale); // Minimum cell height of 1px\n        \n        console.log(`Scaling visualization by ${scale.toFixed(2)} to fit container`);\n        console.log(`Container: ${availableWidth} x ${availableHeight}, Required: ${requiredWidth} x ${requiredHeight}`);\n        console.log(`Original cell size: ${this.config.cellWidth || 10} x ${this.config.cellHeight || 20}`);\n        console.log(`Scaled cell size: ${cellWidth} x ${cellHeight}`);\n        console.log(`Sample count: ${this.sampleOrder.length}, Gene count: ${this.geneOrder.length}`);\n      }\n      \n      // Recalculate with scaled cell dimensions\n      const scaledMatrixWidth = this.data?.sampleGroups && this.config.splitBy ? \n        this.getTotalWidthWithGaps(cellWidth) : \n        this.sampleOrder.length * cellWidth;\n      const scaledMatrixHeight = this.geneOrder.length * cellHeight;\n      \n      const finalWidth = Math.min(availableWidth, marginLeft + geneLabelWidth + scaledMatrixWidth + marginRight);\n      const finalHeight = Math.min(availableHeight, marginTop + metadataTracksHeight + scaledMatrixHeight + \n                                  (this.config.legend ? 30 + legendHeight : 0) + marginBottom);\n      \n      return {\n        width: finalWidth,\n        height: finalHeight,\n        cellWidth,\n        cellHeight,\n        geneLabelWidth: this.config.geneLabels ? 120 : 0,\n        sampleLabelHeight: this.config.sampleLabels ? 100 : 0,\n        metadataTrackHeight: this.config.metadataTrackHeight || 15,\n        legendWidth: 0,\n        marginTop: 20,\n        marginRight: 80,\n        marginBottom: 80 + (this.config.sampleLabels ? 100 : 0),\n        marginLeft: 20\n      };\n    }\n\n    return {\n      width: availableWidth,\n      height: availableHeight,\n      cellWidth: this.config.cellWidth || 10,\n      cellHeight: this.config.cellHeight || 20,\n      geneLabelWidth: this.config.geneLabels ? 120 : 0,\n      sampleLabelHeight: this.config.sampleLabels ? 100 : 0,\n      metadataTrackHeight: this.config.metadataTrackHeight || 15,\n      legendWidth: 0,\n      marginTop: 20,\n      marginRight: 80,\n      marginBottom: 80 + (this.config.sampleLabels ? 100 : 0),\n      marginLeft: 20\n    };\n  }\n\n  private getMetadataTracksHeight(): number {\n    const activeTracks = this.getActiveMetadataTracks();\n    let totalHeight = 0;\n    const trackSpacing = this.config.metadata?.trackSpacing || 3;\n    \n    // Add height for metadata tracks\n    activeTracks.forEach((track, index) => {\n      const trackHeight = track.height || this.dimensions.metadataTrackHeight;\n      totalHeight += trackHeight;\n      if (index < activeTracks.length - 1) {\n        totalHeight += trackSpacing;\n      }\n    });\n    \n    // Add extra gap between metadata and main matrix\n    if (activeTracks.length > 0) {\n      totalHeight += 10;\n    }\n    \n    // Add height for group headers if split is enabled\n    if (this.data?.sampleGroups && this.config.splitBy) {\n      const showGroupHeaders = this.config.splitBy.showGroupHeaders !== false;\n      const showGroupCounts = this.config.splitBy.showGroupCounts !== false;\n      \n      if (showGroupHeaders || showGroupCounts) {\n        let headerHeight = 0;\n        if (showGroupHeaders) headerHeight += 15;\n        if (showGroupCounts) headerHeight += 15;\n        totalHeight += headerHeight + 10; // Add some padding\n      }\n    }\n    \n    return totalHeight;\n  }\n\n  private getDefaultConfig(config: OncoprintConfig): OncoprintConfig {\n    return {\n      geneList: config.geneList || [],\n      sampleList: config.sampleList || [],\n      cellWidth: config.cellWidth || 10,\n      cellHeight: config.cellHeight || 20,\n      geneLabels: config.geneLabels !== false,\n      sampleLabels: config.sampleLabels || false,\n      variantColors: config.variantColors || DEFAULT_VARIANT_COLORS,\n      metadataFields: config.metadataFields || [],\n      metadataTrackHeight: config.metadataTrackHeight || 15,\n      sortGenes: config.sortGenes || 'frequency',\n      sortSamples: config.sortSamples || 'oncoprint', // Default to oncoprint clustering\n      customGeneOrder: config.customGeneOrder || [],\n      customSampleOrder: config.customSampleOrder || [],\n      tooltips: config.tooltips !== false,\n      exportable: config.exportable !== false,\n      resizable: config.resizable !== false,\n      showPercentages: config.showPercentages !== false, // Show percentages by default\n      showTotals: config.showTotals || false,\n      legend: config.legend !== false,\n      metadata: config.metadata || { tracks: [] }\n    };\n  }\n\n  // Runtime API methods for metadata track management\n  public addMetadataTrack(trackConfig: MetadataTrackConfig): void {\n    if (!this.config.metadata) {\n      this.config.metadata = { tracks: [] };\n    }\n    if (!this.config.metadata.tracks) {\n      this.config.metadata.tracks = [];\n    }\n    \n    // Remove existing track with same field if any\n    this.config.metadata.tracks = this.config.metadata.tracks.filter(t => t.field !== trackConfig.field);\n    \n    // Add new track\n    this.config.metadata.tracks.push({ visible: true, ...trackConfig });\n    \n    this.render();\n  }\n\n  public removeMetadataTrack(fieldName: string): void {\n    if (this.config.metadata?.tracks) {\n      this.config.metadata.tracks = this.config.metadata.tracks.filter(t => t.field !== fieldName);\n      this.render();\n    }\n  }\n\n  public updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void {\n    if (this.config.metadata?.tracks) {\n      const trackIndex = this.config.metadata.tracks.findIndex(t => t.field === fieldName);\n      if (trackIndex >= 0) {\n        this.config.metadata.tracks[trackIndex] = { \n          ...this.config.metadata.tracks[trackIndex], \n          ...updates \n        };\n        this.render();\n      }\n    }\n  }\n\n  public showMetadataTrack(fieldName: string): void {\n    this.updateMetadataTrack(fieldName, { visible: true });\n  }\n\n  public hideMetadataTrack(fieldName: string): void {\n    this.updateMetadataTrack(fieldName, { visible: false });\n  }\n\n  public reorderMetadataTracks(fieldOrder: string[]): void {\n    if (this.config.metadata?.tracks) {\n      const orderedTracks: MetadataTrackConfig[] = [];\n      \n      fieldOrder.forEach((field, index) => {\n        const track = this.config.metadata!.tracks!.find(t => t.field === field);\n        if (track) {\n          orderedTracks.push({ ...track, order: index });\n        }\n      });\n      \n      // Add any tracks not in fieldOrder at the end\n      this.config.metadata.tracks.forEach(track => {\n        if (!fieldOrder.includes(track.field)) {\n          orderedTracks.push({ ...track, order: fieldOrder.length });\n        }\n      });\n      \n      this.config.metadata.tracks = orderedTracks;\n      this.render();\n    }\n  }\n\n  public getMetadataConfig(): MetadataTrackConfig[] {\n    return this.config.metadata?.tracks || [];\n  }\n\n  public setMetadataConfig(tracks: MetadataTrackConfig[]): void {\n    if (!this.config.metadata) {\n      this.config.metadata = {};\n    }\n    this.config.metadata.tracks = tracks;\n    this.render();\n  }\n\n  public getAvailableMetadataFields(): string[] {\n    return this.data?.metadata.fields || [];\n  }\n}","import { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  OncoprintConfig,\n  ValidationResult,\n  MetadataTrackConfig,\n  CohortInfo\n} from '../types';\nimport { MafParser, MetadataParser } from '../parsers';\nimport { DataProcessor } from './DataProcessor';\nimport { OncoprintRenderer } from '../renderers';\nimport { EventEmitter } from '../utils';\n\nexport class OncoprintVisualizer extends EventEmitter {\n  private container: HTMLElement;\n  private renderer: OncoprintRenderer;\n  private processedData: ProcessedData | null = null;\n  private rawMafData: MafData[] = [];\n  private rawMetadataData: MetadataRow[] = [];\n  private cohortInfo?: CohortInfo;\n  private config: OncoprintConfig;\n\n  constructor(container: HTMLElement, config: OncoprintConfig = {}) {\n    super();\n    this.container = container;\n    this.config = config;\n    this.renderer = new OncoprintRenderer(container, config);\n    this.setupRendererEvents();\n  }\n\n  // Data loading methods\n  async loadMafFile(file: File): Promise<ValidationResult> {\n    try {\n      const mafData = await MafParser.parseFromFile(file);\n      const validation = MafParser.validateMafData(mafData);\n      \n      if (validation.isValid) {\n        await this.loadMafData(mafData);\n      }\n      \n      return validation;\n    } catch (error) {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'invalid_format',\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }],\n        warnings: []\n      };\n      this.emit('error', error);\n      return validationResult;\n    }\n  }\n\n  async loadMafData(data: MafData[], cohortInfo?: CohortInfo): Promise<void> {\n    try {\n      this.rawMafData = [...data]; // Store original data\n      this.cohortInfo = cohortInfo; // Store cohort information\n      this.reprocessData();\n      this.emit('dataLoaded', this.processedData);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  async loadMetadataFile(file: File): Promise<ValidationResult> {\n    try {\n      const metadataData = await MetadataParser.parseFromFile(file);\n      const mafSamples = this.processedData?.samples;\n      const validation = MetadataParser.validateMetadata(metadataData, mafSamples);\n      \n      if (validation.isValid) {\n        await this.loadMetadataData(metadataData);\n      }\n      \n      return validation;\n    } catch (error) {\n      const validationResult: ValidationResult = {\n        isValid: false,\n        errors: [{\n          type: 'invalid_format',\n          message: error instanceof Error ? error.message : 'Unknown error occurred'\n        }],\n        warnings: []\n      };\n      this.emit('error', error);\n      return validationResult;\n    }\n  }\n\n  async loadMetadataData(data: MetadataRow[]): Promise<void> {\n    try {\n      if (this.rawMafData.length === 0) {\n        throw new Error('MAF data must be loaded before metadata');\n      }\n\n      this.rawMetadataData = [...data]; // Store original metadata\n      this.reprocessData();\n      this.emit('dataLoaded', this.processedData);\n    } catch (error) {\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  // Rendering methods\n  render(): void {\n    if (!this.processedData) {\n      throw new Error('No data available for rendering. Load MAF data first.');\n    }\n    this.renderer.render();\n  }\n\n  update(config?: Partial<OncoprintConfig>): void {\n    if (config) {\n      const oldConfig = { ...this.config };\n      this.config = { ...this.config, ...config };\n      this.renderer.updateConfig(config);\n      \n      // Check if we need to reprocess data due to filtering or split changes\n      const splitChanged = 'splitBy' in config && (\n        JSON.stringify(config.splitBy) !== JSON.stringify(oldConfig.splitBy)\n      );\n      const needsReprocessing = this.rawMafData.length > 0 && (\n        config.geneList !== undefined ||\n        config.sampleList !== undefined ||\n        splitChanged\n      );\n      \n      if (needsReprocessing) {\n        this.reprocessData();\n      }\n    }\n    this.render();\n  }\n\n  resize(width?: number, height?: number): void {\n    this.renderer.resize(width, height);\n  }\n\n  // Export methods\n  exportSVG(): string {\n    return this.renderer.exportSVG();\n  }\n\n  async exportPNG(options?: { \n    backgroundColor?: string; \n    cropToContent?: boolean; \n    padding?: number;\n    scale?: number;\n  }): Promise<Blob> {\n    return this.renderer.exportPNG(options);\n  }\n\n  exportData(): ProcessedData {\n    if (!this.processedData) {\n      throw new Error('No data available for export');\n    }\n    return { ...this.processedData }; // Return a copy\n  }\n\n  // Selection methods\n  getSelectedGenes(): string[] {\n    return this.config.geneList || [];\n  }\n\n  getSelectedSamples(): string[] {\n    return this.config.sampleList || [];\n  }\n\n  setGeneSelection(genes: string[]): void {\n    this.update({ geneList: genes });\n  }\n\n  setSampleSelection(samples: string[]): void {\n    this.update({ sampleList: samples });\n  }\n\n  // Utility methods\n  getAvailableGenes(): string[] {\n    return this.processedData?.genes || [];\n  }\n\n  getAllGenes(): string[] {\n    // Return all genes from the original data, not just the filtered ones\n    if (this.rawMafData.length === 0) return [];\n    const allGenes = [...new Set(this.rawMafData.map(row => row.Hugo_Symbol))];\n    return allGenes.sort();\n  }\n\n  getAvailableSamples(): string[] {\n    return this.processedData?.samples || [];\n  }\n\n  getAllSamples(): string[] {\n    // Return all samples from the cohort if provided, otherwise from MAF data\n    if (this.cohortInfo?.samples) {\n      return this.cohortInfo.samples.slice();\n    }\n    // Fall back to MAF-based samples\n    if (this.rawMafData.length === 0) return [];\n    const allSamples = [...new Set(this.rawMafData.map(row => row.Tumor_Sample_Barcode))];\n    return allSamples.sort();\n  }\n\n  getPercentageCalculationBase(): number {\n    // Return the base used for percentage calculations\n    return this.processedData?.percentageCalculationBase || 0;\n  }\n\n  getCohortInfo(): { totalSamples: number; hasCohortInfo: boolean; missingSamples?: string[] } {\n    if (this.cohortInfo) {\n      return {\n        totalSamples: this.cohortInfo.totalSamples || this.cohortInfo.samples?.length || 0,\n        hasCohortInfo: true,\n        missingSamples: this.processedData?.cohortInfo?.missingSamples\n      };\n    }\n    return {\n      totalSamples: this.getAllSamples().length,\n      hasCohortInfo: false\n    };\n  }\n\n  getMetadataFields(): string[] {\n    return this.processedData?.metadata.fields || [];\n  }\n\n  getVariantTypes(): string[] {\n    if (!this.processedData) return [];\n    return Array.from(new Set(this.processedData.mutations.map(m => m.variantType))).sort();\n  }\n\n  getMutationStats(): {\n    totalMutations: number;\n    totalGenes: number;\n    totalSamples: number;\n    averageMutationsPerSample: number;\n    averageMutationsPerGene: number;\n  } {\n    if (!this.processedData) {\n      return {\n        totalMutations: 0,\n        totalGenes: 0,\n        totalSamples: 0,\n        averageMutationsPerSample: 0,\n        averageMutationsPerGene: 0\n      };\n    }\n\n    const { mutations, genes, samples } = this.processedData;\n    \n    return {\n      totalMutations: mutations.length,\n      totalGenes: genes.length,\n      totalSamples: samples.length,\n      averageMutationsPerSample: mutations.length / samples.length,\n      averageMutationsPerGene: mutations.length / genes.length\n    };\n  }\n\n  // Configuration methods\n  setConfig(config: OncoprintConfig): void {\n    this.config = config;\n    this.renderer.updateConfig(config);\n  }\n\n  getConfig(): OncoprintConfig {\n    return { ...this.config };\n  }\n\n  // Sorting methods\n  sortGenesByFrequency(descending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedGenes = DataProcessor.sortGenesByFrequency(this.processedData, descending);\n    this.update({ \n      sortGenes: 'custom',\n      customGeneOrder: sortedGenes \n    });\n  }\n\n  sortSamplesByMutationLoad(descending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedSamples = DataProcessor.sortSamplesByMutationLoad(this.processedData, descending);\n    this.update({ \n      sortSamples: 'custom',\n      customSampleOrder: sortedSamples \n    });\n  }\n\n  sortSamplesByMetadata(field: string, ascending: boolean = true): void {\n    if (!this.processedData) return;\n    \n    const sortedSamples = DataProcessor.sortSamplesByMetadata(this.processedData, field, ascending);\n    this.update({ \n      sortSamples: 'custom',\n      customSampleOrder: sortedSamples \n    });\n  }\n\n  // Filter methods\n  filterByMutationFrequency(minFrequency: number, maxFrequency: number = 1): void {\n    if (!this.processedData) return;\n    \n    const frequencies = DataProcessor.calculateMutationFrequencies(this.processedData);\n    const filteredGenes = this.processedData.genes.filter(gene => {\n      const freq = frequencies[gene];\n      return freq >= minFrequency && freq <= maxFrequency;\n    });\n    \n    this.update({ geneList: filteredGenes });\n  }\n\n  filterByMutationCount(minCount: number, maxCount?: number): void {\n    if (!this.processedData) return;\n    \n    const filteredGenes = this.processedData.genes.filter(gene => {\n      const count = this.processedData!.geneCounts[gene];\n      return count >= minCount && (maxCount === undefined || count <= maxCount);\n    });\n    \n    this.update({ geneList: filteredGenes });\n  }\n\n  // Private methods\n  private setupRendererEvents(): void {\n    this.renderer.on('cellClick', (data) => this.emit('cellClick', data));\n    this.renderer.on('geneClick', (data) => this.emit('geneClick', data));\n    this.renderer.on('sampleClick', (data) => this.emit('sampleClick', data));\n    this.renderer.on('dataLoaded', (data) => this.emit('dataLoaded', data));\n    this.renderer.on('error', (error) => this.emit('error', error));\n  }\n\n  private applyDataFilters(data: MafData[]): MafData[] {\n    let filteredData = [...data];\n\n    // Filter by genes if specified\n    if (this.config.geneList && this.config.geneList.length > 0) {\n      filteredData = filteredData.filter(row => \n        this.config.geneList!.includes(row.Hugo_Symbol)\n      );\n    }\n\n    // Filter by samples if specified\n    if (this.config.sampleList && this.config.sampleList.length > 0) {\n      filteredData = filteredData.filter(row => \n        this.config.sampleList!.includes(row.Tumor_Sample_Barcode)\n      );\n    }\n\n    return filteredData;\n  }\n\n  private reprocessData(): void {\n    if (this.rawMafData.length === 0) {\n      throw new Error('No MAF data available for reprocessing');\n    }\n\n    const filteredData = this.applyDataFilters(this.rawMafData);\n    const metadataToUse = this.rawMetadataData.length > 0 ? this.rawMetadataData : undefined;\n    // Pass cohort information for percentage calculation and missing sample handling\n    this.processedData = DataProcessor.processData(filteredData, metadataToUse, this.cohortInfo);\n    \n    // Apply split grouping if configured\n    if (this.config.splitBy?.field) {\n      this.processedData = DataProcessor.applySplitBy(\n        this.processedData, \n        this.config.splitBy.field,\n        this.config.sortSamples,\n        this.config.customSampleOrder,\n        undefined // geneOrder will be determined later in updateOrdering\n      );\n    }\n    \n    this.renderer.setData(this.processedData);\n  }\n\n  private reconstructMafData(): MafData[] {\n    if (!this.processedData) return [];\n    \n    return this.processedData.mutations.map(mutation => ({\n      Hugo_Symbol: mutation.gene,\n      Tumor_Sample_Barcode: mutation.sample,\n      Variant_Classification: mutation.variantType,\n      Protein_Change: mutation.proteinChange,\n      Chromosome: mutation.chromosome,\n      Start_Position: mutation.startPosition,\n      End_Position: mutation.endPosition\n    }));\n  }\n\n  // Metadata track management methods\n  public addMetadataTrack(trackConfig: MetadataTrackConfig): void {\n    this.renderer.addMetadataTrack(trackConfig);\n  }\n\n  public removeMetadataTrack(fieldName: string): void {\n    this.renderer.removeMetadataTrack(fieldName);\n  }\n\n  public updateMetadataTrack(fieldName: string, updates: Partial<MetadataTrackConfig>): void {\n    this.renderer.updateMetadataTrack(fieldName, updates);\n  }\n\n  public showMetadataTrack(fieldName: string): void {\n    this.renderer.showMetadataTrack(fieldName);\n  }\n\n  public hideMetadataTrack(fieldName: string): void {\n    this.renderer.hideMetadataTrack(fieldName);\n  }\n\n  public reorderMetadataTracks(fieldOrder: string[]): void {\n    this.renderer.reorderMetadataTracks(fieldOrder);\n  }\n\n  public getMetadataConfig(): MetadataTrackConfig[] {\n    return this.renderer.getMetadataConfig();\n  }\n\n  public setMetadataConfig(tracks: MetadataTrackConfig[]): void {\n    this.renderer.setMetadataConfig(tracks);\n  }\n\n  public getAvailableMetadataFields(): string[] {\n    return this.renderer.getAvailableMetadataFields();\n  }\n\n  // Cleanup\n  destroy(): void {\n    this.removeAllListeners();\n    this.renderer.removeAllListeners();\n    \n    // Clear container\n    while (this.container.firstChild) {\n      this.container.removeChild(this.container.firstChild);\n    }\n  }\n}","import React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  OncoprintConfig,\n  ProcessedMutation\n} from '../types';\nimport { OncoprintVisualizer } from '../core';\n\nexport interface OncoprintProps {\n  // Data props\n  mafData?: MafData[];\n  metadataData?: MetadataRow[];\n  mafFile?: File;\n  metadataFile?: File;\n\n  // Configuration\n  config?: OncoprintConfig;\n  width?: number;\n  height?: number;\n\n  // Event handlers\n  onGeneClick?: (gene: string) => void;\n  onSampleClick?: (sample: string) => void;\n  onCellClick?: (gene: string, sample: string, mutation?: ProcessedMutation) => void;\n  onDataLoaded?: (data: ProcessedData) => void;\n  onError?: (error: Error) => void;\n  onRenderComplete?: () => void;\n\n  // Style props\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface OncoprintRef {\n  exportSVG: () => string;\n  exportPNG: () => Promise<Blob>;\n  exportData: () => ProcessedData;\n  setGeneSelection: (genes: string[]) => void;\n  setSampleSelection: (samples: string[]) => void;\n  getSelectedGenes: () => string[];\n  getSelectedSamples: () => string[];\n  getMutationStats: () => any;\n  getAvailableGenes: () => string[];\n  getAvailableSamples: () => string[];\n  getMetadataFields: () => string[];\n  sortGenesByFrequency: (descending?: boolean) => void;\n  sortSamplesByMutationLoad: (descending?: boolean) => void;\n  sortSamplesByMetadata: (field: string, ascending?: boolean) => void;\n  filterByMutationFrequency: (minFreq: number, maxFreq?: number) => void;\n  render: () => void;\n  update: (config?: Partial<OncoprintConfig>) => void;\n}\n\nexport const Oncoprint = forwardRef<OncoprintRef, OncoprintProps>(({\n  mafData,\n  metadataData,\n  mafFile,\n  metadataFile,\n  config = {},\n  width,\n  height,\n  onGeneClick,\n  onSampleClick,\n  onCellClick,\n  onDataLoaded,\n  onError,\n  onRenderComplete,\n  className,\n  style\n}, ref) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const visualizerRef = useRef<OncoprintVisualizer | null>(null);\n\n  // Initialize visualizer\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const visualizer = new OncoprintVisualizer(containerRef.current, config);\n    visualizerRef.current = visualizer;\n\n    // Set up event listeners\n    if (onGeneClick) {\n      visualizer.on('geneClick', (data: { gene: string }) => onGeneClick(data.gene));\n    }\n\n    if (onSampleClick) {\n      visualizer.on('sampleClick', (data: { sample: string }) => onSampleClick(data.sample));\n    }\n\n    if (onCellClick) {\n      visualizer.on('cellClick', (data: { gene: string; sample: string; variant?: string }) => {\n        const mutation = data.variant ? { variantType: data.variant } as ProcessedMutation : undefined;\n        onCellClick(data.gene, data.sample, mutation);\n      });\n    }\n\n    if (onDataLoaded) {\n      visualizer.on('dataLoaded', onDataLoaded);\n    }\n\n    if (onError) {\n      visualizer.on('error', onError);\n    }\n\n    return () => {\n      visualizer.destroy();\n    };\n  }, []);\n\n  // Handle config updates\n  useEffect(() => {\n    if (visualizerRef.current) {\n      visualizerRef.current.setConfig(config);\n    }\n  }, [config]);\n\n  // Handle resize\n  useEffect(() => {\n    if (visualizerRef.current && (width || height)) {\n      visualizerRef.current.resize(width, height);\n    }\n  }, [width, height]);\n\n  // Load MAF data from file\n  useEffect(() => {\n    if (mafFile && visualizerRef.current) {\n      visualizerRef.current.loadMafFile(mafFile)\n        .then((validation) => {\n          if (validation.isValid) {\n            visualizerRef.current?.render();\n            onRenderComplete?.();\n          } else {\n            const error = new Error(validation.errors[0]?.message || 'MAF file validation failed');\n            onError?.(error);\n          }\n        })\n        .catch((error) => {\n          onError?.(error);\n        });\n    }\n  }, [mafFile, onError, onRenderComplete]);\n\n  // Load MAF data directly\n  useEffect(() => {\n    if (mafData && visualizerRef.current) {\n      visualizerRef.current.loadMafData(mafData)\n        .then(() => {\n          visualizerRef.current?.render();\n          onRenderComplete?.();\n        })\n        .catch((error) => {\n          onError?.(error);\n        });\n    }\n  }, [mafData, onError, onRenderComplete]);\n\n  // Load metadata from file\n  useEffect(() => {\n    if (metadataFile && visualizerRef.current) {\n      visualizerRef.current.loadMetadataFile(metadataFile)\n        .then((validation) => {\n          if (validation.isValid) {\n            visualizerRef.current?.render();\n            onRenderComplete?.();\n          } else {\n            const error = new Error(validation.errors[0]?.message || 'Metadata file validation failed');\n            onError?.(error);\n          }\n        })\n        .catch((error) => {\n          onError?.(error);\n        });\n    }\n  }, [metadataFile, onError, onRenderComplete]);\n\n  // Load metadata directly\n  useEffect(() => {\n    if (metadataData && visualizerRef.current) {\n      visualizerRef.current.loadMetadataData(metadataData)\n        .then(() => {\n          visualizerRef.current?.render();\n          onRenderComplete?.();\n        })\n        .catch((error) => {\n          onError?.(error);\n        });\n    }\n  }, [metadataData, onError, onRenderComplete]);\n\n  // Expose methods through ref\n  useImperativeHandle(ref, () => ({\n    exportSVG: () => {\n      if (!visualizerRef.current) {\n        throw new Error('Visualizer not initialized');\n      }\n      return visualizerRef.current.exportSVG();\n    },\n\n    exportPNG: async () => {\n      if (!visualizerRef.current) {\n        throw new Error('Visualizer not initialized');\n      }\n      return visualizerRef.current.exportPNG();\n    },\n\n    exportData: () => {\n      if (!visualizerRef.current) {\n        throw new Error('Visualizer not initialized');\n      }\n      return visualizerRef.current.exportData();\n    },\n\n    setGeneSelection: (genes: string[]) => {\n      visualizerRef.current?.setGeneSelection(genes);\n    },\n\n    setSampleSelection: (samples: string[]) => {\n      visualizerRef.current?.setSampleSelection(samples);\n    },\n\n    getSelectedGenes: () => {\n      return visualizerRef.current?.getSelectedGenes() || [];\n    },\n\n    getSelectedSamples: () => {\n      return visualizerRef.current?.getSelectedSamples() || [];\n    },\n\n    getMutationStats: () => {\n      return visualizerRef.current?.getMutationStats();\n    },\n\n    getAvailableGenes: () => {\n      return visualizerRef.current?.getAvailableGenes() || [];\n    },\n\n    getAvailableSamples: () => {\n      return visualizerRef.current?.getAvailableSamples() || [];\n    },\n\n    getMetadataFields: () => {\n      return visualizerRef.current?.getMetadataFields() || [];\n    },\n\n    sortGenesByFrequency: (descending = true) => {\n      visualizerRef.current?.sortGenesByFrequency(descending);\n    },\n\n    sortSamplesByMutationLoad: (descending = true) => {\n      visualizerRef.current?.sortSamplesByMutationLoad(descending);\n    },\n\n    sortSamplesByMetadata: (field: string, ascending = true) => {\n      visualizerRef.current?.sortSamplesByMetadata(field, ascending);\n    },\n\n    filterByMutationFrequency: (minFreq: number, maxFreq = 1) => {\n      visualizerRef.current?.filterByMutationFrequency(minFreq, maxFreq);\n    },\n\n    render: () => {\n      visualizerRef.current?.render();\n    },\n\n    update: (newConfig?: Partial<OncoprintConfig>) => {\n      visualizerRef.current?.update(newConfig);\n    }\n  }), []);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={{\n        width: width || '100%',\n        height: height || '100%',\n        ...style\n      }}\n    />\n  );\n});\n\nOncoprint.displayName = 'Oncoprint';","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  MafData, \n  MetadataRow, \n  ProcessedData, \n  OncoprintConfig,\n  ValidationResult\n} from '../../types';\nimport { OncoprintVisualizer } from '../../core';\n\nexport interface UseOncoprintOptions {\n  container?: HTMLElement | null;\n  config?: OncoprintConfig;\n  autoRender?: boolean;\n}\n\nexport interface UseOncoprintReturn {\n  // State\n  data: ProcessedData | null;\n  isLoading: boolean;\n  error: Error | null;\n  \n  // Data loading methods\n  loadMafFile: (file: File) => Promise<ValidationResult>;\n  loadMafData: (data: MafData[]) => Promise<void>;\n  loadMetadataFile: (file: File) => Promise<ValidationResult>;\n  loadMetadataData: (data: MetadataRow[]) => Promise<void>;\n  \n  // Rendering methods\n  render: () => void;\n  update: (config?: Partial<OncoprintConfig>) => void;\n  resize: (width?: number, height?: number) => void;\n  \n  // Export methods\n  exportSVG: () => string;\n  exportPNG: () => Promise<Blob>;\n  exportData: () => ProcessedData;\n  \n  // Selection methods\n  selectedGenes: string[];\n  selectedSamples: string[];\n  setGeneSelection: (genes: string[]) => void;\n  setSampleSelection: (samples: string[]) => void;\n  \n  // Analysis methods\n  availableGenes: string[];\n  availableSamples: string[];\n  metadataFields: string[];\n  mutationStats: ReturnType<OncoprintVisualizer['getMutationStats']>;\n  sortGenesByFrequency: (descending?: boolean) => void;\n  sortSamplesByMutationLoad: (descending?: boolean) => void;\n  sortSamplesByMetadata: (field: string, ascending?: boolean) => void;\n  filterByMutationFrequency: (minFreq: number, maxFreq?: number) => void;\n  \n  // Visualizer instance (for advanced usage)\n  visualizer: OncoprintVisualizer | null;\n}\n\nexport function useOncoprint({\n  container,\n  config = {},\n  autoRender = true\n}: UseOncoprintOptions = {}): UseOncoprintReturn {\n  const [data, setData] = useState<ProcessedData | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [selectedGenes, setSelectedGenes] = useState<string[]>([]);\n  const [selectedSamples, setSelectedSamples] = useState<string[]>([]);\n  const [availableGenes, setAvailableGenes] = useState<string[]>([]);\n  const [availableSamples, setAvailableSamples] = useState<string[]>([]);\n  const [metadataFields, setMetadataFields] = useState<string[]>([]);\n  const [mutationStats, setMutationStats] = useState<any>({});\n\n  const visualizerRef = useRef<OncoprintVisualizer | null>(null);\n\n  // Initialize visualizer when container is available\n  useEffect(() => {\n    if (!container) return;\n\n    const visualizer = new OncoprintVisualizer(container, config);\n    visualizerRef.current = visualizer;\n\n    // Set up event listeners\n    visualizer.on('dataLoaded', (loadedData: ProcessedData) => {\n      setData(loadedData);\n      setAvailableGenes(visualizer.getAvailableGenes());\n      setAvailableSamples(visualizer.getAvailableSamples());\n      setMetadataFields(visualizer.getMetadataFields());\n      setMutationStats(visualizer.getMutationStats());\n      setIsLoading(false);\n      setError(null);\n    });\n\n    visualizer.on('error', (err: Error) => {\n      setError(err);\n      setIsLoading(false);\n    });\n\n    return () => {\n      visualizer.destroy();\n    };\n  }, [container, config]);\n\n  // Data loading methods\n  const loadMafFile = useCallback(async (file: File): Promise<ValidationResult> => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const validation = await visualizerRef.current.loadMafFile(file);\n      if (validation.isValid && autoRender) {\n        visualizerRef.current.render();\n      }\n      return validation;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unknown error');\n      setError(error);\n      setIsLoading(false);\n      throw error;\n    }\n  }, [autoRender]);\n\n  const loadMafData = useCallback(async (mafData: MafData[]): Promise<void> => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await visualizerRef.current.loadMafData(mafData);\n      if (autoRender) {\n        visualizerRef.current.render();\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unknown error');\n      setError(error);\n      setIsLoading(false);\n      throw error;\n    }\n  }, [autoRender]);\n\n  const loadMetadataFile = useCallback(async (file: File): Promise<ValidationResult> => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const validation = await visualizerRef.current.loadMetadataFile(file);\n      if (validation.isValid && autoRender) {\n        visualizerRef.current.render();\n      }\n      return validation;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unknown error');\n      setError(error);\n      setIsLoading(false);\n      throw error;\n    }\n  }, [autoRender]);\n\n  const loadMetadataData = useCallback(async (metadataData: MetadataRow[]): Promise<void> => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      await visualizerRef.current.loadMetadataData(metadataData);\n      if (autoRender) {\n        visualizerRef.current.render();\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Unknown error');\n      setError(error);\n      setIsLoading(false);\n      throw error;\n    }\n  }, [autoRender]);\n\n  // Rendering methods\n  const render = useCallback(() => {\n    visualizerRef.current?.render();\n  }, []);\n\n  const update = useCallback((newConfig?: Partial<OncoprintConfig>) => {\n    visualizerRef.current?.update(newConfig);\n  }, []);\n\n  const resize = useCallback((width?: number, height?: number) => {\n    visualizerRef.current?.resize(width, height);\n  }, []);\n\n  // Export methods\n  const exportSVG = useCallback((): string => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n    return visualizerRef.current.exportSVG();\n  }, []);\n\n  const exportPNG = useCallback(async (): Promise<Blob> => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n    return visualizerRef.current.exportPNG();\n  }, []);\n\n  const exportData = useCallback((): ProcessedData => {\n    if (!visualizerRef.current) {\n      throw new Error('Visualizer not initialized');\n    }\n    return visualizerRef.current.exportData();\n  }, []);\n\n  // Selection methods\n  const setGeneSelection = useCallback((genes: string[]) => {\n    setSelectedGenes(genes);\n    visualizerRef.current?.setGeneSelection(genes);\n  }, []);\n\n  const setSampleSelection = useCallback((samples: string[]) => {\n    setSelectedSamples(samples);\n    visualizerRef.current?.setSampleSelection(samples);\n  }, []);\n\n  // Analysis methods\n  const sortGenesByFrequency = useCallback((descending = true) => {\n    visualizerRef.current?.sortGenesByFrequency(descending);\n  }, []);\n\n  const sortSamplesByMutationLoad = useCallback((descending = true) => {\n    visualizerRef.current?.sortSamplesByMutationLoad(descending);\n  }, []);\n\n  const sortSamplesByMetadata = useCallback((field: string, ascending = true) => {\n    visualizerRef.current?.sortSamplesByMetadata(field, ascending);\n  }, []);\n\n  const filterByMutationFrequency = useCallback((minFreq: number, maxFreq = 1) => {\n    visualizerRef.current?.filterByMutationFrequency(minFreq, maxFreq);\n  }, []);\n\n  return {\n    // State\n    data,\n    isLoading,\n    error,\n    \n    // Data loading methods\n    loadMafFile,\n    loadMafData,\n    loadMetadataFile,\n    loadMetadataData,\n    \n    // Rendering methods\n    render,\n    update,\n    resize,\n    \n    // Export methods\n    exportSVG,\n    exportPNG,\n    exportData,\n    \n    // Selection methods\n    selectedGenes,\n    selectedSamples,\n    setGeneSelection,\n    setSampleSelection,\n    \n    // Analysis methods\n    availableGenes,\n    availableSamples,\n    metadataFields,\n    mutationStats,\n    sortGenesByFrequency,\n    sortSamplesByMutationLoad,\n    sortSamplesByMetadata,\n    filterByMutationFrequency,\n    \n    // Visualizer instance\n    visualizer: visualizerRef.current\n  };\n}"],"names":["d3","forwardRef","useRef","useEffect","useImperativeHandle","_jsx","useState","useCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;MAEa,SAAS,CAAA;AAcpB,IAAA,aAAa,aAAa,CAAC,IAAU,EAAA;QACnC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AAChD,QAAA,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;;AAGrE,IAAA,OAAO,eAAe,CAAC,OAAe,EAAE,YAAoB,IAAI,EAAA;QAC9D,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;AACxC,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,YAAA,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;;QAGlC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;QAC5D,MAAM,IAAI,GAAc,EAAE;AAE1B,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;YACxC,IAAI,MAAM,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;AACpC,gBAAA,OAAO,CAAC,IAAI,CAAC,CAAA,KAAA,EAAQ,CAAC,GAAG,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAC,MAAM,CAAA,sBAAA,EAAyB,OAAO,CAAC,MAAM,CAAA,CAAE,CAAC;gBACzF;;YAGF,MAAM,GAAG,GAAQ,EAAE;YACnB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAI;gBAChC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE;AACnC,gBAAA,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;oBACzB,IAAI,MAAM,KAAK,gBAAgB,IAAI,MAAM,KAAK,cAAc,EAAE;wBAC5D,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;AACpC,wBAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AACpB,4BAAA,GAAG,CAAC,MAAM,CAAC,GAAG,QAAQ;;;yBAEnB;AACL,wBAAA,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK;;;AAGzB,aAAC,CAAC;AAEF,YAAA,IAAI,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,oBAAoB,IAAI,GAAG,CAAC,sBAAsB,EAAE;AAC7E,gBAAA,IAAI,CAAC,IAAI,CAAC,GAAc,CAAC;;;AAI7B,QAAA,OAAO,IAAI;;AAGb,IAAA,aAAa,YAAY,CAAC,GAAW,EAAA;AACnC,QAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC;AACjC,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,CAAA,8BAAA,EAAiC,GAAG,CAAA,EAAA,EAAK,QAAQ,CAAC,UAAU,CAAA,CAAE,CAAC;;AAEjF,QAAA,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;AACrC,QAAA,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;;IAGrE,OAAO,eAAe,CAAC,IAAe,EAAA;QACpC,MAAM,MAAM,GAAsB,EAAE;QACpC,MAAM,QAAQ,GAAwB,EAAE;AAExC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,MAAM,CAAC,IAAI,CAAC;AACV,gBAAA,IAAI,EAAE,YAAY;AAClB,gBAAA,OAAO,EAAE;AACV,aAAA,CAAC;YACF,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;;;AAI7C,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;AACxB,QAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,IAAG;AACrC,YAAA,IAAI,EAAE,MAAM,IAAI,QAAQ,CAAC,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC;AACV,oBAAA,IAAI,EAAE,gBAAgB;oBACtB,OAAO,EAAE,CAAA,iBAAA,EAAoB,MAAM,CAAA,YAAA,CAAc;oBACjD;AACD,iBAAA,CAAC;;AAEN,SAAC,CAAC;;AAGF,QAAA,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU;AACtC,QAAA,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU;AAC/B,QAAA,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU;QAEjC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAI;AAC1B,YAAA,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE;gBACpB,QAAQ,CAAC,IAAI,CAAC;AACZ,oBAAA,IAAI,EAAE,cAAc;AACpB,oBAAA,OAAO,EAAE,CAAA,2BAAA,EAA8B,KAAK,GAAG,CAAC,CAAA,CAAE;oBAClD,IAAI,EAAE,KAAK,GAAG;AACf,iBAAA,CAAC;;iBACG;AACL,gBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC;;AAG5B,YAAA,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE;gBAC7B,QAAQ,CAAC,IAAI,CAAC;AACZ,oBAAA,IAAI,EAAE,cAAc;AACpB,oBAAA,OAAO,EAAE,CAAA,8BAAA,EAAiC,KAAK,GAAG,CAAC,CAAA,CAAE;oBACrD,IAAI,EAAE,KAAK,GAAG;AACf,iBAAA,CAAC;;iBACG;AACL,gBAAA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,oBAAoB,CAAC;;AAGvC,YAAA,IAAI,GAAG,CAAC,sBAAsB,EAAE;AAC9B,gBAAA,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,sBAAsB,CAAC;;AAEhD,SAAC,CAAC;;AAGF,QAAA,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC;AAC5B,YAAA,mBAAmB,EAAE,aAAa,EAAE,iBAAiB,EAAE,iBAAiB;AACxE,YAAA,cAAc,EAAE,cAAc,EAAE,mBAAmB,EAAE,WAAW;AAChE,YAAA,wBAAwB,EAAE;AAC3B,SAAA,CAAC;AAEF,QAAA,YAAY,CAAC,OAAO,CAAC,OAAO,IAAG;YAC7B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC/B,QAAQ,CAAC,IAAI,CAAC;AACZ,oBAAA,IAAI,EAAE,iBAAiB;oBACvB,OAAO,EAAE,CAAA,gCAAA,EAAmC,OAAO,CAAA;AACpD,iBAAA,CAAC;;AAEN,SAAC,CAAC;AAEF,QAAA,OAAO,CAAC,GAAG,CAAC,CAAA,OAAA,EAAU,IAAI,CAAC,MAAM,CAAA,kBAAA,EAAqB,KAAK,CAAC,IAAI,CAAA,WAAA,EAAc,OAAO,CAAC,IAAI,CAAA,QAAA,CAAU,CAAC;QAErG,OAAO;AACL,YAAA,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,MAAM;YACN;SACD;;AAGK,IAAA,aAAa,eAAe,CAAC,IAAU,EAAA;QAC7C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,YAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAC/B,YAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,MAAgB,CAAC;AACtD,YAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC/D,YAAA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;AACzB,SAAC,CAAC;;IAGI,OAAO,eAAe,CAAC,OAAe,EAAA;QAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxC,QAAA,MAAM,QAAQ,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,MAAM;AACtD,QAAA,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM;QAEvD,OAAO,QAAQ,GAAG,UAAU,GAAG,IAAI,GAAG,GAAG;;;AAhKnB,SAAA,CAAA,gBAAgB,GAAG;IACzC,aAAa;IACb,sBAAsB;IACtB;CACD;AAEuB,SAAA,CAAA,gBAAgB,GAAG;IACzC,gBAAgB;IAChB,YAAY;IACZ,gBAAgB;IAChB;CACD;;MCVU,cAAc,CAAA;AACzB,IAAA,aAAa,aAAa,CAAC,IAAU,EAAA;QACnC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;AAChD,QAAA,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;;AAGrE,IAAA,OAAO,eAAe,CAAC,OAAe,EAAE,YAAoB,IAAI,EAAA;QAC9D,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC;AACxC,QAAA,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACtB,YAAA,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC;;QAGlC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;QAC5D,MAAM,IAAI,GAAkB,EAAE;;QAG9B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE;AAC7C,YAAA,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC;;AAG7E,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;YACxC,IAAI,MAAM,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EAAE;AACpC,gBAAA,OAAO,CAAC,IAAI,CAAC,CAAA,KAAA,EAAQ,CAAC,GAAG,CAAC,CAAA,KAAA,EAAQ,MAAM,CAAC,MAAM,CAAA,sBAAA,EAAyB,OAAO,CAAC,MAAM,CAAA,CAAE,CAAC;gBACzF;;YAGF,MAAM,GAAG,GAAQ,EAAE;YACnB,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAI;gBAChC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE;AACnC,gBAAA,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;;AAEzB,oBAAA,MAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC;oBAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,EAAE;AAC1C,wBAAA,GAAG,CAAC,MAAM,CAAC,GAAG,QAAQ;;yBACjB;AACL,wBAAA,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK;;;AAGzB,aAAC,CAAC;AAEF,YAAA,IAAI,GAAG,CAAC,oBAAoB,EAAE;AAC5B,gBAAA,IAAI,CAAC,IAAI,CAAC,GAAkB,CAAC;;;AAIjC,QAAA,OAAO,IAAI;;AAGb,IAAA,aAAa,YAAY,CAAC,GAAW,EAAA;AACnC,QAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC;AACjC,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,CAAA,mCAAA,EAAsC,GAAG,CAAA,EAAA,EAAK,QAAQ,CAAC,UAAU,CAAA,CAAE,CAAC;;AAEtF,QAAA,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;AACrC,QAAA,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;;IAGrE,OAAO,gBAAgB,CAAC,IAAmB,EAAA;AACzC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,EAAE;QAEhC,MAAM,UAAU,GAAiB,EAAE;QACnC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAEnC,QAAA,MAAM,CAAC,OAAO,CAAC,KAAK,IAAG;AACrB,YAAA,IAAI,KAAK,KAAK,sBAAsB,EAAE;AACpC,gBAAA,UAAU,CAAC,KAAK,CAAC,GAAG,aAAa;gBACjC;;AAGF,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,CAAC;AACrF,YAAA,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC;;YAG/D,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,GAAG;AAC5D,YAAA,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;;YAGpC,IAAI,YAAY,CAAC,IAAI,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE;AACxC,gBAAA,UAAU,CAAC,KAAK,CAAC,GAAG,aAAa;;iBAC5B;AACL,gBAAA,UAAU,CAAC,KAAK,CAAC,GAAG,WAAW;;AAEnC,SAAC,CAAC;AAEF,QAAA,OAAO,UAAU;;AAGnB,IAAA,OAAO,gBAAgB,CAAC,IAAmB,EAAE,UAAqB,EAAA;QAChE,MAAM,MAAM,GAAsB,EAAE;QACpC,MAAM,QAAQ,GAAwB,EAAE;AAExC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,MAAM,CAAC,IAAI,CAAC;AACV,gBAAA,IAAI,EAAE,YAAY;AAClB,gBAAA,OAAO,EAAE;AACV,aAAA,CAAC;YACF,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;;;AAI7C,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;AACxB,QAAA,IAAI,EAAE,sBAAsB,IAAI,QAAQ,CAAC,EAAE;YACzC,MAAM,CAAC,IAAI,CAAC;AACV,gBAAA,IAAI,EAAE,gBAAgB;AACtB,gBAAA,OAAO,EAAE,mDAAmD;AAC5D,gBAAA,MAAM,EAAE;AACT,aAAA,CAAC;;;QAIJ,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;AACvC,YAAA,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC;AAC1E,YAAA,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC;AAExC,YAAA,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,IAAI,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACxE,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM;AAE5D,YAAA,IAAI,iBAAiB,GAAG,GAAG,EAAE;gBAC3B,QAAQ,CAAC,IAAI,CAAC;AACZ,oBAAA,IAAI,EAAE,kBAAkB;oBACxB,OAAO,EAAE,CAAA,KAAA,EAAQ,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,GAAG,CAAC,CAAA,8BAAA;AACrD,iBAAA,CAAC;;YAGJ,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAChG,YAAA,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,QAAQ,CAAC,IAAI,CAAC;AACZ,oBAAA,IAAI,EAAE,kBAAkB;AACxB,oBAAA,OAAO,EAAE,CAAA,EAAG,gBAAgB,CAAC,MAAM,CAAA,0CAAA;AACpC,iBAAA,CAAC;;;QAIN,OAAO,CAAC,GAAG,CAAC,CAAA,oBAAA,EAAuB,IAAI,CAAC,MAAM,CAAA,QAAA,CAAU,CAAC;QAEzD,OAAO;AACL,YAAA,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5B,MAAM;YACN;SACD;;AAGK,IAAA,aAAa,eAAe,CAAC,IAAU,EAAA;QAC7C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,YAAA,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE;AAC/B,YAAA,MAAM,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,MAAgB,CAAC;AACtD,YAAA,MAAM,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;AAC/D,YAAA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;AACzB,SAAC,CAAC;;IAGI,OAAO,eAAe,CAAC,OAAe,EAAA;QAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxC,QAAA,MAAM,QAAQ,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,MAAM;AACtD,QAAA,MAAM,UAAU,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM;QAEvD,OAAO,QAAQ,GAAG,UAAU,GAAG,IAAI,GAAG,GAAG;;AAE5C;;MCxJY,aAAa,CAAA;AACxB,IAAA,OAAO,WAAW,CAAC,GAAc,EAAE,QAAwB,EAAE,UAAuB,EAAA;;QAElF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;QACzE,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;;AAGvF,QAAA,IAAI,OAAiB;AACrB,QAAA,IAAI,yBAAiC;AACrC,QAAA,IAAI,mBAAgD;QAEpD,IAAI,UAAU,EAAE;AACd,YAAA,IAAI,UAAU,CAAC,OAAO,EAAE;;gBAEtB,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE;AAC3C,gBAAA,yBAAyB,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM;gBACrD,MAAM,cAAc,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC9E,gBAAA,mBAAmB,GAAG;AACpB,oBAAA,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC,MAAM;oBACvC,eAAe,EAAE,UAAU,CAAC,OAAO;AACnC,oBAAA,cAAc,EAAE;iBACjB;;AACI,iBAAA,IAAI,UAAU,CAAC,YAAY,EAAE;;gBAElC,OAAO,GAAG,UAAU;AACpB,gBAAA,yBAAyB,GAAG,UAAU,CAAC,YAAY;AACnD,gBAAA,mBAAmB,GAAG;oBACpB,YAAY,EAAE,UAAU,CAAC,YAAY;AACrC,oBAAA,eAAe,EAAE,SAAS;AAC1B,oBAAA,cAAc,EAAE;iBACjB;;iBACI;;gBAEL,OAAO,GAAG,UAAU;AACpB,gBAAA,yBAAyB,GAAG,UAAU,CAAC,MAAM;;;aAE1C;;YAEL,OAAO,GAAG,UAAU;AACpB,YAAA,yBAAyB,GAAG,UAAU,CAAC,MAAM;;;QAI/C,MAAM,SAAS,GAAwB,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;YACrD,IAAI,EAAE,GAAG,CAAC,WAAW;YACrB,MAAM,EAAE,GAAG,CAAC,oBAAoB;YAChC,WAAW,EAAE,GAAG,CAAC,sBAAsB;YACvC,aAAa,EAAE,GAAG,CAAC,cAAc;YACjC,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,aAAa,EAAE,GAAG,CAAC,cAAc;YACjC,WAAW,EAAE,GAAG,CAAC;AAClB,SAAA,CAAC,CAAC;;QAGH,MAAM,UAAU,GAA2B,EAAE;AAC7C,QAAA,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;YACnB,UAAU,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,MAAM;AAClE,SAAC,CAAC;;QAGF,MAAM,YAAY,GAA2B,EAAE;AAC/C,QAAA,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;YACvB,YAAY,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,MAAM;AAC1E,SAAC,CAAC;;AAGF,QAAA,IAAI,iBAAiB,GAAsB;AACzC,YAAA,MAAM,EAAE,EAAE;AACV,YAAA,IAAI,EAAE,EAAE;AACR,YAAA,UAAU,EAAE;SACb;QAED,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAgB,CAAC,QAAQ,CAAC;AAC5D,YAAA,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,sBAAsB,CAAC;YAEhF,MAAM,YAAY,GAAoD,EAAE;AACxE,YAAA,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAG;gBACrB,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE;oBAC9C,YAAY,CAAC,GAAG,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;oBACnD,OAAO,YAAY,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,oBAAoB;;AAEtE,aAAC,CAAC;AAEF,YAAA,iBAAiB,GAAG;gBAClB,MAAM;AACN,gBAAA,IAAI,EAAE,YAAY;gBAClB;aACD;;QAGH,OAAO;YACL,KAAK;YACL,OAAO;YACP,SAAS;YACT,UAAU;YACV,YAAY;AACZ,YAAA,QAAQ,EAAE,iBAAiB;YAC3B,yBAAyB;AACzB,YAAA,UAAU,EAAE;;SAEb;;AAGH,IAAA,OAAO,aAAa,CAAC,IAAmB,EAAE,KAAe,EAAA;AACvD,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrE,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAE5E,MAAM,UAAU,GAA2B,EAAE;AAC7C,QAAA,aAAa,CAAC,OAAO,CAAC,IAAI,IAAG;YAC3B,UAAU,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,MAAM;AAC1E,SAAC,CAAC;QAEF,OAAO;AACL,YAAA,GAAG,IAAI;AACP,YAAA,KAAK,EAAE,aAAa;AACpB,YAAA,SAAS,EAAE,iBAAiB;YAC5B;SACD;;AAGH,IAAA,OAAO,eAAe,CAAC,IAAmB,EAAE,OAAiB,EAAA;AAC3D,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC/E,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QAEhF,MAAM,YAAY,GAA2B,EAAE;AAC/C,QAAA,eAAe,CAAC,OAAO,CAAC,MAAM,IAAG;YAC/B,YAAY,CAAC,MAAM,CAAC,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,MAAM;AAClF,SAAC,CAAC;;QAGF,MAAM,gBAAgB,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE;QAC7C,MAAM,eAAe,GAAoD,EAAE;AAC3E,QAAA,eAAe,CAAC,OAAO,CAAC,MAAM,IAAG;YAC/B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;AAC9B,gBAAA,eAAe,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;;AAExD,SAAC,CAAC;AACF,QAAA,gBAAgB,CAAC,IAAI,GAAG,eAAe;QAEvC,OAAO;AACL,YAAA,GAAG,IAAI;AACP,YAAA,OAAO,EAAE,eAAe;AACxB,YAAA,SAAS,EAAE,iBAAiB;YAC5B,YAAY;AACZ,YAAA,QAAQ,EAAE;SACX;;IAGH,OAAO,oBAAoB,CAAC,IAAmB,EAAE,UAAA,GAAsB,IAAI,EAAE,QAAiB,EAAA;;QAE5F,MAAM,eAAe,GAA2B,EAAE;AAClD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;AACxB,YAAA,MAAM,aAAa,GAAG,IAAI,GAAG,CAC3B,IAAI,CAAC;iBACF,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI;iBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CACtB;AACD,YAAA,eAAe,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,IAAI;AAC5C,SAAC,CAAC;AAEF,QAAA,IAAI,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;YAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;YACrC,MAAM,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;AACrC,YAAA,OAAO,UAAU,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;AACnD,SAAC,CAAC;;AAGF,QAAA,IAAI,QAAQ,IAAI,QAAQ,GAAG,CAAC,EAAE;YAC5B,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;;AAG9C,QAAA,OAAO,WAAW;;AAGpB,IAAA,OAAO,yBAAyB,CAAC,IAAmB,EAAE,aAAsB,IAAI,EAAA;AAC9E,QAAA,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;AACxC,YAAA,OAAO,UAAU,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM;AACvD,SAAC,CAAC;;AAGJ,IAAA,OAAO,uBAAuB,CAAC,IAAmB,EAAE,WAAqB,EAAA;;QAEvE,IAAI,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;;QAGtC,MAAM,gBAAgB,GAA4C,EAAE;AACpE,QAAA,WAAW,CAAC,OAAO,CAAC,IAAI,IAAG;AACzB,YAAA,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE;AAC3B,YAAA,IAAI,CAAC;iBACF,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI;iBAC3B,OAAO,CAAC,CAAC,IAAG;gBACX,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI;AACzC,aAAC,CAAC;AACN,SAAC,CAAC;;AAGF,QAAA,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;YAC9B,MAAM,cAAc,GAAa,EAAE;YACnC,MAAM,gBAAgB,GAAa,EAAE;AAErC,YAAA,cAAc,CAAC,OAAO,CAAC,MAAM,IAAG;gBAC9B,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;AAClC,oBAAA,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC;;qBACtB;AACL,oBAAA,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC;;AAEjC,aAAC,CAAC;;YAGF,cAAc,GAAG,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC;;AAG3D,QAAA,OAAO,cAAc;;IAGvB,OAAO,qBAAqB,CAC1B,IAAmB,EACnB,KAAa,EACb,YAAqB,IAAI,EAAA;AAEzB,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;AACzC,YAAA,OAAO,CAAC,IAAI,CAAC,mBAAmB,KAAK,CAAA,WAAA,CAAa,CAAC;YACnD,OAAO,IAAI,CAAC,OAAO;;AAGrB,QAAA,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;AACrC,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AAC7C,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AAE7C,YAAA,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS;AAAE,gBAAA,OAAO,CAAC;YAC1D,IAAI,MAAM,KAAK,SAAS;AAAE,gBAAA,OAAO,CAAC;YAClC,IAAI,MAAM,KAAK,SAAS;gBAAE,OAAO,EAAE;YAEnC,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;AAC5D,gBAAA,OAAO,SAAS,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM;;YAGtD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE;YACzC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE;YAEzC,IAAI,SAAS,EAAE;gBACb,OAAO,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;;iBACxC;gBACL,OAAO,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;;AAEjD,SAAC,CAAC;;IAGJ,OAAO,iBAAiB,CAAC,IAAmB,EAAA;QAC1C,MAAM,MAAM,GAAmF,EAAE;;AAGjG,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;AACxB,YAAA,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE;AACjB,YAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;gBAC5B,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI;AAC7B,aAAC,CAAC;AACJ,SAAC,CAAC;;QAGF,MAAM,cAAc,GAAwD,EAAE;AAC9E,QAAA,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAG;YAChC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAClC,gBAAA,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE;;AAEpC,YAAA,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACnD,gBAAA,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE;;AAErD,YAAA,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC/D,SAAC,CAAC;;QAGF,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,IAAI,IAAG;AACzC,YAAA,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,IAAG;gBACjD,MAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;AAC9C,gBAAA,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC1B,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;;AAC9B,qBAAA,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACjC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,SAAS;;AAC3B,qBAAA,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;;AAE/B,oBAAA,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG;AACrB,wBAAA,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI;AACvB,wBAAA,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM;AAC3B,wBAAA,WAAW,EAAE,WAAW;AACxB,wBAAA,aAAa,EAAE,CAAA,EAAG,SAAS,CAAC,MAAM,CAAA,UAAA;qBACnC;;AAEL,aAAC,CAAC;AACJ,SAAC,CAAC;AAEF,QAAA,OAAO,MAAM;;IAGf,OAAO,4BAA4B,CAAC,IAAmB,EAAA;QACrD,MAAM,WAAW,GAA2B,EAAE;;AAE9C,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB;AAEnD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;AACxB,YAAA,MAAM,cAAc,GAAG,IAAI,GAAG,CAC5B,IAAI,CAAC;iBACF,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI;iBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CACtB;YACD,WAAW,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,GAAG,YAAY;AACxD,SAAC,CAAC;AAEF,QAAA,OAAO,WAAW;;IAGpB,OAAO,eAAe,CAAC,IAAmB,EAAA;QACxC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;;AAG3E,IAAA,OAAO,YAAY,CACjB,IAAmB,EACnB,UAAkB,EAClB,UAAA,GAAwE,WAAW,EACnF,iBAA4B,EAC5B,SAAoB,EAAA;;AAGpB,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;AAC9C,YAAA,OAAO,CAAC,IAAI,CAAC,gBAAgB,UAAU,CAAA,wCAAA,CAA0C,CAAC;AAClF,YAAA,OAAO,IAAI;;;AAIb,QAAA,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAoB;AAE5C,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;AAC5B,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;YACtD,MAAM,QAAQ,GAAG,KAAK,EAAE,QAAQ,EAAE,IAAI,SAAS;YAE/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAC3B,gBAAA,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC;;YAE5B,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC,IAAI,CAAC,MAAM,CAAC;AACtC,SAAC,CAAC;;AAGF,QAAA,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;;QAG1F,MAAM,YAAY,GAAkB,EAAE;QACtC,IAAI,YAAY,GAAG,CAAC;QAEpB,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,YAAY,CAAC,KAAI;;AAE7C,YAAA,MAAM,kBAAkB,GAAG,IAAI,CAAC,sBAAsB,CACpD,YAAY,EACZ,IAAI,EACJ,UAAU,EACV,iBAAiB,EACjB,SAAS,CACV;YAED,YAAY,CAAC,IAAI,CAAC;gBAChB,KAAK;AACL,gBAAA,OAAO,EAAE,kBAAkB;gBAC3B,KAAK,EAAE,kBAAkB,CAAC,MAAM;AAChC,gBAAA,UAAU,EAAE,YAAY;AACxB,gBAAA,QAAQ,EAAE,YAAY,GAAG,kBAAkB,CAAC,MAAM,GAAG;AACtD,aAAA,CAAC;AAEF,YAAA,YAAY,IAAI,kBAAkB,CAAC,MAAM;AAC3C,SAAC,CAAC;;QAGF,MAAM,cAAc,GAAa,EAAE;AACnC,QAAA,YAAY,CAAC,OAAO,CAAC,KAAK,IAAG;YAC3B,cAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;AACvC,SAAC,CAAC;QAEF,OAAO;AACL,YAAA,GAAG,IAAI;AACP,YAAA,OAAO,EAAE,cAAc;YACvB;SACD;;AAGK,IAAA,OAAO,sBAAsB,CACnC,OAAiB,EACjB,IAAmB,EACnB,UAAA,GAAwE,WAAW,EACnF,iBAA4B,EAC5B,SAAoB,EAAA;;AAGpB,QAAA,MAAM,SAAS,GAAkB;AAC/B,YAAA,GAAG,IAAI;AACP,YAAA,OAAO,EAAE,OAAO;AAChB,YAAA,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YACjE,YAAY,EAAE,MAAM,CAAC,WAAW,CAC9B,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAChE;AACD,YAAA,QAAQ,EAAE;gBACR,GAAG,IAAI,CAAC,QAAQ;AAChB,gBAAA,IAAI,EAAE,MAAM,CAAC,WAAW,CACtB,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;AAEpE;SACF;;QAGD,QAAQ,UAAU;AAChB,YAAA,KAAK,eAAe;gBAClB,OAAO,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,IAAI,CAAC;AACxD,YAAA,KAAK,cAAc;AACjB,gBAAA,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,EAAE;AAC5B,YAAA,KAAK,QAAQ;gBACX,IAAI,iBAAiB,EAAE;;AAErB,oBAAA,MAAM,cAAc,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEzE,oBAAA,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACrE,oBAAA,OAAO,CAAC,GAAG,cAAc,EAAE,GAAG,SAAS,CAAC;;AAE1C,gBAAA,OAAO,OAAO;AAChB,YAAA,KAAK,WAAW;AAChB,YAAA;;gBAEE,MAAM,QAAQ,GAAG,SAAS,IAAI,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;gBAEzG,OAAO,IAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE,QAAQ,CAAC;;;IAI9D,OAAO,qBAAqB,CAAC,IAAmB,EAAA;QAC9C,MAAM,MAAM,GAA2C,EAAE;;AAGzD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,IAAG;AACzB,YAAA,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;AAClB,YAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,IAAG;gBACzB,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;AAC1B,aAAC,CAAC;AACJ,SAAC,CAAC;;AAGF,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;AAC5B,YAAA,MAAM,eAAe,GAAG,IAAI,CAAC;iBAC1B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM;iBAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;;AAGnB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,oBAAA,MAAM,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC;AAChC,oBAAA,MAAM,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC;AAChC,oBAAA,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;AACtB,oBAAA,IAAI,KAAK,KAAK,KAAK,EAAE;AACnB,wBAAA,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;;;;AAI9B,SAAC,CAAC;AAEF,QAAA,OAAO,MAAM;;AAEhB;;ACzdM,MAAM,sBAAsB,GAAG;IACpC,iBAAiB,EAAE,SAAS;IAC5B,WAAW,EAAE,SAAS;IACtB,eAAe,EAAE,SAAS;IAC1B,eAAe,EAAE,SAAS;IAC1B,YAAY,EAAE,SAAS;IACvB,YAAY,EAAE,SAAS;IACvB,iBAAiB,EAAE,SAAS;IAC5B,SAAS,EAAE,SAAS;IACpB,sBAAsB,EAAE,SAAS;IACjC,gBAAgB,EAAE,SAAS;IAC3B,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,SAAS;;MAGL,mBAAmB,CAAA;AAM9B,IAAA,WAAA,CAAY,mBAA2C,sBAAsB,EAAA;QAJrE,IAAA,CAAA,aAAa,GAA2B,EAAE;AAE1C,QAAA,IAAA,CAAA,UAAU,GAAgB,IAAI,GAAG,EAAE;AAGzC,QAAA,IAAI,CAAC,gBAAgB,GAAG,EAAE,GAAG,gBAAgB,EAAE;QAC/C,IAAI,CAAC,YAAY,GAAG;YAClB,GAAGA,aAAE,CAAC,gBAAgB;YACtB,GAAGA,aAAE,CAAC;SACP;;AAGD,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,KAAK,IAAG;AACnD,YAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;AAC5B,SAAC,CAAC;;AAGJ,IAAA,QAAQ,CAAC,OAAe,EAAA;;AAEtB,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE;AAClC,YAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC;;;QAIvC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YAChC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE;;AAG1D,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;;IAGpC,YAAY,GAAA;QACV,OAAO,EAAE,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE;;IAG5D,gBAAgB,GAAA;QACd,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,OAAO,CAAC;;IAGzF,kBAAkB,GAAA;QAChB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;;IAGxC,WAAW,CAAC,OAAe,EAAE,KAAa,EAAA;AACxC,QAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE;AAClC,YAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,KAAK;;aACjC;AACL,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,KAAK;;AAErC,QAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;;IAG5B,kBAAkB,GAAA;;AAEhB,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,KAAK,IAAG;AAChD,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;AAC/B,SAAC,CAAC;AACF,QAAA,IAAI,CAAC,aAAa,GAAG,EAAE;;AAGzB,IAAA,cAAc,CAAC,QAAkB,EAAA;QAC/B,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAEtD,QAAA,OAAO;AACJ,aAAA,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,SAAS;AAC5C,aAAA,GAAG,CAAC,OAAO,KAAK;YACf,OAAO;AACP,YAAA,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC7B,YAAA,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,OAAO;AACnC,SAAA,CAAC;AACD,aAAA,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;;AAEb,YAAA,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,OAAO;gBAAE,OAAO,EAAE;AACtC,YAAA,IAAI,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO;AAAE,gBAAA,OAAO,CAAC;YACrC,OAAO,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC;AAC3C,SAAC,CAAC;;IAGE,mBAAmB,GAAA;;AAEzB,QAAA,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AAC/B,gBAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;AAC1B,gBAAA,OAAO,KAAK;;;;QAKhB,IAAI,QAAQ,GAAG,CAAC;AAChB,QAAA,IAAI,KAAa;AAEjB,QAAA,GAAG;AACD,YAAA,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE;AAClC,YAAA,QAAQ,EAAE;AACZ,SAAC,QAAQ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,GAAG,GAAG;AAErD,QAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;AAC1B,QAAA,OAAO,KAAK;;IAGN,mBAAmB,GAAA;;AAEzB,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;AAC3C,QAAA,MAAM,UAAU,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AACvD,QAAA,MAAM,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;AAEtD,QAAA,OAAO,OAAO,GAAG,CAAA,EAAA,EAAK,UAAU,CAAA,GAAA,EAAM,SAAS,IAAI;;IAGrD,sBAAsB,CAAC,QAAkB,EAAE,MAA8B,EAAA;AACvE,QAAA,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;YACjC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7B,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7B,OAAO,MAAM,GAAG,MAAM;AACxB,SAAC,CAAC;;AAGJ,IAAA,OAAO,YAAY,CAAC,QAAkB,EAAE,YAAqC,EAAA;AAC3E,QAAA,MAAM,OAAO,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC;;AAGrD,QAAA,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAG;AACzB,YAAA,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;AAC3B,SAAC,CAAC;AAEF,QAAA,OAAO,OAAO;;IAGhB,cAAc,GAAA;QACZ,OAAO;YACL,GAAG,IAAI,CAAC,gBAAgB;YACxB,GAAG,IAAI,CAAC;SACT;;AAGH,IAAA,cAAc,CAAC,QAAgC,EAAA;AAC7C,QAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,KAAI;AACpD,YAAA,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE;AAClC,gBAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,KAAK;;iBACjC;AACL,gBAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,KAAK;;AAErC,YAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;AAC5B,SAAC,CAAC;;AAEL;;MClKY,YAAY,CAAA;AAAzB,IAAA,WAAA,GAAA;QACU,IAAA,CAAA,MAAM,GAAoC,EAAE;;IAEpD,EAAE,CAAC,KAAa,EAAE,QAAuB,EAAA;QACvC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AACvB,YAAA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE;;QAEzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;;IAGnC,GAAG,CAAC,KAAa,EAAE,QAAwB,EAAA;AACzC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAAE;QAEzB,IAAI,CAAC,QAAQ,EAAE;AACb,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACzB;;QAGF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,QAAQ,CAAC;QACrE,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;AACnC,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;;AAI7B,IAAA,IAAI,CAAC,KAAa,EAAE,GAAG,IAAW,EAAA;AAChC,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAAE;QAEzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAG;AACpC,YAAA,IAAI;AACF,gBAAA,QAAQ,CAAC,GAAG,IAAI,CAAC;;YACjB,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,CAAA,4BAAA,EAA+B,KAAK,CAAA,EAAA,CAAI,EAAE,KAAK,CAAC;;AAElE,SAAC,CAAC;;IAGJ,IAAI,CAAC,KAAa,EAAE,QAAuB,EAAA;AACzC,QAAA,MAAM,YAAY,GAAG,CAAC,GAAG,IAAW,KAAI;AACtC,YAAA,QAAQ,CAAC,GAAG,IAAI,CAAC;AACjB,YAAA,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;AAC/B,SAAC;AACD,QAAA,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY,CAAC;;AAG9B,IAAA,aAAa,CAAC,KAAa,EAAA;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,IAAI,CAAC;;AAGxC,IAAA,kBAAkB,CAAC,KAAc,EAAA;QAC/B,IAAI,KAAK,EAAE;AACT,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;;aACpB;AACL,YAAA,IAAI,CAAC,MAAM,GAAG,EAAE;;;AAGrB;;ACpCK,MAAO,iBAAkB,SAAQ,YAAY,CAAA;IAUjD,WAAA,CAAY,SAAsB,EAAE,MAAA,GAA0B,EAAE,EAAA;AAC9D,QAAA,KAAK,EAAE;QATD,IAAA,CAAA,GAAG,GAAiE,IAAI;QACxE,IAAA,CAAA,IAAI,GAAyB,IAAI;QAIjC,IAAA,CAAA,SAAS,GAAa,EAAE;QACxB,IAAA,CAAA,WAAW,GAAa,EAAE;AAIhC,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;AAC3C,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;AACtE,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,EAAE;;AAG9C,IAAA,OAAO,CAAC,IAAmB,EAAA;AACzB,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI;QAChB,IAAI,CAAC,kBAAkB,EAAE;QACzB,IAAI,CAAC,cAAc,EAAE;AACrB,QAAA,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC;;AAG/B,IAAA,YAAY,CAAC,MAAgC,EAAA;AAC3C,QAAA,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE;AAC3C,QAAA,IAAI,MAAM,CAAC,aAAa,EAAE;YACxB,IAAI,CAAC,YAAY,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,aAAa,CAAC;AACjE,YAAA,IAAI,IAAI,CAAC,IAAI,EAAE;gBACb,IAAI,CAAC,kBAAkB,EAAE;;;;QAK7B,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;YACrG,IAAI,CAAC,cAAc,EAAE;;AAGvB,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,EAAE;;IAG9C,MAAM,GAAA;AACJ,QAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;;QAGpD,IAAI,CAAC,SAAS,EAAE;QAChB,IAAI,CAAC,oBAAoB,EAAE;QAC3B,IAAI,CAAC,kBAAkB,EAAE;QACzB,IAAI,CAAC,gBAAgB,EAAE;QACvB,IAAI,CAAC,gBAAgB,EAAE;QACvB,IAAI,CAAC,kBAAkB,EAAE;QACzB,IAAI,CAAC,YAAY,EAAE;QACnB,IAAI,CAAC,iBAAiB,EAAE;;IAG1B,MAAM,CAAC,KAAc,EAAE,MAAe,EAAA;AACpC,QAAA,IAAI,KAAK;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK;AACxC,QAAA,IAAI,MAAM;AAAE,YAAA,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,MAAM;AAC3C,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,EAAE;QAC5C,IAAI,CAAC,MAAM,EAAE;;IAGf,SAAS,GAAA;AACP,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AACb,YAAA,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;;AAEhD,QAAA,OAAO,IAAI,aAAa,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAG,CAAC;;AAGhE,IAAA,SAAS,CAAC,OAKT,EAAA;AACC,QAAA,MAAM,QAAQ,GAAG;AACf,YAAA,eAAe,EAAE,OAAO;AACxB,YAAA,aAAa,EAAE,IAAI;AACnB,YAAA,OAAO,EAAE,EAAE;AACX,YAAA,KAAK,EAAE;SACR;QACD,MAAM,IAAI,GAAG,EAAE,GAAG,QAAQ,EAAE,GAAG,OAAO,EAAE;QAExC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;AACrC,YAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACd,gBAAA,MAAM,CAAC,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;gBACjD;;;AAIF,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE;YAChD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;YAC/C,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE;AACpC,YAAA,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE;AAEvB,YAAA,GAAG,CAAC,MAAM,GAAG,MAAK;AAChB,gBAAA,OAAO,CAAC,GAAG,CAAC,CAAA,uBAAA,EAA0B,GAAG,CAAC,KAAK,CAAA,GAAA,EAAM,GAAG,CAAC,MAAM,CAAA,CAAE,CAAC;;AAGlE,gBAAA,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,WAAW,GAAG,GAAG,CAAC,KAAK,EAAE,YAAY,GAAG,GAAG,CAAC,MAAM;gBAEhF,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,EAAE;;AAEtC,oBAAA,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC7C,oBAAA,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC7C,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,OAAO,EAAE,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7E,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,OAAO,EAAE,YAAY,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;;;AAIlF,gBAAA,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC;AACvD,gBAAA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;AAEzD,gBAAA,OAAO,CAAC,GAAG,CAAC,CAAA,yBAAA,EAA4B,UAAU,CAAA,GAAA,EAAM,WAAW,CAAA,SAAA,EAAY,IAAI,CAAC,KAAK,CAAA,CAAA,CAAG,CAAC;;AAG7F,gBAAA,MAAM,CAAC,KAAK,GAAG,UAAU;AACzB,gBAAA,MAAM,CAAC,MAAM,GAAG,WAAW;;gBAG3B,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,KAAK,aAAa,EAAE;AAClE,oBAAA,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe;AACpC,oBAAA,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC;;;gBAIjD,GAAG,CAAC,SAAS,CACX,GAAG,EACH,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,YAAY,EAC3C,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,WAAW,CAC9B;AAED,gBAAA,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,KAAI;oBACrB,IAAI,IAAI,EAAE;wBACR,OAAO,CAAC,GAAG,CAAC,CAAA,uBAAA,EAA0B,IAAI,CAAC,IAAI,CAAA,MAAA,CAAQ,CAAC;wBACxD,OAAO,CAAC,IAAI,CAAC;;yBACR;AACL,wBAAA,MAAM,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;;iBAE7C,EAAE,WAAW,CAAC;AACjB,aAAC;AAED,YAAA,GAAG,CAAC,OAAO,GAAG,CAAC,KAAK,KAAI;AACtB,gBAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC;AAC7C,gBAAA,MAAM,CAAC,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;AAClD,aAAC;AAED,YAAA,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC;YACrD,GAAG,CAAC,GAAG,GAAG,4BAA4B,GAAG,IAAI,CAAC,SAAS,CAAC;AAC1D,SAAC,CAAC;;IAGI,uBAAuB,GAAA;;QAE7B,MAAM,kBAAkB,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;;QAGjD,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE;QACrD,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;AAEvD,QAAA,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC;QACvD,MAAM,UAAU,GAAG,EAAE;QACrB,MAAM,WAAW,GAAG,EAAE;QACtB,MAAM,SAAS,GAAG,EAAE;AACpB,QAAA,MAAM,YAAY,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC;AAE9D,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO;AAChE,YAAA,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC;AAC7C,YAAA,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,iBAAiB;AAE7C,QAAA,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,EAAE;QAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,kBAAkB;QAE/D,IAAI,YAAY,GAAG,CAAC;AACpB,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACtB,YAAY,IAAI,EAAE;AAClB,YAAA,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,EAAE;AACrD,YAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,gBAAA,YAAY,IAAI,cAAc,CAAC,MAAM,GAAG,EAAE;;;QAI9C,MAAM,SAAS,GAAG,UAAU,GAAG,cAAc,GAAG,WAAW,GAAG,WAAW;AACzE,QAAA,MAAM,UAAU,GAAG,SAAS,GAAG,oBAAoB,GAAG,YAAY;AAChD,aAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,YAAY,GAAG,CAAC,CAAC,GAAG,YAAY;;QAG7E,IAAI,CAAC,UAAU,GAAG;AAChB,YAAA,GAAG,kBAAkB;AACrB,YAAA,KAAK,EAAE,SAAS;AAChB,YAAA,MAAM,EAAE,UAAU;AAClB,YAAA,SAAS,EAAE,iBAAiB;AAC5B,YAAA,UAAU,EAAE;SACb;;QAGD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;AACnD,QAAA,MAAM,OAAO,GAAGA,aAAE,CAAC,MAAM,CAAC,aAAa;aACpC,MAAM,CAAC,KAAK;AACZ,aAAA,IAAI,CAAC,OAAO,EAAE,SAAS;AACvB,aAAA,IAAI,CAAC,QAAQ,EAAE,UAAU;AACzB,aAAA,KAAK,CAAC,aAAa,EAAE,mBAAmB;AACxC,aAAA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC;;AAG7B,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG;AAC5B,QAAA,IAAI,CAAC,GAAG,GAAG,OAAO;;QAGlB,IAAI,CAAC,oBAAoB,EAAE;QAC3B,IAAI,CAAC,kBAAkB,EAAE;QACzB,IAAI,CAAC,gBAAgB,EAAE;QACvB,IAAI,CAAC,gBAAgB,EAAE;QACvB,IAAI,CAAC,kBAAkB,EAAE;QACzB,IAAI,CAAC,YAAY,EAAE;;AAGnB,QAAA,MAAM,SAAS,GAAG,IAAI,aAAa,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,EAAG,CAAC;;AAGxE,QAAA,IAAI,CAAC,GAAG,GAAG,WAAW;AACtB,QAAA,IAAI,CAAC,UAAU,GAAG,kBAAkB;AAEpC,QAAA,OAAO,SAAS;;AAGV,IAAA,kBAAkB,CAAC,WAAmB,EAAA;AAC5C,QAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;;AAEpD,YAAA,OAAO,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS;;QAGhD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE;QACjD,IAAI,CAAC,GAAG,CAAC;QACT,IAAI,YAAY,GAAG,CAAC;;QAGpB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AAC1C,YAAA,IAAI,WAAW,IAAI,YAAY,IAAI,WAAW,IAAI,YAAY,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE;;AAEhF,gBAAA,MAAM,YAAY,GAAG,WAAW,GAAG,YAAY;gBAC/C,OAAO,CAAC,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;;;AAGvD,YAAA,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,OAAO;AACtD,YAAA,YAAY,IAAI,KAAK,CAAC,KAAK;;;AAI7B,QAAA,OAAO,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS;;AAGxC,IAAA,qBAAqB,CAAC,SAAkB,EAAA;QAC9C,MAAM,eAAe,GAAG,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS;AAE9D,QAAA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;AACpD,YAAA,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,eAAe;;QAGlD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE;QACjD,IAAI,UAAU,GAAG,CAAC;AAClB,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY;QAE3C,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;AACpC,YAAA,UAAU,IAAI,KAAK,CAAC,KAAK,GAAG,eAAe;YAC3C,IAAI,KAAK,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;AACnC,gBAAA,UAAU,IAAI,OAAO,CAAC;;AAE1B,SAAC,CAAC;AAEF,QAAA,OAAO,UAAU;;IAGX,gBAAgB,GAAA;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;;YAE9E,OAAO;AACL,gBAAA,CAAC,EAAE,CAAC;AACJ,gBAAA,CAAC,EAAE,CAAC;AACJ,gBAAA,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,GAAG;AACnC,gBAAA,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI;aACnC;;QAGH,MAAM,OAAO,GAAG,EAAE;;AAGlB,QAAA,MAAM,kBAAkB,GAAG,IAAI,CAAC,2BAA2B,EAAE;AAE7D,QAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC;AAC3D,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO;YAChE,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,SAAS,CAAC;YACxD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,kBAAkB,CAAC,SAAS;AACxD,QAAA,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,EAAE,GAAG,CAAC;QAC/D,MAAM,YAAY,GAAG,EAAE,GAAG,iBAAiB,GAAG,WAAW,GAAG,kBAAkB,GAAG,EAAE;AAEnF,QAAA,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,EAAE;QAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,kBAAkB,CAAC,UAAU;QAE1E,IAAI,YAAY,GAAG,CAAC;AACpB,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACtB,YAAY,IAAI,EAAE;AAClB,YAAA,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,EAAE;AACrD,YAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,gBAAA,YAAY,IAAI,cAAc,CAAC,MAAM,GAAG,EAAE;;;AAI9C,QAAA,MAAM,kBAAkB,GAAG,EAAE,GAAG,oBAAoB,GAAG,YAAY;AACzC,aAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,YAAY,GAAG,CAAC,CAAC,GAAG,EAAE;AAE3E,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,CAAC;AAC9D,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,kBAAkB,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,CAAC;QAErE,OAAO;AACL,YAAA,CAAC,EAAE,CAAC;AACJ,YAAA,CAAC,EAAE,CAAC;AACJ,YAAA,KAAK,EAAE,UAAU;AACjB,YAAA,MAAM,EAAE;SACT;;IAGK,2BAA2B,GAAA;;QAEjC,OAAO;AACL,YAAA,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE;AACtC,YAAA,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI;SACvC;;IAGK,SAAS,GAAA;;AAEf,QAAAA,aAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;;QAGnD,IAAI,CAAC,GAAG,GAAGA,aAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;aAChC,MAAM,CAAC,KAAK;aACZ,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK;aACnC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM;AACrC,aAAA,KAAK,CAAC,aAAa,EAAE,mBAAmB;AACxC,aAAA,KAAK,CAAC,WAAW,EAAE,MAAM;AACzB,aAAA,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC;AAE5B,QAAA,OAAO,CAAC,GAAG,CAAC,CAAA,6BAAA,EAAgC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAA,GAAA,EAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA,CAAE,CAAC;AAChG,QAAA,OAAO,CAAC,GAAG,CAAC,CAAA,iBAAA,EAAoB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAA,GAAA,EAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,CAAE,CAAC;QAC5F,OAAO,CAAC,GAAG,CAAC,CAAA,gBAAA,EAAmB,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAA,GAAA,EAAM,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAA,CAAE,CAAC;;AAGjI,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS;AACvE,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU;YACvE,OAAO,CAAC,GAAG,CAAC,CAAA,mBAAA,EAAsB,WAAW,CAAA,GAAA,EAAM,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,cAAc,IAAI,CAAC,SAAS,CAAC,MAAM,CAAA,OAAA,CAAS,CAAC;;;IAIpI,gBAAgB,GAAA;QACtB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;QAE7B,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACpC,aAAA,IAAI,CAAC,OAAO,EAAE,kBAAkB;AAChC,aAAA,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAA,CAAA,CAAG,CAAC;;AAGhK,QAAA,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,EAAE;;QAGlD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,KAAI;YACzC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,WAAW,KAAI;gBAC/C,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;gBAC7C,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,CAAC;gBAClD,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC;gBAElF,IAAI,CAAC,QAAQ,EAAE;;AAEb,oBAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;yBACX,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;yBAC3C,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC;AAC7C,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;yBACZ,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;AAChD,yBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,yBAAA,IAAI,CAAC,WAAW,EAAE,IAAI;AACtB,yBAAA,IAAI,CAAC,aAAa,EAAE,MAAM;AAC1B,yBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;;AACxB,qBAAA,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;;AAElC,oBAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;AAC7B,oBAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;AAC7B,oBAAA,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;AAChE,oBAAA,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC;;AAGhE,oBAAA,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM;AACpC,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;yBACX,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;AAC3C,yBAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC;AACnD,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,MAAM,EAAE,MAAM;AACnB,yBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,yBAAA,IAAI,CAAC,WAAW,EAAE,IAAI;AACtB,yBAAA,IAAI,CAAC,aAAa,EAAE,MAAM;AAC1B,yBAAA,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,WAAW;AAC1C,yBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;;oBAG7B,IAAI,QAAQ,GAAG,CAAA,MAAA,EAAS,IAAI,CAAA,UAAA,EAAa,MAAM,CAAA,WAAA,EAAc,SAAS,CAAC,WAAW,CAAA,CAAE;AACpF,oBAAA,IAAI,SAAS,CAAC,aAAa,EAAE;AAC3B,wBAAA,QAAQ,IAAI,CAAA,kBAAA,EAAqB,SAAS,CAAC,aAAa,EAAE;;oBAE5D,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;;AAGpC,oBAAA,MAAM,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM;AACpC,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC;yBAClD,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;AAC3C,yBAAA,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC;AACnD,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,MAAM,EAAE,MAAM;AACnB,yBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,yBAAA,IAAI,CAAC,WAAW,EAAE,IAAI;AACtB,yBAAA,IAAI,CAAC,aAAa,EAAE,MAAM;AAC1B,yBAAA,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,WAAW;AAC1C,yBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;;oBAG7B,IAAI,QAAQ,GAAG,CAAA,MAAA,EAAS,IAAI,CAAA,UAAA,EAAa,MAAM,CAAA,WAAA,EAAc,SAAS,CAAC,WAAW,CAAA,CAAE;AACpF,oBAAA,IAAI,SAAS,CAAC,aAAa,EAAE;AAC3B,wBAAA,QAAQ,IAAI,CAAA,kBAAA,EAAqB,SAAS,CAAC,aAAa,EAAE;;oBAE5D,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;;qBAC/B;;AAEL,oBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC;AAC9D,oBAAA,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM;AACnC,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,yBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;yBACX,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;yBAC3C,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC;AAC7C,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,yBAAA,IAAI,CAAC,MAAM,EAAE,KAAK;AAClB,yBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,yBAAA,IAAI,CAAC,WAAW,EAAE,IAAI;AACtB,yBAAA,IAAI,CAAC,aAAa,EAAE,MAAM;AAC1B,yBAAA,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,WAAW;AACzC,yBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC;;oBAG7B,IAAI,OAAO,GAAG,CAAA,MAAA,EAAS,IAAI,CAAA,UAAA,EAAa,MAAM,CAAA,WAAA,EAAc,QAAQ,CAAC,WAAW,CAAA,CAAE;AAClF,oBAAA,IAAI,QAAQ,CAAC,aAAa,EAAE;AAC1B,wBAAA,OAAO,IAAI,CAAA,kBAAA,EAAqB,QAAQ,CAAC,aAAa,EAAE;;oBAE1D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;;AAEtC,aAAC,CAAC;AACJ,SAAC,CAAC;;IAGI,gBAAgB,GAAA;AACtB,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;YAAE;;QAGxD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACnC,aAAA,IAAI,CAAC,OAAO,EAAE,aAAa;aAC3B,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAA,CAAA,CAAG,CAAC;;QAG/H,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACvC,aAAA,IAAI,CAAC,OAAO,EAAE,kBAAkB;AAChC,aAAA,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAA,CAAA,CAAG,CAAC;QAEpM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,KAAI;YACrC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC;;YAE3G,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAChC,IAAI,CAAC,IAAK,CAAC;iBACR,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI;AAC3B,iBAAA,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CACtB,CAAC,IAAI;YACN,MAAM,SAAS,GAAG,kBAAkB,GAAG,IAAI,CAAC,IAAK,CAAC,yBAAyB;;AAG3E,YAAA,UAAU,CAAC,MAAM,CAAC,MAAM;iBACrB,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC;AAC5C,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,iBAAA,IAAI,CAAC,aAAa,EAAE,KAAK;AACzB,iBAAA,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,GAAG,CAAC,GAAG,IAAI;AACxE,iBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS;iBACzB,IAAI,CAAC,IAAI;AACT,iBAAA,EAAE,CAAC,OAAO,EAAE,MAAK;gBAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC;AAClC,aAAC,CAAC;;AAGJ,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;AAC/B,gBAAA,cAAc,CAAC,MAAM,CAAC,MAAM;AACzB,qBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,qBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,qBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,qBAAA,IAAI,CAAC,aAAa,EAAE,OAAO;AAC3B,qBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;AACzB,qBAAA,KAAK,CAAC,MAAM,EAAE,MAAM;AACpB,qBAAA,IAAI,CAAC,CAAA,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,CAAA,CAAA,CAAG,CAAC;;AAE9C,SAAC,CAAC;;IAGI,kBAAkB,GAAA;AACxB,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY;YAAE;QAE1D,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACnC,aAAA,IAAI,CAAC,OAAO,EAAE,eAAe;AAC7B,aAAA,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAA,CAAA,CAAG,CAAC;QAE3J,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAI;AACzC,YAAA,MAAM,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;AAE3E,YAAA,UAAU,CAAC,MAAM,CAAC,MAAM;AACrB,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,GAAG,EAAE,EAAE;AACZ,iBAAA,IAAI,CAAC,aAAa,EAAE,KAAK;AACzB,iBAAA,IAAI,CAAC,WAAW,EAAE,CAAA,YAAA,EAAe,CAAC,OAAO;AACzC,iBAAA,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI;AACvE,iBAAA,KAAK,CAAC,QAAQ,EAAE,SAAS;iBACzB,IAAI,CAAC,MAAM,CAAC;AACjB,SAAC,CAAC;;IAGI,oBAAoB,GAAA;QAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;;AAG7B,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE;QACnD,IAAI,CAAC,YAAY,CAAC,MAAM;YAAE;QAE1B,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACpC,aAAA,IAAI,CAAC,OAAO,EAAE,iBAAiB;aAC/B,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,SAAS,CAAA,CAAA,CAAG,CAAC;QAE/H,IAAI,QAAQ,GAAG,CAAC;QAChB,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,UAAU,KAAI;AAC/C,YAAA,IAAI,CAAC,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC;gBAAE;YAE7D,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB;YAC7E,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,IAAI,CAAC;YAE5D,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,CAAC;;AAGlE,YAAA,IAAI,WAAW,CAAC,UAAU,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,KAAK,KAAK,EAAE;gBAClF,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,WAAW,CAAC,KAAK;AACpD,gBAAA,IAAI,CAAC,GAAI,CAAC,MAAM,CAAC,MAAM;AACpB,qBAAA,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC;AACzE,qBAAA,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,QAAQ,GAAG,WAAW,GAAG,CAAC;AAChE,qBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,qBAAA,IAAI,CAAC,aAAa,EAAE,KAAK;AACzB,qBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;qBACzB,IAAI,CAAC,KAAK,CAAC;;AAGhB,YAAA,QAAQ,IAAI,WAAW,GAAG,YAAY;AACxC,SAAC,CAAC;;IAGI,uBAAuB,GAAA;;AAE7B,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;AACvE,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,KAAK;gBAC9C,KAAK;AACL,gBAAA,OAAO,EAAE,IAAI;AACb,gBAAA,IAAI,EAAE,MAAe;AACrB,gBAAA,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC;AACrB,aAAA,CAAC,CAAC;;;QAIL,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;AAChC,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;iBACzB,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK;iBACvC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;;AAGpD,QAAA,OAAO,EAAE;;IAGH,kBAAkB,GAAA;AACxB,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO;YAAE;QAEnE,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,KAAK,KAAK;QACvE,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,KAAK,KAAK;AAErE,QAAA,IAAI,CAAC,gBAAgB,IAAI,CAAC,eAAe;YAAE;QAE3C,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACpC,aAAA,IAAI,CAAC,OAAO,EAAE,eAAe;AAC7B,aAAA,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAA,EAAA,EAAK,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAA,CAAA,CAAG,CAAC;AAErK,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY;QAE3C,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,UAAU,KAAI;YACzC,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,UAAU,CAAC;YAC7D,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS;AAC1D,YAAA,MAAM,YAAY,GAAG,WAAW,GAAG,UAAU,GAAG,CAAC;;YAGjD,IAAI,gBAAgB,EAAE;AACpB,gBAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,qBAAA,IAAI,CAAC,GAAG,EAAE,YAAY;AACtB,qBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,qBAAA,IAAI,CAAC,aAAa,EAAE,QAAQ;AAC5B,qBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,qBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;AACzB,qBAAA,KAAK,CAAC,aAAa,EAAE,MAAM;AAC3B,qBAAA,KAAK,CAAC,MAAM,EAAE,MAAM;AACpB,qBAAA,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;;;YAItB,IAAI,eAAe,EAAE;AACnB,gBAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,qBAAA,IAAI,CAAC,GAAG,EAAE,YAAY;AACtB,qBAAA,IAAI,CAAC,GAAG,EAAE,gBAAgB,GAAG,EAAE,GAAG,CAAC;AACnC,qBAAA,IAAI,CAAC,aAAa,EAAE,QAAQ;AAC5B,qBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,qBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;AACzB,qBAAA,KAAK,CAAC,MAAM,EAAE,MAAM;AACpB,qBAAA,IAAI,CAAC,CAAA,GAAA,EAAM,KAAK,CAAC,KAAK,CAAA,CAAA,CAAG,CAAC;;;YAI/B,IAAI,UAAU,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAQ,CAAC,OAAO,IAAI,EAAE;gBAClD,MAAM,KAAK,GAAG,WAAW,GAAG,UAAU,GAAG,OAAO,GAAG,CAAC;AAEpD,gBAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,qBAAA,IAAI,CAAC,IAAI,EAAE,KAAK;AAChB,qBAAA,IAAI,CAAC,IAAI,EAAE,GAAG;AACd,qBAAA,IAAI,CAAC,IAAI,EAAE,KAAK;AAChB,qBAAA,IAAI,CAAC,IAAI,EAAE,EAAE;AACb,qBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,qBAAA,IAAI,CAAC,cAAc,EAAE,CAAC;AACtB,qBAAA,IAAI,CAAC,kBAAkB,EAAE,KAAK,CAAC;;AAEtC,SAAC,CAAC;;AAGI,IAAA,yBAAyB,CAAC,SAAc,EAAE,WAAgC,EAAE,CAAS,EAAA;AAC3F,QAAA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK;QAC/B,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB;;AAG7E,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;QAC1D,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,YAAY,GAAG,WAAW,CAAC,IAAI;;AAGpG,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC;QAEvE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,WAAW,KAAI;AAC/C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;YACvD,MAAM,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;AAE9C,YAAA,IAAI,KAAK,GAAG,SAAS,CAAC;YACtB,IAAI,OAAO,GAAG,EAAE;AAEhB,YAAA,IAAI,KAAK,KAAK,SAAS,EAAE;AACvB,gBAAA,IAAI,WAAW,CAAC,cAAc,EAAE;oBAC9B,MAAM,MAAM,GAAG,WAAW,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC;AACxD,oBAAA,KAAK,GAAG,MAAM,CAAC,KAAK;oBACpB,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC;;qBACpC;oBACL,IAAI,SAAS,KAAK,WAAW,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC1D,wBAAA,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;;yBACpB;wBACL,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEnC,oBAAA,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC;;;AAI3B,YAAA,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM;AACjC,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;AACf,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;iBACf,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC;AAC3C,iBAAA,IAAI,CAAC,QAAQ,EAAE,WAAW,GAAG,CAAC;AAC9B,iBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,iBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,iBAAA,IAAI,CAAC,MAAM,EAAE,KAAK;AAClB,iBAAA,IAAI,CAAC,QAAQ,EAAE,MAAM;AACrB,iBAAA,IAAI,CAAC,YAAY,EAAE,KAAK;AACxB,iBAAA,IAAI,CAAC,aAAa,EAAE,MAAM;AAC1B,iBAAA,IAAI,CAAC,YAAY,EAAE,KAAK,KAAK,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;;AAG/D,YAAA,IAAI,WAAW,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,KAAK,EAAE;AACpE,gBAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAA,EAAG,WAAW,CAAC,KAAK,IAAI,KAAK,KAAK,OAAO,CAAA,CAAE,CAAC;;AAE1E,SAAC,CAAC;;AAGI,IAAA,gBAAgB,CAAC,KAAa,EAAE,SAAiB,EAAE,WAAgC,EAAA;AACzF,QAAA,IAAI,SAAS,KAAK,WAAW,EAAE;;AAE7B,YAAA,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,IAAI;iBACrD,GAAG,CAAC,UAAU,IAAI,UAAU,GAAG,KAAK,CAAC;AACrC,iBAAA,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAa;;AAGpE,YAAA,IAAI,MAAM,GAAG,WAAW,CAAC,MAAM;YAC/B,IAAI,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACnC,gBAAA,MAAM,GAAGA,aAAE,CAAC,MAAM,CAAC,SAAS,CAAqB;;gBAEjD,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE;AAC3B,oBAAA,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;;;AAK3C,YAAA,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;AACjE,gBAAA,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;;AAIjB,YAAA,IAAI,YAAY;AAChB,YAAA,QAAQ,WAAW,CAAC,UAAU;AAC5B,gBAAA,KAAK,SAAS;AAAE,oBAAA,YAAY,GAAGA,aAAE,CAAC,kBAAkB;oBAAE;AACtD,gBAAA,KAAK,QAAQ;AAAE,oBAAA,YAAY,GAAGA,aAAE,CAAC,iBAAiB;oBAAE;AACpD,gBAAA,KAAK,MAAM;AAAE,oBAAA,YAAY,GAAGA,aAAE,CAAC,eAAe;oBAAE;AAChD,gBAAA,KAAK,QAAQ;AAAE,oBAAA,YAAY,GAAGA,aAAE,CAAC,iBAAiB;oBAAE;AACpD,gBAAA;AAAS,oBAAA,YAAY,GAAGA,aAAE,CAAC,gBAAgB;oBAAE;;YAG/C,OAAOA,aAAE,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;;aACjD;;YAEL,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAClC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,IAAI;iBACnC,GAAG,CAAC,UAAU,IAAI,UAAU,GAAG,KAAK,CAAC;iBACrC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS;AAC3B,iBAAA,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,CAAC;AAEF,YAAA,IAAI,WAAW,CAAC,MAAM,EAAE;gBACtB,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;AACrC,oBAAA,OAAOA,aAAE,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;;AACvD,qBAAA,IAAI,OAAO,WAAW,CAAC,MAAM,KAAK,QAAQ,EAAE;;AAEjD,oBAAA,IAAI,WAAW;AACf,oBAAA,QAAQ,WAAW,CAAC,MAAM;AACxB,wBAAA,KAAK,YAAY;AAAE,4BAAA,WAAW,GAAGA,aAAE,CAAC,gBAAgB;4BAAE;AACtD,wBAAA,KAAK,YAAY;4BAAE,WAAW,GAAGA,aAAE,CAAC,gBAAgB,CAAC,MAAM,CAACA,aAAE,CAAC,gBAAgB,CAAC;4BAAE;AAClF,wBAAA,KAAK,SAAS;AAAE,4BAAA,WAAW,GAAGA,aAAE,CAAC,aAAa;4BAAE;AAChD,wBAAA,KAAK,MAAM;AAAE,4BAAA,WAAW,GAAGA,aAAE,CAAC,UAAU;4BAAE;AAC1C,wBAAA;AAAS,4BAAA,WAAW,GAAGA,aAAE,CAAC,gBAAgB;4BAAE;;oBAE9C,OAAOA,aAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;;qBAChD;;AAEL,oBAAA,OAAO,CAAC,KAAa,KAAM,WAAW,CAAC,MAAiC,CAAC,KAAK,CAAC,IAAI,SAAS;;;;AAKhG,YAAA,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,IAAI,EAAE,GAAGA,aAAE,CAAC,gBAAgB;AAC7C,gBAAA,SAAS,CAAC,MAAM,IAAI,EAAE,GAAGA,aAAE,CAAC,gBAAgB,CAAC,MAAM,CAACA,aAAE,CAAC,aAAa,CAAC;AACrE,oBAAAA,aAAE,CAAC,gBAAgB,CAAC,MAAM,CAACA,aAAE,CAAC,aAAa,CAAC,CAAC,MAAM,CAACA,aAAE,CAAC,UAAU,CAAC;YAEvF,OAAOA,aAAE,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;;;IAInD,YAAY,GAAA;AAClB,QAAA,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE;QAEpD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACjF,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAGzD,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU;AACvE,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,YAAY,GAAG,EAAE;QAE9F,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG;AACpC,aAAA,IAAI,CAAC,OAAO,EAAE,QAAQ;AACtB,aAAA,IAAI,CAAC,WAAW,EAAE,aAAa,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,OAAO,CAAA,CAAA,CAAG,CAAC;AAE7G,QAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,aAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,aAAA,IAAI,CAAC,GAAG,EAAE,EAAE;AACZ,aAAA,KAAK,CAAC,aAAa,EAAE,MAAM;AAC3B,aAAA,KAAK,CAAC,WAAW,EAAE,MAAM;aACzB,IAAI,CAAC,gBAAgB,CAAC;;QAGzB,IAAI,QAAQ,GAAG,CAAC;QAChB,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,KAAI;AAC7B,YAAA,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG;AACrC,iBAAA,IAAI,CAAC,WAAW,EAAE,aAAa,QAAQ,CAAA,KAAA,CAAO,CAAC;AAElD,YAAA,SAAS,CAAC,MAAM,CAAC,MAAM;AACpB,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,OAAO,EAAE,EAAE;AAChB,iBAAA,IAAI,CAAC,QAAQ,EAAE,EAAE;AACjB,iBAAA,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;AAE3B,YAAA,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM;AACjC,iBAAA,IAAI,CAAC,GAAG,EAAE,EAAE;AACZ,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,iBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;AACzB,iBAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;AAErB,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACjB,gBAAA,IAAI,CAAC,MAAM,CAAC,OAAO;AAChB,qBAAA,KAAK,CAAC,WAAW,EAAE,KAAK;AACxB,qBAAA,KAAK,CAAC,MAAM,EAAE,MAAM;qBACpB,IAAI,CAAC,SAAS,CAAC;;;AAIpB,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,KAAK,IAAI,CAAC;YACnD,QAAQ,IAAI,SAAS,GAAG,EAAE,GAAG,EAAE,CAAC;AAClC,SAAC,CAAC;;AAGF,QAAA,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,EAAE,CAAC;;IAGrC,qBAAqB,CAAC,WAAgB,EAAE,OAAe,EAAA;QAC7D,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;AAEhB,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE;QACnD,IAAI,CAAC,YAAY,CAAC,MAAM;YAAE;QAE1B,IAAI,QAAQ,GAAG,CAAC;AAChB,QAAA,MAAM,YAAY,GAAG,GAAG,CAAC;QAEzB,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,UAAU,KAAI;AAC/C,YAAA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK;AAC/B,YAAA,IAAI,CAAC,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAAE;AAEjD,YAAA,MAAM,YAAY,GAAG,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;YAC1D,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,YAAY,GAAG,WAAW,CAAC,IAAI;AACpG,YAAA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,IAAI,KAAK;;AAGxC,YAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,iBAAA,IAAI,CAAC,GAAG,EAAE,QAAQ;AAClB,iBAAA,IAAI,CAAC,GAAG,EAAE,OAAO,GAAG,EAAE;AACtB,iBAAA,KAAK,CAAC,aAAa,EAAE,MAAM;AAC3B,iBAAA,KAAK,CAAC,WAAW,EAAE,MAAM;iBACzB,IAAI,CAAC,KAAK,CAAC;AAEd,YAAA,IAAI,SAAS,KAAK,aAAa,EAAE;AAC/B,gBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,+BAA+B,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,CAAC;gBACpG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;;iBACpC;AACL,gBAAA,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,GAAG,EAAE,CAAC;gBACpF,QAAQ,IAAI,YAAY;;AAE5B,SAAC,CAAC;;AAGI,IAAA,+BAA+B,CAAC,WAAgB,EAAE,WAAgC,EAAE,MAAc,EAAE,CAAS,EAAA;AACnH,QAAA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK;;AAG/B,QAAA,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW;QACzC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAC/B;AACG,aAAA,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;aACvD,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS;AAC3B,aAAA,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CACvB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,MAAM;AAAE,YAAA,OAAO,CAAC;AAE5B,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,aAAa,EAAE,WAAW,CAAC;;AAG3E,QAAA,MAAM,QAAQ,GAAG,GAAG,CAAC;QACrB,MAAM,WAAW,GAAG,CAAC;QACrB,IAAI,QAAQ,GAAG,CAAC;QAChB,IAAI,QAAQ,GAAG,CAAC;QAChB,IAAI,YAAY,GAAG,CAAC;QAEpB,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;AAC9B,YAAA,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;AAE/B,YAAA,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG;AACrC,iBAAA,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,MAAM,GAAG,QAAQ,CAAA,EAAA,EAAK,CAAC,GAAG,QAAQ,CAAA,CAAA,CAAG,CAAC;AAExE,YAAA,SAAS,CAAC,MAAM,CAAC,MAAM;AACpB,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,OAAO,EAAE,CAAC;AACf,iBAAA,IAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,iBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,iBAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,iBAAA,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;AAEtB,YAAA,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM;AACjC,iBAAA,IAAI,CAAC,GAAG,EAAE,EAAE;AACZ,iBAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,iBAAA,IAAI,CAAC,IAAI,EAAE,QAAQ;AACnB,iBAAA,KAAK,CAAC,WAAW,EAAE,KAAK;iBACxB,IAAI,CAAC,KAAK,CAAC;AAEd,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,KAAK,IAAI,CAAC;AACnD,YAAA,MAAM,SAAS,GAAG,SAAS,GAAG,EAAE,GAAG,WAAW;;YAG9C,IAAI,QAAQ,GAAG,SAAS,GAAG,QAAQ,IAAI,QAAQ,GAAG,CAAC,EAAE;gBACnD,QAAQ,IAAI,EAAE;gBACd,QAAQ,GAAG,CAAC;;AAEZ,gBAAA,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAA,UAAA,EAAa,MAAM,GAAG,QAAQ,KAAK,CAAC,GAAG,QAAQ,CAAA,CAAA,CAAG,CAAC;;YAGjF,QAAQ,IAAI,SAAS;YACrB,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC;AACjD,SAAC,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC;;AAGjC,IAAA,6BAA6B,CAAC,WAAgB,EAAE,WAAgC,EAAE,MAAc,EAAE,CAAS,EAAA;AACjH,QAAA,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK;;AAG/B,QAAA,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW;QACzC,MAAM,MAAM,GAAG;AACZ,aAAA,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,IAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvD,aAAA,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAa;QAEpE,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE;AAEpB,QAAA,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,IAAKA,aAAE,CAAC,MAAM,CAAC,MAAM,CAAsB;AAC5E,QAAA,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC;;AAGzE,QAAA,MAAM,UAAU,GAAG,CAAA,SAAA,EAAY,KAAK,EAAE;AACtC,QAAA,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE;AAC7C,YAAA,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC;AAEzD,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB;AAC1C,aAAA,IAAI,CAAC,IAAI,EAAE,UAAU;AACrB,aAAA,IAAI,CAAC,IAAI,EAAE,IAAI;AACf,aAAA,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;;AAGrB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AAC5D,YAAA,QAAQ,CAAC,MAAM,CAAC,MAAM;iBACnB,IAAI,CAAC,QAAQ,EAAE,CAAA,EAAG,CAAC,GAAG,EAAE,GAAG;iBAC3B,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;;;AAI1C,QAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,aAAA,IAAI,CAAC,GAAG,EAAE,MAAM;AAChB,aAAA,IAAI,CAAC,GAAG,EAAE,CAAC;AACX,aAAA,IAAI,CAAC,OAAO,EAAE,EAAE;AAChB,aAAA,IAAI,CAAC,QAAQ,EAAE,EAAE;AACjB,aAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,aAAA,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,aAAA,IAAI,CAAC,MAAM,EAAE,QAAQ,UAAU,CAAA,CAAA,CAAG,CAAC;;AAGtC,QAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,aAAA,IAAI,CAAC,GAAG,EAAE,MAAM;AAChB,aAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;AAChB,aAAA,KAAK,CAAC,WAAW,EAAE,KAAK;aACxB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAE7B,QAAA,WAAW,CAAC,MAAM,CAAC,MAAM;AACtB,aAAA,IAAI,CAAC,GAAG,EAAE,MAAM,GAAG,EAAE;AACrB,aAAA,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;AAChB,aAAA,IAAI,CAAC,aAAa,EAAE,KAAK;AACzB,aAAA,KAAK,CAAC,WAAW,EAAE,KAAK;aACxB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;IAGvB,iBAAiB,GAAA;QACvB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;;AAG7B,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,wBAAwB;aACxC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAI;AACxB,YAAA,MAAM,OAAO,GAAG,KAAK,CAAC,MAAwB;YAC9C,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,WAAW,CAAE;YAC/C,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,CAAE;YACnD,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;AAEpD,YAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;AACnD,SAAC;aACA,EAAE,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,CAAC,KAAI;AAC7B,YAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAAE;;AAE7B,SAAC,CAAC;;AAGJ,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB;aACnC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAI;AACxB,YAAA,MAAM,IAAI,GAAI,KAAK,CAAC,MAAyB,CAAC,WAAY;YAC1D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC;AAClC,SAAC,CAAC;;AAGJ,QAAA,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,qBAAqB;aACrC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,KAAI;AACxB,YAAA,MAAM,MAAM,GAAI,KAAK,CAAC,MAAyB,CAAC,WAAY;YAC5D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,CAAC;AACtC,SAAC,CAAC;;IAGE,kBAAkB,GAAA;QACxB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;QAEhB,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;AACjF,QAAA,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAG;AACzB,YAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC;AACrC,SAAC,CAAC;;IAGI,cAAc,GAAA;QACpB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;;AAGhB,QAAA,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS;AAC3B,YAAA,KAAK,WAAW;AACd,gBAAA,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE;gBAClF;AACF,YAAA,KAAK,cAAc;AACjB,gBAAA,MAAM,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;AAC5E,gBAAA,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,IAAI,EAAE;gBACpC;AACF,YAAA,KAAK,QAAQ;gBACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,IAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvE,oBAAA,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE;gBACjF;AACF,YAAA;AACE,gBAAA,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE;;;QAItF,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE;;AAE9B,YAAA,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC,YAAY,CACpC,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EACzB,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,SAAS,CACf;YACD,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;;aACpC;;AAEL,YAAA,QAAQ,IAAI,CAAC,MAAM,CAAC,WAAW;AAC7B,gBAAA,KAAK,eAAe;AAClB,oBAAA,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;oBAC3E;AACF,gBAAA,KAAK,cAAc;AACjB,oBAAA,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;oBAChD;AACF,gBAAA,KAAK,QAAQ;AACX,oBAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,IAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO;oBAClH;AACF,gBAAA,KAAK,WAAW;AACd,oBAAA,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnF;AACF,gBAAA;;AAEE,oBAAA,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE;;;;IAK7F,oBAAoB,GAAA;QAC1B,OAAO,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAK,CAAC;;IAG5C,mBAAmB,GAAA;QACzB,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;AAC5D,QAAA,IAAI,cAAc,GAAG,aAAa,CAAC,KAAK,IAAI,IAAI;AAChD,QAAA,IAAI,eAAe,GAAG,aAAa,CAAC,MAAM,IAAI,GAAG;;QAGjD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YACzE,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE;YAC3C,IAAI,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;AAE7C,YAAA,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC;YACvD,MAAM,UAAU,GAAG,EAAE;AACrB,YAAA,MAAM,WAAW,GAAG,EAAE,CAAC;YACvB,MAAM,SAAS,GAAG,EAAE;;AAGpB,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO;AAChE,gBAAA,IAAI,CAAC,qBAAqB,EAAE;AAC5B,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,SAAS;;AAGrC,YAAA,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,EAAE;;YAG3D,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU;;YAGvD,IAAI,YAAY,GAAG,CAAC;AACpB,YAAA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AACtB,gBAAA,YAAY,IAAI,EAAE,CAAC;AACnB,gBAAA,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,EAAE;AACrD,gBAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;AAC7B,oBAAA,YAAY,IAAI,cAAc,CAAC,MAAM,GAAG,EAAE;;;;AAK9C,YAAA,MAAM,YAAY,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC;YAC9D,MAAM,aAAa,GAAG,UAAU,GAAG,cAAc,GAAG,WAAW,GAAG,WAAW;AAC7E,YAAA,MAAM,cAAc,GAAG,SAAS,GAAG,oBAAoB,GAAG,YAAY;AAChD,iBAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,YAAY,GAAG,CAAC,CAAC,GAAG,YAAY;;AAGjF,YAAA,MAAM,UAAU,GAAG,cAAc,GAAG,aAAa;AACjD,YAAA,MAAM,WAAW,GAAG,eAAe,GAAG,cAAc;AACpD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;;AAGnD,YAAA,IAAI,KAAK,GAAG,CAAC,EAAE;AACb,gBAAA,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC,CAAC;AAC3C,gBAAA,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,KAAK,CAAC,CAAC;AAE7C,gBAAA,OAAO,CAAC,GAAG,CAAC,CAAA,yBAAA,EAA4B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA,iBAAA,CAAmB,CAAC;AAC5E,gBAAA,OAAO,CAAC,GAAG,CAAC,CAAA,WAAA,EAAc,cAAc,CAAA,GAAA,EAAM,eAAe,CAAA,YAAA,EAAe,aAAa,CAAA,GAAA,EAAM,cAAc,CAAA,CAAE,CAAC;gBAChH,OAAO,CAAC,GAAG,CAAC,CAAA,oBAAA,EAAuB,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE,CAAA,GAAA,EAAM,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE,CAAA,CAAE,CAAC;gBACnG,OAAO,CAAC,GAAG,CAAC,CAAA,kBAAA,EAAqB,SAAS,CAAA,GAAA,EAAM,UAAU,CAAA,CAAE,CAAC;AAC7D,gBAAA,OAAO,CAAC,GAAG,CAAC,CAAA,cAAA,EAAiB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAA,cAAA,EAAiB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAA,CAAE,CAAC;;;AAI/F,YAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO;AACtE,gBAAA,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC;AACrC,gBAAA,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,SAAS;YACrC,MAAM,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU;AAE7D,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,UAAU,GAAG,cAAc,GAAG,iBAAiB,GAAG,WAAW,CAAC;AAC1G,YAAA,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,oBAAoB,GAAG,kBAAkB;AACvE,iBAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,GAAG,YAAY,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;YAExF,OAAO;AACL,gBAAA,KAAK,EAAE,UAAU;AACjB,gBAAA,MAAM,EAAE,WAAW;gBACnB,SAAS;gBACT,UAAU;AACV,gBAAA,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC;AAChD,gBAAA,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC;AACrD,gBAAA,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,EAAE;AAC1D,gBAAA,WAAW,EAAE,CAAC;AACd,gBAAA,SAAS,EAAE,EAAE;AACb,gBAAA,WAAW,EAAE,EAAE;AACf,gBAAA,YAAY,EAAE,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC;AACvD,gBAAA,UAAU,EAAE;aACb;;QAGH,OAAO;AACL,YAAA,KAAK,EAAE,cAAc;AACrB,YAAA,MAAM,EAAE,eAAe;AACvB,YAAA,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,EAAE;AACtC,YAAA,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;AACxC,YAAA,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC;AAChD,YAAA,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC;AACrD,YAAA,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,EAAE;AAC1D,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,SAAS,EAAE,EAAE;AACb,YAAA,WAAW,EAAE,EAAE;AACf,YAAA,YAAY,EAAE,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC;AACvD,YAAA,UAAU,EAAE;SACb;;IAGK,uBAAuB,GAAA;AAC7B,QAAA,MAAM,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE;QACnD,IAAI,WAAW,GAAG,CAAC;QACnB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,IAAI,CAAC;;QAG5D,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;YACpC,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB;YACvE,WAAW,IAAI,WAAW;YAC1B,IAAI,KAAK,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnC,WAAW,IAAI,YAAY;;AAE/B,SAAC,CAAC;;AAGF,QAAA,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,WAAW,IAAI,EAAE;;;AAInB,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAClD,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,KAAK,KAAK;YACvE,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,KAAK,KAAK;AAErE,YAAA,IAAI,gBAAgB,IAAI,eAAe,EAAE;gBACvC,IAAI,YAAY,GAAG,CAAC;AACpB,gBAAA,IAAI,gBAAgB;oBAAE,YAAY,IAAI,EAAE;AACxC,gBAAA,IAAI,eAAe;oBAAE,YAAY,IAAI,EAAE;AACvC,gBAAA,WAAW,IAAI,YAAY,GAAG,EAAE,CAAC;;;AAIrC,QAAA,OAAO,WAAW;;AAGZ,IAAA,gBAAgB,CAAC,MAAuB,EAAA;QAC9C,OAAO;AACL,YAAA,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE;AAC/B,YAAA,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;AACnC,YAAA,SAAS,EAAE,MAAM,CAAC,SAAS,IAAI,EAAE;AACjC,YAAA,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,EAAE;AACnC,YAAA,UAAU,EAAE,MAAM,CAAC,UAAU,KAAK,KAAK;AACvC,YAAA,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,KAAK;AAC1C,YAAA,aAAa,EAAE,MAAM,CAAC,aAAa,IAAI,sBAAsB;AAC7D,YAAA,cAAc,EAAE,MAAM,CAAC,cAAc,IAAI,EAAE;AAC3C,YAAA,mBAAmB,EAAE,MAAM,CAAC,mBAAmB,IAAI,EAAE;AACrD,YAAA,SAAS,EAAE,MAAM,CAAC,SAAS,IAAI,WAAW;AAC1C,YAAA,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,WAAW;AAC9C,YAAA,eAAe,EAAE,MAAM,CAAC,eAAe,IAAI,EAAE;AAC7C,YAAA,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,IAAI,EAAE;AACjD,YAAA,QAAQ,EAAE,MAAM,CAAC,QAAQ,KAAK,KAAK;AACnC,YAAA,UAAU,EAAE,MAAM,CAAC,UAAU,KAAK,KAAK;AACvC,YAAA,SAAS,EAAE,MAAM,CAAC,SAAS,KAAK,KAAK;AACrC,YAAA,eAAe,EAAE,MAAM,CAAC,eAAe,KAAK,KAAK;AACjD,YAAA,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,KAAK;AACtC,YAAA,MAAM,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;YAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE,MAAM,EAAE,EAAE;SAC1C;;;AAII,IAAA,gBAAgB,CAAC,WAAgC,EAAA;AACtD,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE;;QAEvC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,EAAE;;;AAIlC,QAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,CAAC;;AAGpG,QAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,WAAW,EAAE,CAAC;QAEnE,IAAI,CAAC,MAAM,EAAE;;AAGR,IAAA,mBAAmB,CAAC,SAAiB,EAAA;QAC1C,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC;YAC5F,IAAI,CAAC,MAAM,EAAE;;;IAIV,mBAAmB,CAAC,SAAiB,EAAE,OAAqC,EAAA;QACjF,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;YAChC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC;AACpF,YAAA,IAAI,UAAU,IAAI,CAAC,EAAE;gBACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG;oBACxC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;AAC1C,oBAAA,GAAG;iBACJ;gBACD,IAAI,CAAC,MAAM,EAAE;;;;AAKZ,IAAA,iBAAiB,CAAC,SAAiB,EAAA;QACxC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;AAGjD,IAAA,iBAAiB,CAAC,SAAiB,EAAA;QACxC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;AAGlD,IAAA,qBAAqB,CAAC,UAAoB,EAAA;QAC/C,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;YAChC,MAAM,aAAa,GAA0B,EAAE;YAE/C,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;gBAClC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,MAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC;gBACxE,IAAI,KAAK,EAAE;AACT,oBAAA,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;;AAElD,aAAC,CAAC;;YAGF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAG;gBAC1C,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;AACrC,oBAAA,aAAa,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC;;AAE9D,aAAC,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,aAAa;YAC3C,IAAI,CAAC,MAAM,EAAE;;;IAIV,iBAAiB,GAAA;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,IAAI,EAAE;;AAGpC,IAAA,iBAAiB,CAAC,MAA6B,EAAA;AACpD,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;AACzB,YAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,EAAE;;QAE3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM;QACpC,IAAI,CAAC,MAAM,EAAE;;IAGR,0BAA0B,GAAA;QAC/B,OAAO,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,IAAI,EAAE;;AAE1C;;AC9zCK,MAAO,mBAAoB,SAAQ,YAAY,CAAA;IASnD,WAAA,CAAY,SAAsB,EAAE,MAAA,GAA0B,EAAE,EAAA;AAC9D,QAAA,KAAK,EAAE;QAPD,IAAA,CAAA,aAAa,GAAyB,IAAI;QAC1C,IAAA,CAAA,UAAU,GAAc,EAAE;QAC1B,IAAA,CAAA,eAAe,GAAkB,EAAE;AAMzC,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS;AAC1B,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC;QACxD,IAAI,CAAC,mBAAmB,EAAE;;;IAI5B,MAAM,WAAW,CAAC,IAAU,EAAA;AAC1B,QAAA,IAAI;YACF,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC;YACnD,MAAM,UAAU,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC;AAErD,YAAA,IAAI,UAAU,CAAC,OAAO,EAAE;AACtB,gBAAA,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;;AAGjC,YAAA,OAAO,UAAU;;QACjB,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,gBAAgB,GAAqB;AACzC,gBAAA,OAAO,EAAE,KAAK;AACd,gBAAA,MAAM,EAAE,CAAC;AACP,wBAAA,IAAI,EAAE,gBAAgB;AACtB,wBAAA,OAAO,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG;qBACnD,CAAC;AACF,gBAAA,QAAQ,EAAE;aACX;AACD,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;AACzB,YAAA,OAAO,gBAAgB;;;AAI3B,IAAA,MAAM,WAAW,CAAC,IAAe,EAAE,UAAuB,EAAA;AACxD,QAAA,IAAI;YACF,IAAI,CAAC,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AAC5B,YAAA,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC;;QAC3C,OAAO,KAAK,EAAE;AACd,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;AACzB,YAAA,MAAM,KAAK;;;IAIf,MAAM,gBAAgB,CAAC,IAAU,EAAA;AAC/B,QAAA,IAAI;YACF,MAAM,YAAY,GAAG,MAAM,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC;AAC7D,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,OAAO;YAC9C,MAAM,UAAU,GAAG,cAAc,CAAC,gBAAgB,CAAC,YAAY,EAAE,UAAU,CAAC;AAE5E,YAAA,IAAI,UAAU,CAAC,OAAO,EAAE;AACtB,gBAAA,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;;AAG3C,YAAA,OAAO,UAAU;;QACjB,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,gBAAgB,GAAqB;AACzC,gBAAA,OAAO,EAAE,KAAK;AACd,gBAAA,MAAM,EAAE,CAAC;AACP,wBAAA,IAAI,EAAE,gBAAgB;AACtB,wBAAA,OAAO,EAAE,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG;qBACnD,CAAC;AACF,gBAAA,QAAQ,EAAE;aACX;AACD,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;AACzB,YAAA,OAAO,gBAAgB;;;IAI3B,MAAM,gBAAgB,CAAC,IAAmB,EAAA;AACxC,QAAA,IAAI;YACF,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AAChC,gBAAA,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;;YAG5D,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACjC,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC;;QAC3C,OAAO,KAAK,EAAE;AACd,YAAA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;AACzB,YAAA,MAAM,KAAK;;;;IAKf,MAAM,GAAA;AACJ,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACvB,YAAA,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC;;AAE1E,QAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;;AAGxB,IAAA,MAAM,CAAC,MAAiC,EAAA;QACtC,IAAI,MAAM,EAAE;YACV,MAAM,SAAS,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;AACpC,YAAA,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,EAAE;AAC3C,YAAA,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC;;YAGlC,MAAM,YAAY,GAAG,SAAS,IAAI,MAAM,KACtC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CACrE;AACD,YAAA,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,KAClD,MAAM,CAAC,QAAQ,KAAK,SAAS;gBAC7B,MAAM,CAAC,UAAU,KAAK,SAAS;AAC/B,gBAAA,YAAY,CACb;YAED,IAAI,iBAAiB,EAAE;gBACrB,IAAI,CAAC,aAAa,EAAE;;;QAGxB,IAAI,CAAC,MAAM,EAAE;;IAGf,MAAM,CAAC,KAAc,EAAE,MAAe,EAAA;QACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC;;;IAIrC,SAAS,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;;IAGlC,MAAM,SAAS,CAAC,OAKf,EAAA;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;;IAGzC,UAAU,GAAA;AACR,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;AACvB,YAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;;QAEjD,OAAO,EAAE,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;;;IAInC,gBAAgB,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,EAAE;;IAGnC,kBAAkB,GAAA;AAChB,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;;AAGrC,IAAA,gBAAgB,CAAC,KAAe,EAAA;QAC9B,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;;AAGlC,IAAA,kBAAkB,CAAC,OAAiB,EAAA;QAClC,IAAI,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;;;IAItC,iBAAiB,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;;IAGxC,WAAW,GAAA;;AAET,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,EAAE;QAC3C,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;AAC1E,QAAA,OAAO,QAAQ,CAAC,IAAI,EAAE;;IAGxB,mBAAmB,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,aAAa,EAAE,OAAO,IAAI,EAAE;;IAG1C,aAAa,GAAA;;AAEX,QAAA,IAAI,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE;YAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE;;;AAGxC,QAAA,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC;AAAE,YAAA,OAAO,EAAE;QAC3C,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;AACrF,QAAA,OAAO,UAAU,CAAC,IAAI,EAAE;;IAG1B,4BAA4B,GAAA;;AAE1B,QAAA,OAAO,IAAI,CAAC,aAAa,EAAE,yBAAyB,IAAI,CAAC;;IAG3D,aAAa,GAAA;AACX,QAAA,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;AACL,gBAAA,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC;AAClF,gBAAA,aAAa,EAAE,IAAI;AACnB,gBAAA,cAAc,EAAE,IAAI,CAAC,aAAa,EAAE,UAAU,EAAE;aACjD;;QAEH,OAAO;AACL,YAAA,YAAY,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,MAAM;AACzC,YAAA,aAAa,EAAE;SAChB;;IAGH,iBAAiB,GAAA;QACf,OAAO,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,MAAM,IAAI,EAAE;;IAGlD,eAAe,GAAA;QACb,IAAI,CAAC,IAAI,CAAC,aAAa;AAAE,YAAA,OAAO,EAAE;AAClC,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;;IAGzF,gBAAgB,GAAA;AAOd,QAAA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO;AACL,gBAAA,cAAc,EAAE,CAAC;AACjB,gBAAA,UAAU,EAAE,CAAC;AACb,gBAAA,YAAY,EAAE,CAAC;AACf,gBAAA,yBAAyB,EAAE,CAAC;AAC5B,gBAAA,uBAAuB,EAAE;aAC1B;;QAGH,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,aAAa;QAExD,OAAO;YACL,cAAc,EAAE,SAAS,CAAC,MAAM;YAChC,UAAU,EAAE,KAAK,CAAC,MAAM;YACxB,YAAY,EAAE,OAAO,CAAC,MAAM;AAC5B,YAAA,yBAAyB,EAAE,SAAS,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM;AAC5D,YAAA,uBAAuB,EAAE,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC;SACnD;;;AAIH,IAAA,SAAS,CAAC,MAAuB,EAAA;AAC/B,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;AACpB,QAAA,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC;;IAGpC,SAAS,GAAA;AACP,QAAA,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE;;;IAI3B,oBAAoB,CAAC,aAAsB,IAAI,EAAA;QAC7C,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE;AAEzB,QAAA,MAAM,WAAW,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC;QACtF,IAAI,CAAC,MAAM,CAAC;AACV,YAAA,SAAS,EAAE,QAAQ;AACnB,YAAA,eAAe,EAAE;AAClB,SAAA,CAAC;;IAGJ,yBAAyB,CAAC,aAAsB,IAAI,EAAA;QAClD,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE;AAEzB,QAAA,MAAM,aAAa,GAAG,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC;QAC7F,IAAI,CAAC,MAAM,CAAC;AACV,YAAA,WAAW,EAAE,QAAQ;AACrB,YAAA,iBAAiB,EAAE;AACpB,SAAA,CAAC;;AAGJ,IAAA,qBAAqB,CAAC,KAAa,EAAE,SAAA,GAAqB,IAAI,EAAA;QAC5D,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE;AAEzB,QAAA,MAAM,aAAa,GAAG,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,EAAE,SAAS,CAAC;QAC/F,IAAI,CAAC,MAAM,CAAC;AACV,YAAA,WAAW,EAAE,QAAQ;AACrB,YAAA,iBAAiB,EAAE;AACpB,SAAA,CAAC;;;AAIJ,IAAA,yBAAyB,CAAC,YAAoB,EAAE,YAAA,GAAuB,CAAC,EAAA;QACtE,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE;QAEzB,MAAM,WAAW,GAAG,aAAa,CAAC,4BAA4B,CAAC,IAAI,CAAC,aAAa,CAAC;AAClF,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAG;AAC3D,YAAA,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;AAC9B,YAAA,OAAO,IAAI,IAAI,YAAY,IAAI,IAAI,IAAI,YAAY;AACrD,SAAC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC;;IAG1C,qBAAqB,CAAC,QAAgB,EAAE,QAAiB,EAAA;QACvD,IAAI,CAAC,IAAI,CAAC,aAAa;YAAE;AAEzB,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAG;YAC3D,MAAM,KAAK,GAAG,IAAI,CAAC,aAAc,CAAC,UAAU,CAAC,IAAI,CAAC;AAClD,YAAA,OAAO,KAAK,IAAI,QAAQ,KAAK,QAAQ,KAAK,SAAS,IAAI,KAAK,IAAI,QAAQ,CAAC;AAC3E,SAAC,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC;;;IAIlC,mBAAmB,GAAA;QACzB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;;AAGzD,IAAA,gBAAgB,CAAC,IAAe,EAAA;AACtC,QAAA,IAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC;;AAG5B,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3D,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,IACpC,IAAI,CAAC,MAAM,CAAC,QAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAChD;;;AAIH,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/D,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,IACpC,IAAI,CAAC,MAAM,CAAC,UAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAC3D;;AAGH,QAAA,OAAO,YAAY;;IAGb,aAAa,GAAA;QACnB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AAChC,YAAA,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC;;QAG3D,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC;AAC3D,QAAA,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,SAAS;;AAExF,QAAA,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC;;QAG5F,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE;AAC9B,YAAA,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,YAAY,CAC7C,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EACzB,IAAI,CAAC,MAAM,CAAC,WAAW,EACvB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,SAAS;aACV;;QAGH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC;;IAGnC,kBAAkB,GAAA;QACxB,IAAI,CAAC,IAAI,CAAC,aAAa;AAAE,YAAA,OAAO,EAAE;AAElC,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,KAAK;YACnD,WAAW,EAAE,QAAQ,CAAC,IAAI;YAC1B,oBAAoB,EAAE,QAAQ,CAAC,MAAM;YACrC,sBAAsB,EAAE,QAAQ,CAAC,WAAW;YAC5C,cAAc,EAAE,QAAQ,CAAC,aAAa;YACtC,UAAU,EAAE,QAAQ,CAAC,UAAU;YAC/B,cAAc,EAAE,QAAQ,CAAC,aAAa;YACtC,YAAY,EAAE,QAAQ,CAAC;AACxB,SAAA,CAAC,CAAC;;;AAIE,IAAA,gBAAgB,CAAC,WAAgC,EAAA;AACtD,QAAA,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,CAAC;;AAGtC,IAAA,mBAAmB,CAAC,SAAiB,EAAA;AAC1C,QAAA,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,CAAC;;IAGvC,mBAAmB,CAAC,SAAiB,EAAE,OAAqC,EAAA;QACjF,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,OAAO,CAAC;;AAGhD,IAAA,iBAAiB,CAAC,SAAiB,EAAA;AACxC,QAAA,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC;;AAGrC,IAAA,iBAAiB,CAAC,SAAiB,EAAA;AACxC,QAAA,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC;;AAGrC,IAAA,qBAAqB,CAAC,UAAoB,EAAA;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,UAAU,CAAC;;IAG1C,iBAAiB,GAAA;AACtB,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE;;AAGnC,IAAA,iBAAiB,CAAC,MAA6B,EAAA;AACpD,QAAA,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC;;IAGlC,0BAA0B,GAAA;AAC/B,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,0BAA0B,EAAE;;;IAInD,OAAO,GAAA;QACL,IAAI,CAAC,kBAAkB,EAAE;AACzB,QAAA,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE;;AAGlC,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;YAChC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;;;AAG1D;;ACpYM,MAAM,SAAS,GAAGC,gBAAU,CAA+B,CAAC,EACjE,OAAO,EACP,YAAY,EACZ,OAAO,EACP,YAAY,EACZ,MAAM,GAAG,EAAE,EACX,KAAK,EACL,MAAM,EACN,WAAW,EACX,aAAa,EACb,WAAW,EACX,YAAY,EACZ,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,KAAK,EACN,EAAE,GAAG,KAAI;AACR,IAAA,MAAM,YAAY,GAAGC,YAAM,CAAiB,IAAI,CAAC;AACjD,IAAA,MAAM,aAAa,GAAGA,YAAM,CAA6B,IAAI,CAAC;;IAG9DC,eAAS,CAAC,MAAK;QACb,IAAI,CAAC,YAAY,CAAC,OAAO;YAAE;QAE3B,MAAM,UAAU,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;AACxE,QAAA,aAAa,CAAC,OAAO,GAAG,UAAU;;QAGlC,IAAI,WAAW,EAAE;AACf,YAAA,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAsB,KAAK,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;QAGhF,IAAI,aAAa,EAAE;AACjB,YAAA,UAAU,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,IAAwB,KAAK,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;QAGxF,IAAI,WAAW,EAAE;YACf,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,IAAwD,KAAI;AACtF,gBAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,EAAuB,GAAG,SAAS;gBAC9F,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC;AAC/C,aAAC,CAAC;;QAGJ,IAAI,YAAY,EAAE;AAChB,YAAA,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;;QAG3C,IAAI,OAAO,EAAE;AACX,YAAA,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;;AAGjC,QAAA,OAAO,MAAK;YACV,UAAU,CAAC,OAAO,EAAE;AACtB,SAAC;KACF,EAAE,EAAE,CAAC;;IAGNA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,aAAa,CAAC,OAAO,EAAE;AACzB,YAAA,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;;AAE3C,KAAC,EAAE,CAAC,MAAM,CAAC,CAAC;;IAGZA,eAAS,CAAC,MAAK;QACb,IAAI,aAAa,CAAC,OAAO,KAAK,KAAK,IAAI,MAAM,CAAC,EAAE;YAC9C,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC;;AAE/C,KAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;;IAGnBA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,OAAO,IAAI,aAAa,CAAC,OAAO,EAAE;AACpC,YAAA,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO;AACtC,iBAAA,IAAI,CAAC,CAAC,UAAU,KAAI;AACnB,gBAAA,IAAI,UAAU,CAAC,OAAO,EAAE;AACtB,oBAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;oBAC/B,gBAAgB,IAAI;;qBACf;AACL,oBAAA,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI,4BAA4B,CAAC;AACtF,oBAAA,OAAO,GAAG,KAAK,CAAC;;AAEpB,aAAC;AACA,iBAAA,KAAK,CAAC,CAAC,KAAK,KAAI;AACf,gBAAA,OAAO,GAAG,KAAK,CAAC;AAClB,aAAC,CAAC;;KAEP,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;;IAGxCA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,OAAO,IAAI,aAAa,CAAC,OAAO,EAAE;AACpC,YAAA,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO;iBACtC,IAAI,CAAC,MAAK;AACT,gBAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;gBAC/B,gBAAgB,IAAI;AACtB,aAAC;AACA,iBAAA,KAAK,CAAC,CAAC,KAAK,KAAI;AACf,gBAAA,OAAO,GAAG,KAAK,CAAC;AAClB,aAAC,CAAC;;KAEP,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;;IAGxCA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,YAAY,IAAI,aAAa,CAAC,OAAO,EAAE;AACzC,YAAA,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY;AAChD,iBAAA,IAAI,CAAC,CAAC,UAAU,KAAI;AACnB,gBAAA,IAAI,UAAU,CAAC,OAAO,EAAE;AACtB,oBAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;oBAC/B,gBAAgB,IAAI;;qBACf;AACL,oBAAA,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,IAAI,iCAAiC,CAAC;AAC3F,oBAAA,OAAO,GAAG,KAAK,CAAC;;AAEpB,aAAC;AACA,iBAAA,KAAK,CAAC,CAAC,KAAK,KAAI;AACf,gBAAA,OAAO,GAAG,KAAK,CAAC;AAClB,aAAC,CAAC;;KAEP,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;;IAG7CA,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,YAAY,IAAI,aAAa,CAAC,OAAO,EAAE;AACzC,YAAA,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY;iBAChD,IAAI,CAAC,MAAK;AACT,gBAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;gBAC/B,gBAAgB,IAAI;AACtB,aAAC;AACA,iBAAA,KAAK,CAAC,CAAC,KAAK,KAAI;AACf,gBAAA,OAAO,GAAG,KAAK,CAAC;AAClB,aAAC,CAAC;;KAEP,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,gBAAgB,CAAC,CAAC;;AAG7C,IAAAC,yBAAmB,CAAC,GAAG,EAAE,OAAO;QAC9B,SAAS,EAAE,MAAK;AACd,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,gBAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,YAAA,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE;SACzC;QAED,SAAS,EAAE,YAAW;AACpB,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,gBAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,YAAA,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE;SACzC;QAED,UAAU,EAAE,MAAK;AACf,YAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,gBAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,YAAA,OAAO,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE;SAC1C;AAED,QAAA,gBAAgB,EAAE,CAAC,KAAe,KAAI;AACpC,YAAA,aAAa,CAAC,OAAO,EAAE,gBAAgB,CAAC,KAAK,CAAC;SAC/C;AAED,QAAA,kBAAkB,EAAE,CAAC,OAAiB,KAAI;AACxC,YAAA,aAAa,CAAC,OAAO,EAAE,kBAAkB,CAAC,OAAO,CAAC;SACnD;QAED,gBAAgB,EAAE,MAAK;YACrB,OAAO,aAAa,CAAC,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE;SACvD;QAED,kBAAkB,EAAE,MAAK;YACvB,OAAO,aAAa,CAAC,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE;SACzD;QAED,gBAAgB,EAAE,MAAK;AACrB,YAAA,OAAO,aAAa,CAAC,OAAO,EAAE,gBAAgB,EAAE;SACjD;QAED,iBAAiB,EAAE,MAAK;YACtB,OAAO,aAAa,CAAC,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAE;SACxD;QAED,mBAAmB,EAAE,MAAK;YACxB,OAAO,aAAa,CAAC,OAAO,EAAE,mBAAmB,EAAE,IAAI,EAAE;SAC1D;QAED,iBAAiB,EAAE,MAAK;YACtB,OAAO,aAAa,CAAC,OAAO,EAAE,iBAAiB,EAAE,IAAI,EAAE;SACxD;AAED,QAAA,oBAAoB,EAAE,CAAC,UAAU,GAAG,IAAI,KAAI;AAC1C,YAAA,aAAa,CAAC,OAAO,EAAE,oBAAoB,CAAC,UAAU,CAAC;SACxD;AAED,QAAA,yBAAyB,EAAE,CAAC,UAAU,GAAG,IAAI,KAAI;AAC/C,YAAA,aAAa,CAAC,OAAO,EAAE,yBAAyB,CAAC,UAAU,CAAC;SAC7D;QAED,qBAAqB,EAAE,CAAC,KAAa,EAAE,SAAS,GAAG,IAAI,KAAI;YACzD,aAAa,CAAC,OAAO,EAAE,qBAAqB,CAAC,KAAK,EAAE,SAAS,CAAC;SAC/D;QAED,yBAAyB,EAAE,CAAC,OAAe,EAAE,OAAO,GAAG,CAAC,KAAI;YAC1D,aAAa,CAAC,OAAO,EAAE,yBAAyB,CAAC,OAAO,EAAE,OAAO,CAAC;SACnE;QAED,MAAM,EAAE,MAAK;AACX,YAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;SAChC;AAED,QAAA,MAAM,EAAE,CAAC,SAAoC,KAAI;AAC/C,YAAA,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;;KAE3C,CAAC,EAAE,EAAE,CAAC;IAEP,QACEC,cAAA,CAAA,KAAA,EAAA,EACE,GAAG,EAAE,YAAY,EACjB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE;YACL,KAAK,EAAE,KAAK,IAAI,MAAM;YACtB,MAAM,EAAE,MAAM,IAAI,MAAM;AACxB,YAAA,GAAG;AACJ,SAAA,EAAA,CACD;AAEN,CAAC;AAED,SAAS,CAAC,WAAW,GAAG,WAAW;;AClO7B,SAAU,YAAY,CAAC,EAC3B,SAAS,EACT,MAAM,GAAG,EAAE,EACX,UAAU,GAAG,IAAI,KACM,EAAE,EAAA;IACzB,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAGC,cAAQ,CAAuB,IAAI,CAAC;IAC5D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAGA,cAAQ,CAAC,KAAK,CAAC;IACjD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGA,cAAQ,CAAe,IAAI,CAAC;IACtD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAGA,cAAQ,CAAW,EAAE,CAAC;IAChE,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAGA,cAAQ,CAAW,EAAE,CAAC;IACpE,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAGA,cAAQ,CAAW,EAAE,CAAC;IAClE,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAAGA,cAAQ,CAAW,EAAE,CAAC;IACtE,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAGA,cAAQ,CAAW,EAAE,CAAC;IAClE,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAGA,cAAQ,CAAM,EAAE,CAAC;AAE3D,IAAA,MAAM,aAAa,GAAGJ,YAAM,CAA6B,IAAI,CAAC;;IAG9DC,eAAS,CAAC,MAAK;AACb,QAAA,IAAI,CAAC,SAAS;YAAE;QAEhB,MAAM,UAAU,GAAG,IAAI,mBAAmB,CAAC,SAAS,EAAE,MAAM,CAAC;AAC7D,QAAA,aAAa,CAAC,OAAO,GAAG,UAAU;;QAGlC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,UAAyB,KAAI;YACxD,OAAO,CAAC,UAAU,CAAC;AACnB,YAAA,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;AACjD,YAAA,mBAAmB,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;AACrD,YAAA,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;AACjD,YAAA,gBAAgB,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YAC/C,YAAY,CAAC,KAAK,CAAC;YACnB,QAAQ,CAAC,IAAI,CAAC;AAChB,SAAC,CAAC;QAEF,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,KAAI;YACpC,QAAQ,CAAC,GAAG,CAAC;YACb,YAAY,CAAC,KAAK,CAAC;AACrB,SAAC,CAAC;AAEF,QAAA,OAAO,MAAK;YACV,UAAU,CAAC,OAAO,EAAE;AACtB,SAAC;AACH,KAAC,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;;IAGvB,MAAM,WAAW,GAAGI,iBAAW,CAAC,OAAO,IAAU,KAA+B;AAC9E,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;QAG/C,YAAY,CAAC,IAAI,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC;AAEd,QAAA,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;AAChE,YAAA,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,EAAE;AACpC,gBAAA,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE;;AAEhC,YAAA,OAAO,UAAU;;QACjB,OAAO,GAAG,EAAE;AACZ,YAAA,MAAM,KAAK,GAAG,GAAG,YAAY,KAAK,GAAG,GAAG,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC;YACrE,QAAQ,CAAC,KAAK,CAAC;YACf,YAAY,CAAC,KAAK,CAAC;AACnB,YAAA,MAAM,KAAK;;AAEf,KAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IAEhB,MAAM,WAAW,GAAGA,iBAAW,CAAC,OAAO,OAAkB,KAAmB;AAC1E,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;QAG/C,YAAY,CAAC,IAAI,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC;AAEd,QAAA,IAAI;YACF,MAAM,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC;YAChD,IAAI,UAAU,EAAE;AACd,gBAAA,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE;;;QAEhC,OAAO,GAAG,EAAE;AACZ,YAAA,MAAM,KAAK,GAAG,GAAG,YAAY,KAAK,GAAG,GAAG,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC;YACrE,QAAQ,CAAC,KAAK,CAAC;YACf,YAAY,CAAC,KAAK,CAAC;AACnB,YAAA,MAAM,KAAK;;AAEf,KAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IAEhB,MAAM,gBAAgB,GAAGA,iBAAW,CAAC,OAAO,IAAU,KAA+B;AACnF,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;QAG/C,YAAY,CAAC,IAAI,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC;AAEd,QAAA,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC;AACrE,YAAA,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,EAAE;AACpC,gBAAA,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE;;AAEhC,YAAA,OAAO,UAAU;;QACjB,OAAO,GAAG,EAAE;AACZ,YAAA,MAAM,KAAK,GAAG,GAAG,YAAY,KAAK,GAAG,GAAG,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC;YACrE,QAAQ,CAAC,KAAK,CAAC;YACf,YAAY,CAAC,KAAK,CAAC;AACnB,YAAA,MAAM,KAAK;;AAEf,KAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IAEhB,MAAM,gBAAgB,GAAGA,iBAAW,CAAC,OAAO,YAA2B,KAAmB;AACxF,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;QAG/C,YAAY,CAAC,IAAI,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC;AAEd,QAAA,IAAI;YACF,MAAM,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC;YAC1D,IAAI,UAAU,EAAE;AACd,gBAAA,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE;;;QAEhC,OAAO,GAAG,EAAE;AACZ,YAAA,MAAM,KAAK,GAAG,GAAG,YAAY,KAAK,GAAG,GAAG,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC;YACrE,QAAQ,CAAC,KAAK,CAAC;YACf,YAAY,CAAC,KAAK,CAAC;AACnB,YAAA,MAAM,KAAK;;AAEf,KAAC,EAAE,CAAC,UAAU,CAAC,CAAC;;AAGhB,IAAA,MAAM,MAAM,GAAGA,iBAAW,CAAC,MAAK;AAC9B,QAAA,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE;KAChC,EAAE,EAAE,CAAC;AAEN,IAAA,MAAM,MAAM,GAAGA,iBAAW,CAAC,CAAC,SAAoC,KAAI;AAClE,QAAA,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC;KACzC,EAAE,EAAE,CAAC;IAEN,MAAM,MAAM,GAAGA,iBAAW,CAAC,CAAC,KAAc,EAAE,MAAe,KAAI;QAC7D,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC;KAC7C,EAAE,EAAE,CAAC;;AAGN,IAAA,MAAM,SAAS,GAAGA,iBAAW,CAAC,MAAa;AACzC,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,QAAA,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE;KACzC,EAAE,EAAE,CAAC;AAEN,IAAA,MAAM,SAAS,GAAGA,iBAAW,CAAC,YAA0B;AACtD,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,QAAA,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE;KACzC,EAAE,EAAE,CAAC;AAEN,IAAA,MAAM,UAAU,GAAGA,iBAAW,CAAC,MAAoB;AACjD,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC;;AAE/C,QAAA,OAAO,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE;KAC1C,EAAE,EAAE,CAAC;;AAGN,IAAA,MAAM,gBAAgB,GAAGA,iBAAW,CAAC,CAAC,KAAe,KAAI;QACvD,gBAAgB,CAAC,KAAK,CAAC;AACvB,QAAA,aAAa,CAAC,OAAO,EAAE,gBAAgB,CAAC,KAAK,CAAC;KAC/C,EAAE,EAAE,CAAC;AAEN,IAAA,MAAM,kBAAkB,GAAGA,iBAAW,CAAC,CAAC,OAAiB,KAAI;QAC3D,kBAAkB,CAAC,OAAO,CAAC;AAC3B,QAAA,aAAa,CAAC,OAAO,EAAE,kBAAkB,CAAC,OAAO,CAAC;KACnD,EAAE,EAAE,CAAC;;IAGN,MAAM,oBAAoB,GAAGA,iBAAW,CAAC,CAAC,UAAU,GAAG,IAAI,KAAI;AAC7D,QAAA,aAAa,CAAC,OAAO,EAAE,oBAAoB,CAAC,UAAU,CAAC;KACxD,EAAE,EAAE,CAAC;IAEN,MAAM,yBAAyB,GAAGA,iBAAW,CAAC,CAAC,UAAU,GAAG,IAAI,KAAI;AAClE,QAAA,aAAa,CAAC,OAAO,EAAE,yBAAyB,CAAC,UAAU,CAAC;KAC7D,EAAE,EAAE,CAAC;IAEN,MAAM,qBAAqB,GAAGA,iBAAW,CAAC,CAAC,KAAa,EAAE,SAAS,GAAG,IAAI,KAAI;QAC5E,aAAa,CAAC,OAAO,EAAE,qBAAqB,CAAC,KAAK,EAAE,SAAS,CAAC;KAC/D,EAAE,EAAE,CAAC;IAEN,MAAM,yBAAyB,GAAGA,iBAAW,CAAC,CAAC,OAAe,EAAE,OAAO,GAAG,CAAC,KAAI;QAC7E,aAAa,CAAC,OAAO,EAAE,yBAAyB,CAAC,OAAO,EAAE,OAAO,CAAC;KACnE,EAAE,EAAE,CAAC;IAEN,OAAO;;QAEL,IAAI;QACJ,SAAS;QACT,KAAK;;QAGL,WAAW;QACX,WAAW;QACX,gBAAgB;QAChB,gBAAgB;;QAGhB,MAAM;QACN,MAAM;QACN,MAAM;;QAGN,SAAS;QACT,SAAS;QACT,UAAU;;QAGV,aAAa;QACb,eAAe;QACf,gBAAgB;QAChB,kBAAkB;;QAGlB,cAAc;QACd,gBAAgB;QAChB,cAAc;QACd,aAAa;QACb,oBAAoB;QACpB,yBAAyB;QACzB,qBAAqB;QACrB,yBAAyB;;QAGzB,UAAU,EAAE,aAAa,CAAC;KAC3B;AACH;;;;;;;;;;;;;"}